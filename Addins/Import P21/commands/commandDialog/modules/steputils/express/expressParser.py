# Generated from D:/Source/steputils/data/formal\express.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00a4")
        buf.write("\u0636\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3")
        buf.write("\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3")
        buf.write("\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3")
        buf.write("\21\3\22\3\22\3\22\5\22\u01a6\n\22\3\23\3\23\3\23\3\23")
        buf.write("\7\23\u01ac\n\23\f\23\16\23\u01af\13\23\3\23\3\23\3\24")
        buf.write("\3\24\3\25\3\25\3\25\3\25\7\25\u01b9\n\25\f\25\16\25\u01bc")
        buf.write("\13\25\5\25\u01be\n\25\3\25\3\25\3\26\3\26\3\27\3\27\3")
        buf.write("\27\5\27\u01c7\n\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30")
        buf.write("\5\30\u01d0\n\30\3\31\7\31\u01d3\n\31\f\31\16\31\u01d6")
        buf.write("\13\31\3\31\5\31\u01d9\n\31\3\31\5\31\u01dc\n\31\3\32")
        buf.write("\3\32\3\32\3\32\3\32\7\32\u01e3\n\32\f\32\16\32\u01e6")
        buf.write("\13\32\3\32\3\32\6\32\u01ea\n\32\r\32\16\32\u01eb\3\32")
        buf.write("\3\32\3\32\3\33\3\33\3\33\3\33\5\33\u01f5\n\33\3\33\5")
        buf.write("\33\u01f8\n\33\3\33\3\33\3\34\3\34\7\34\u01fe\n\34\f\34")
        buf.write("\16\34\u0201\13\34\3\34\3\34\3\34\3\34\3\35\3\35\5\35")
        buf.write("\u0209\n\35\3\36\3\36\3\37\3\37\3\37\3 \3 \5 \u0212\n")
        buf.write(" \3 \3 \3 \3!\3!\5!\u0219\n!\3\"\3\"\3#\3#\3$\3$\3%\3")
        buf.write("%\3%\3%\3%\3%\3&\3&\3\'\3\'\3(\3(\3)\3)\3)\7)\u0230\n")
        buf.write(")\f)\16)\u0233\13)\3)\3)\3)\3*\3*\3+\3+\3+\3+\7+\u023e")
        buf.write("\n+\f+\16+\u0241\13+\3+\3+\3+\5+\u0246\n+\3+\3+\3+\3,")
        buf.write("\3,\6,\u024d\n,\r,\16,\u024e\3,\3,\3,\3-\3-\3-\5-\u0257")
        buf.write("\n-\3.\3.\3.\3.\3.\3.\3.\3/\3/\6/\u0262\n/\r/\16/\u0263")
        buf.write("\3/\3/\3/\3\60\3\60\5\60\u026b\n\60\3\61\3\61\3\62\3\62")
        buf.write("\5\62\u0271\n\62\3\63\3\63\3\63\3\63\3\63\5\63\u0278\n")
        buf.write("\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\65\3\65\6\65")
        buf.write("\u0283\n\65\r\65\16\65\u0284\3\66\3\66\3\66\5\66\u028a")
        buf.write("\n\66\3\66\3\66\3\67\3\67\3\67\5\67\u0291\n\67\38\78\u0294")
        buf.write("\n8\f8\168\u0297\138\38\58\u029a\n8\38\58\u029d\n8\38")
        buf.write("\58\u02a0\n8\38\58\u02a3\n8\39\39\39\39\39\79\u02aa\n")
        buf.write("9\f9\169\u02ad\139\59\u02af\n9\39\39\3:\3:\3:\3:\3:\3")
        buf.write(";\3;\3;\3;\3;\3<\3<\3=\3=\3=\3=\5=\u02c3\n=\3>\3>\3?\3")
        buf.write("?\3?\3?\7?\u02cb\n?\f?\16?\u02ce\13?\3?\3?\3@\3@\3@\5")
        buf.write("@\u02d5\n@\3@\3@\3A\5A\u02da\nA\3A\3A\3A\3A\5A\u02e0\n")
        buf.write("A\3B\3B\3B\3C\3C\3C\5C\u02e8\nC\3C\3C\5C\u02ec\nC\3C\3")
        buf.write("C\3C\3D\3D\3D\3D\5D\u02f5\nD\3E\3E\3E\5E\u02fa\nE\3F\3")
        buf.write("F\3F\7F\u02ff\nF\fF\16F\u0302\13F\3F\3F\3F\3G\3G\5G\u0309")
        buf.write("\nG\3G\5G\u030c\nG\3H\3H\3H\6H\u0311\nH\rH\16H\u0312\3")
        buf.write("H\3H\3H\3I\3I\3I\3I\3I\3I\7I\u031e\nI\fI\16I\u0321\13")
        buf.write("I\3I\3I\5I\u0325\nI\3I\3I\3I\3I\3J\3J\3K\3K\3K\3K\5K\u0331")
        buf.write("\nK\3L\3L\3L\3L\5L\u0337\nL\3M\3M\5M\u033b\nM\3M\3M\5")
        buf.write("M\u033f\nM\3M\5M\u0342\nM\3M\3M\3N\3N\5N\u0348\nN\3N\3")
        buf.write("N\3N\3O\3O\5O\u034f\nO\3O\3O\5O\u0353\nO\3O\3O\3P\3P\5")
        buf.write("P\u0359\nP\3Q\3Q\5Q\u035d\nQ\3Q\3Q\3Q\3R\3R\3R\5R\u0365")
        buf.write("\nR\3S\3S\3S\5S\u036a\nS\3T\3T\3T\3U\3U\3U\3U\6U\u0373")
        buf.write("\nU\rU\16U\u0374\3U\3U\6U\u0379\nU\rU\16U\u037a\5U\u037d")
        buf.write("\nU\3U\3U\3U\3V\3V\3W\3W\3W\3W\3W\3W\3W\5W\u038b\nW\3")
        buf.write("X\3X\3Y\3Y\3Z\3Z\3[\3[\3[\3[\5[\u0397\n[\3[\3[\3\\\3\\")
        buf.write("\5\\\u039d\n\\\3]\3]\3^\3^\5^\u03a3\n^\3_\3_\3_\3_\3_")
        buf.write("\3_\3_\3_\3`\3`\3a\3a\3b\3b\3c\3c\3d\3d\3d\3d\5d\u03b9")
        buf.write("\nd\3d\5d\u03bc\nd\3d\3d\3d\3d\3d\5d\u03c3\nd\3d\3d\3")
        buf.write("d\3e\3e\6e\u03ca\ne\re\16e\u03cb\3f\3f\5f\u03d0\nf\3f")
        buf.write("\3f\5f\u03d4\nf\3f\3f\3g\3g\3g\3g\3g\5g\u03dd\ng\3h\3")
        buf.write("h\6h\u03e1\nh\rh\16h\u03e2\3h\3h\3h\3i\3i\3i\7i\u03eb")
        buf.write("\ni\fi\16i\u03ee\13i\3i\3i\3i\3i\5i\u03f4\ni\3i\3i\3j")
        buf.write("\3j\3k\3k\3l\3l\3m\3m\3n\3n\5n\u0402\nn\3o\3o\3o\3o\5")
        buf.write("o\u0408\no\5o\u040a\no\3p\3p\3q\3q\3r\3r\3s\3s\3s\3s\3")
        buf.write("s\7s\u0417\ns\fs\16s\u041a\13s\3s\3s\3t\3t\3u\3u\3v\3")
        buf.write("v\3v\5v\u0425\nv\3w\3w\3x\3x\3y\3y\3y\7y\u042e\ny\fy\16")
        buf.write("y\u0431\13y\5y\u0433\ny\3z\3z\5z\u0437\nz\3z\6z\u043a")
        buf.write("\nz\rz\16z\u043b\3z\3z\3{\3{\3{\7{\u0443\n{\f{\16{\u0446")
        buf.write("\13{\3{\3{\3{\3|\3|\3|\3|\5|\u044f\n|\3|\3|\3|\5|\u0454")
        buf.write("\n|\3|\7|\u0457\n|\f|\16|\u045a\13|\3|\3|\5|\u045e\n|")
        buf.write("\3|\3|\3}\3}\3~\3~\3~\3~\3~\5~\u0469\n~\3\177\3\177\3")
        buf.write("\177\3\177\3\u0080\3\u0080\3\u0080\5\u0080\u0472\n\u0080")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\5\u0082\u0482\n\u0082\3\u0083\3\u0083\3\u0083\5\u0083")
        buf.write("\u0487\n\u0083\3\u0084\3\u0084\5\u0084\u048b\n\u0084\3")
        buf.write("\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\7\u0085\u0494\n\u0085\f\u0085\16\u0085\u0497\13\u0085")
        buf.write("\3\u0085\3\u0085\5\u0085\u049b\n\u0085\3\u0085\3\u0085")
        buf.write("\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\5\u0087\u04a4")
        buf.write("\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088")
        buf.write("\u04ab\n\u0088\3\u0089\5\u0089\u04ae\n\u0089\3\u0089\5")
        buf.write("\u0089\u04b1\n\u0089\3\u0089\5\u0089\u04b4\n\u0089\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\6\u008a\u04ba\n\u008a\r\u008a")
        buf.write("\16\u008a\u04bb\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b")
        buf.write("\3\u008c\3\u008c\3\u008c\5\u008c\u04c6\n\u008c\3\u008d")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u04cd\n\u008d")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u04d4")
        buf.write("\n\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f\7\u008f")
        buf.write("\u04db\n\u008f\f\u008f\16\u008f\u04de\13\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\7\u0090\u04eb\n\u0090\f\u0090")
        buf.write("\16\u0090\u04ee\13\u0090\3\u0090\3\u0090\3\u0090\3\u0091")
        buf.write("\3\u0091\3\u0092\3\u0092\3\u0093\7\u0093\u04f8\n\u0093")
        buf.write("\f\u0093\16\u0093\u04fb\13\u0093\3\u0093\5\u0093\u04fe")
        buf.write("\n\u0093\3\u0093\3\u0093\7\u0093\u0502\n\u0093\f\u0093")
        buf.write("\16\u0093\u0505\13\u0093\3\u0094\3\u0094\3\u0094\5\u0094")
        buf.write("\u050a\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0095\3\u0095\3\u0096\3\u0096\3\u0097\3\u0097\3\u0098")
        buf.write("\3\u0098\3\u0098\3\u0098\5\u0098\u051b\n\u0098\3\u0099")
        buf.write("\3\u0099\3\u0099\3\u0099\7\u0099\u0521\n\u0099\f\u0099")
        buf.write("\16\u0099\u0524\13\u0099\3\u0099\3\u0099\3\u009a\3\u009a")
        buf.write("\5\u009a\u052a\n\u009a\5\u009a\u052c\n\u009a\3\u009a\3")
        buf.write("\u009a\3\u009a\5\u009a\u0531\n\u009a\3\u009b\3\u009b\5")
        buf.write("\u009b\u0535\n\u009b\3\u009b\3\u009b\3\u009b\3\u009c\3")
        buf.write("\u009c\3\u009c\3\u009c\7\u009c\u053e\n\u009c\f\u009c\16")
        buf.write("\u009c\u0541\13\u009c\3\u009d\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\5\u009d\u0549\n\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\3\u009d\5\u009d\u0550\n\u009d\5\u009d")
        buf.write("\u0552\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\5\u009e\u055b\n\u009e\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u056b")
        buf.write("\n\u00a0\3\u00a1\3\u00a1\3\u00a2\3\u00a2\5\u00a2\u0571")
        buf.write("\n\u00a2\3\u00a3\5\u00a3\u0574\n\u00a3\3\u00a3\5\u00a3")
        buf.write("\u0577\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4")
        buf.write("\3\u00a5\5\u00a5\u057f\n\u00a5\3\u00a5\5\u00a5\u0582\n")
        buf.write("\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0587\n\u00a5\3")
        buf.write("\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a9")
        buf.write("\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u059c")
        buf.write("\n\u00a9\f\u00a9\16\u00a9\u059f\13\u00a9\3\u00a9\3\u00a9")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u05a6\n\u00aa\3\u00ab")
        buf.write("\3\u00ab\3\u00ab\7\u00ab\u05ab\n\u00ab\f\u00ab\16\u00ab")
        buf.write("\u05ae\13\u00ab\3\u00ac\3\u00ac\3\u00ac\7\u00ac\u05b3")
        buf.write("\n\u00ac\f\u00ac\16\u00ac\u05b6\13\u00ac\3\u00ad\3\u00ad")
        buf.write("\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\5\u00ae\u05c1\n\u00ae\3\u00af\6\u00af\u05c4\n\u00af\r")
        buf.write("\u00af\16\u00af\u05c5\3\u00b0\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\7\u00b0\u05cc\n\u00b0\f\u00b0\16\u00b0\u05cf\13\u00b0")
        buf.write("\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u05d6")
        buf.write("\n\u00b1\f\u00b1\16\u00b1\u05d9\13\u00b1\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\5\u00b2\u05e4\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3")
        buf.write("\3\u00b3\3\u00b4\3\u00b4\5\u00b4\u05ed\n\u00b4\3\u00b5")
        buf.write("\3\u00b5\3\u00b6\3\u00b6\3\u00b7\3\u00b7\5\u00b7\u05f5")
        buf.write("\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\6\u00b8\u05fb")
        buf.write("\n\u00b8\r\u00b8\16\u00b8\u05fc\3\u00b9\3\u00b9\3\u00b9")
        buf.write("\5\u00b9\u0602\n\u00b9\3\u00b9\3\u00b9\3\u00b9\7\u00b9")
        buf.write("\u0607\n\u00b9\f\u00b9\16\u00b9\u060a\13\u00b9\3\u00ba")
        buf.write("\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\7\u00bb\u0616\n\u00bb\f\u00bb\16\u00bb")
        buf.write("\u0619\13\u00bb\3\u00bb\3\u00bb\5\u00bb\u061d\n\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd")
        buf.write("\3\u00bd\6\u00bd\u0627\n\u00bd\r\u00bd\16\u00bd\u0628")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\3\u00c0\5\u00c0\u0634\n\u00c0\3\u00c0\2\2\u00c1")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write("\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write("\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a")
        buf.write("\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c")
        buf.write("\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e")
        buf.write("\2\r\5\2\7\bnn\u009a\u009a\6\2\16\16\64\64pp}}\26\2  ")
        buf.write("\"\")*//\65\65JJLLPPUV\\\\__aceeijyy\177\u0080\u0082\u0082")
        buf.write("\u0087\u0087\u008d\u008d\u0092\u0095\4\2YYuu\3\2\23\24")
        buf.write("\4\2++~~\5\2MM\u008b\u008b\u008f\u008f\6\2\25\27%%\67")
        buf.write("\67ff\4\2\23\24\32\37\4\2\u009c\u009c\u00a1\u00a1\4\2")
        buf.write("\7\bgg\2\u063e\2\u0180\3\2\2\2\4\u0182\3\2\2\2\6\u0184")
        buf.write("\3\2\2\2\b\u0186\3\2\2\2\n\u0188\3\2\2\2\f\u018a\3\2\2")
        buf.write("\2\16\u018c\3\2\2\2\20\u018e\3\2\2\2\22\u0190\3\2\2\2")
        buf.write("\24\u0192\3\2\2\2\26\u0194\3\2\2\2\30\u0196\3\2\2\2\32")
        buf.write("\u0198\3\2\2\2\34\u019a\3\2\2\2\36\u019c\3\2\2\2 \u019e")
        buf.write("\3\2\2\2\"\u01a2\3\2\2\2$\u01a7\3\2\2\2&\u01b2\3\2\2\2")
        buf.write("(\u01b4\3\2\2\2*\u01c1\3\2\2\2,\u01c3\3\2\2\2.\u01cf\3")
        buf.write("\2\2\2\60\u01d4\3\2\2\2\62\u01dd\3\2\2\2\64\u01f0\3\2")
        buf.write("\2\2\66\u01fb\3\2\2\28\u0208\3\2\2\2:\u020a\3\2\2\2<\u020c")
        buf.write("\3\2\2\2>\u020f\3\2\2\2@\u0216\3\2\2\2B\u021a\3\2\2\2")
        buf.write("D\u021c\3\2\2\2F\u021e\3\2\2\2H\u0220\3\2\2\2J\u0226\3")
        buf.write("\2\2\2L\u0228\3\2\2\2N\u022a\3\2\2\2P\u022c\3\2\2\2R\u0237")
        buf.write("\3\2\2\2T\u0239\3\2\2\2V\u024a\3\2\2\2X\u0256\3\2\2\2")
        buf.write("Z\u0258\3\2\2\2\\\u025f\3\2\2\2^\u026a\3\2\2\2`\u026c")
        buf.write("\3\2\2\2b\u0270\3\2\2\2d\u0277\3\2\2\2f\u0279\3\2\2\2")
        buf.write("h\u0280\3\2\2\2j\u0289\3\2\2\2l\u028d\3\2\2\2n\u0295\3")
        buf.write("\2\2\2p\u02a4\3\2\2\2r\u02b2\3\2\2\2t\u02b7\3\2\2\2v\u02bc")
        buf.write("\3\2\2\2x\u02be\3\2\2\2z\u02c4\3\2\2\2|\u02c6\3\2\2\2")
        buf.write("~\u02d4\3\2\2\2\u0080\u02d9\3\2\2\2\u0082\u02e1\3\2\2")
        buf.write("\2\u0084\u02e4\3\2\2\2\u0086\u02f0\3\2\2\2\u0088\u02f6")
        buf.write("\3\2\2\2\u008a\u02fb\3\2\2\2\u008c\u0308\3\2\2\2\u008e")
        buf.write("\u030d\3\2\2\2\u0090\u0317\3\2\2\2\u0092\u032a\3\2\2\2")
        buf.write("\u0094\u0330\3\2\2\2\u0096\u0336\3\2\2\2\u0098\u0338\3")
        buf.write("\2\2\2\u009a\u0345\3\2\2\2\u009c\u034c\3\2\2\2\u009e\u0358")
        buf.write("\3\2\2\2\u00a0\u035a\3\2\2\2\u00a2\u0361\3\2\2\2\u00a4")
        buf.write("\u0366\3\2\2\2\u00a6\u036b\3\2\2\2\u00a8\u036e\3\2\2\2")
        buf.write("\u00aa\u0381\3\2\2\2\u00ac\u0383\3\2\2\2\u00ae\u038c\3")
        buf.write("\2\2\2\u00b0\u038e\3\2\2\2\u00b2\u0390\3\2\2\2\u00b4\u0392")
        buf.write("\3\2\2\2\u00b6\u039c\3\2\2\2\u00b8\u039e\3\2\2\2\u00ba")
        buf.write("\u03a2\3\2\2\2\u00bc\u03a4\3\2\2\2\u00be\u03ac\3\2\2\2")
        buf.write("\u00c0\u03ae\3\2\2\2\u00c2\u03b0\3\2\2\2\u00c4\u03b2\3")
        buf.write("\2\2\2\u00c6\u03b4\3\2\2\2\u00c8\u03c7\3\2\2\2\u00ca\u03cd")
        buf.write("\3\2\2\2\u00cc\u03dc\3\2\2\2\u00ce\u03de\3\2\2\2\u00d0")
        buf.write("\u03e7\3\2\2\2\u00d2\u03f7\3\2\2\2\u00d4\u03f9\3\2\2\2")
        buf.write("\u00d6\u03fb\3\2\2\2\u00d8\u03fd\3\2\2\2\u00da\u0401\3")
        buf.write("\2\2\2\u00dc\u0403\3\2\2\2\u00de\u040b\3\2\2\2\u00e0\u040d")
        buf.write("\3\2\2\2\u00e2\u040f\3\2\2\2\u00e4\u0411\3\2\2\2\u00e6")
        buf.write("\u041d\3\2\2\2\u00e8\u041f\3\2\2\2\u00ea\u0424\3\2\2\2")
        buf.write("\u00ec\u0426\3\2\2\2\u00ee\u0428\3\2\2\2\u00f0\u0432\3")
        buf.write("\2\2\2\u00f2\u0436\3\2\2\2\u00f4\u043f\3\2\2\2\u00f6\u044a")
        buf.write("\3\2\2\2\u00f8\u0461\3\2\2\2\u00fa\u0468\3\2\2\2\u00fc")
        buf.write("\u046a\3\2\2\2\u00fe\u0471\3\2\2\2\u0100\u0473\3\2\2\2")
        buf.write("\u0102\u047c\3\2\2\2\u0104\u0483\3\2\2\2\u0106\u048a\3")
        buf.write("\2\2\2\u0108\u048c\3\2\2\2\u010a\u049e\3\2\2\2\u010c\u04a3")
        buf.write("\3\2\2\2\u010e\u04aa\3\2\2\2\u0110\u04ad\3\2\2\2\u0112")
        buf.write("\u04b5\3\2\2\2\u0114\u04c0\3\2\2\2\u0116\u04c2\3\2\2\2")
        buf.write("\u0118\u04cc\3\2\2\2\u011a\u04ce\3\2\2\2\u011c\u04d7\3")
        buf.write("\2\2\2\u011e\u04e3\3\2\2\2\u0120\u04f2\3\2\2\2\u0122\u04f4")
        buf.write("\3\2\2\2\u0124\u04f9\3\2\2\2\u0126\u0506\3\2\2\2\u0128")
        buf.write("\u0510\3\2\2\2\u012a\u0512\3\2\2\2\u012c\u0514\3\2\2\2")
        buf.write("\u012e\u0516\3\2\2\2\u0130\u051c\3\2\2\2\u0132\u052b\3")
        buf.write("\2\2\2\u0134\u0532\3\2\2\2\u0136\u0539\3\2\2\2\u0138\u0551")
        buf.write("\3\2\2\2\u013a\u055a\3\2\2\2\u013c\u055c\3\2\2\2\u013e")
        buf.write("\u056a\3\2\2\2\u0140\u056c\3\2\2\2\u0142\u056e\3\2\2\2")
        buf.write("\u0144\u0573\3\2\2\2\u0146\u0578\3\2\2\2\u0148\u057e\3")
        buf.write("\2\2\2\u014a\u0588\3\2\2\2\u014c\u058d\3\2\2\2\u014e\u0593")
        buf.write("\3\2\2\2\u0150\u0595\3\2\2\2\u0152\u05a5\3\2\2\2\u0154")
        buf.write("\u05a7\3\2\2\2\u0156\u05af\3\2\2\2\u0158\u05b7\3\2\2\2")
        buf.write("\u015a\u05c0\3\2\2\2\u015c\u05c3\3\2\2\2\u015e\u05c7\3")
        buf.write("\2\2\2\u0160\u05d0\3\2\2\2\u0162\u05dd\3\2\2\2\u0164\u05e8")
        buf.write("\3\2\2\2\u0166\u05ec\3\2\2\2\u0168\u05ee\3\2\2\2\u016a")
        buf.write("\u05f0\3\2\2\2\u016c\u05f4\3\2\2\2\u016e\u05f6\3\2\2\2")
        buf.write("\u0170\u0601\3\2\2\2\u0172\u060b\3\2\2\2\u0174\u060e\3")
        buf.write("\2\2\2\u0176\u0620\3\2\2\2\u0178\u0622\3\2\2\2\u017a\u062a")
        buf.write("\3\2\2\2\u017c\u062d\3\2\2\2\u017e\u062f\3\2\2\2\u0180")
        buf.write("\u0181\5:\36\2\u0181\3\3\2\2\2\u0182\u0183\5`\61\2\u0183")
        buf.write("\5\3\2\2\2\u0184\u0185\5v<\2\u0185\7\3\2\2\2\u0186\u0187")
        buf.write("\5z>\2\u0187\t\3\2\2\2\u0188\u0189\5\u0092J\2\u0189\13")
        buf.write("\3\2\2\2\u018a\u018b\5\u00e8u\2\u018b\r\3\2\2\2\u018c")
        buf.write("\u018d\5\u00f8}\2\u018d\17\3\2\2\2\u018e\u018f\5\u0122")
        buf.write("\u0092\2\u018f\21\3\2\2\2\u0190\u0191\5\u0120\u0091\2")
        buf.write("\u0191\23\3\2\2\2\u0192\u0193\5\u0128\u0095\2\u0193\25")
        buf.write("\3\2\2\2\u0194\u0195\5\u014e\u00a8\2\u0195\27\3\2\2\2")
        buf.write("\u0196\u0197\5\u0168\u00b5\2\u0197\31\3\2\2\2\u0198\u0199")
        buf.write("\5\u0164\u00b3\2\u0199\33\3\2\2\2\u019a\u019b\5\u0176")
        buf.write("\u00bc\2\u019b\35\3\2\2\2\u019c\u019d\7!\2\2\u019d\37")
        buf.write("\3\2\2\2\u019e\u019f\7!\2\2\u019f\u01a0\7\u0086\2\2\u01a0")
        buf.write("\u01a1\7\3\2\2\u01a1!\3\2\2\2\u01a2\u01a3\7!\2\2\u01a3")
        buf.write("\u01a5\7\u0086\2\2\u01a4\u01a6\5\u0146\u00a4\2\u01a5\u01a4")
        buf.write("\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6#\3\2\2\2\u01a7\u01a8")
        buf.write("\7\4\2\2\u01a8\u01ad\5\u00e6t\2\u01a9\u01aa\7\5\2\2\u01aa")
        buf.write("\u01ac\5\u00e6t\2\u01ab\u01a9\3\2\2\2\u01ac\u01af\3\2")
        buf.write("\2\2\u01ad\u01ab\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b0")
        buf.write("\3\2\2\2\u01af\u01ad\3\2\2\2\u01b0\u01b1\7\6\2\2\u01b1")
        buf.write("%\3\2\2\2\u01b2\u01b3\t\2\2\2\u01b3\'\3\2\2\2\u01b4\u01bd")
        buf.write("\7\t\2\2\u01b5\u01ba\5l\67\2\u01b6\u01b7\7\5\2\2\u01b7")
        buf.write("\u01b9\5l\67\2\u01b8\u01b6\3\2\2\2\u01b9\u01bc\3\2\2\2")
        buf.write("\u01ba\u01b8\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01be\3")
        buf.write("\2\2\2\u01bc\u01ba\3\2\2\2\u01bd\u01b5\3\2\2\2\u01bd\u01be")
        buf.write("\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c0\7\n\2\2\u01c0")
        buf.write(")\3\2\2\2\u01c1\u01c2\5\u0136\u009c\2\u01c2+\3\2\2\2\u01c3")
        buf.write("\u01c6\7#\2\2\u01c4\u01c5\7\13\2\2\u01c5\u01c7\5\u0166")
        buf.write("\u00b4\2\u01c6\u01c4\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7")
        buf.write("\u01c8\3\2\2\2\u01c8\u01c9\7k\2\2\u01c9\u01ca\5\u00ea")
        buf.write("v\2\u01ca-\3\2\2\2\u01cb\u01d0\5\64\33\2\u01cc\u01d0\5")
        buf.write("> \2\u01cd\u01d0\5\u00caf\2\u01ce\u01d0\5\u0134\u009b")
        buf.write("\2\u01cf\u01cb\3\2\2\2\u01cf\u01cc\3\2\2\2\u01cf\u01cd")
        buf.write("\3\2\2\2\u01cf\u01ce\3\2\2\2\u01d0/\3\2\2\2\u01d1\u01d3")
        buf.write("\5d\63\2\u01d2\u01d1\3\2\2\2\u01d3\u01d6\3\2\2\2\u01d4")
        buf.write("\u01d2\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d8\3\2\2\2")
        buf.write("\u01d6\u01d4\3\2\2\2\u01d7\u01d9\5\\/\2\u01d8\u01d7\3")
        buf.write("\2\2\2\u01d8\u01d9\3\2\2\2\u01d9\u01db\3\2\2\2\u01da\u01dc")
        buf.write("\5\u00ceh\2\u01db\u01da\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc")
        buf.write("\61\3\2\2\2\u01dd\u01de\7$\2\2\u01de\u01df\5\u0176\u00bc")
        buf.write("\2\u01df\u01e0\7O\2\2\u01e0\u01e4\5\u009eP\2\u01e1\u01e3")
        buf.write("\5\u00fe\u0080\2\u01e2\u01e1\3\2\2\2\u01e3\u01e6\3\2\2")
        buf.write("\2\u01e4\u01e2\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e7")
        buf.write("\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e7\u01e9\7\3\2\2\u01e8")
        buf.write("\u01ea\5\u013e\u00a0\2\u01e9\u01e8\3\2\2\2\u01ea\u01eb")
        buf.write("\3\2\2\2\u01eb\u01e9\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec")
        buf.write("\u01ed\3\2\2\2\u01ed\u01ee\7:\2\2\u01ee\u01ef\7\3\2\2")
        buf.write("\u01ef\63\3\2\2\2\u01f0\u01f1\7\'\2\2\u01f1\u01f2\5H%")
        buf.write("\2\u01f2\u01f4\7k\2\2\u01f3\u01f5\7m\2\2\u01f4\u01f3\3")
        buf.write("\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f7\3\2\2\2\u01f6\u01f8")
        buf.write("\7\u008e\2\2\u01f7\u01f6\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8")
        buf.write("\u01f9\3\2\2\2\u01f9\u01fa\5\u00b6\\\2\u01fa\65\3\2\2")
        buf.write("\2\u01fb\u01ff\5\u009eP\2\u01fc\u01fe\5\u00fe\u0080\2")
        buf.write("\u01fd\u01fc\3\2\2\2\u01fe\u0201\3\2\2\2\u01ff\u01fd\3")
        buf.write("\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0202\3\2\2\2\u0201\u01ff")
        buf.write("\3\2\2\2\u0202\u0203\7\f\2\2\u0203\u0204\5\u0086D\2\u0204")
        buf.write("\u0205\7\3\2\2\u0205\67\3\2\2\2\u0206\u0209\5:\36\2\u0207")
        buf.write("\u0209\5\u0104\u0083\2\u0208\u0206\3\2\2\2\u0208\u0207")
        buf.write("\3\2\2\2\u02099\3\2\2\2\u020a\u020b\7\u009f\2\2\u020b")
        buf.write(";\3\2\2\2\u020c\u020d\7\r\2\2\u020d\u020e\5\2\2\2\u020e")
        buf.write("=\3\2\2\2\u020f\u0211\7+\2\2\u0210\u0212\5H%\2\u0211\u0210")
        buf.write("\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0213\3\2\2\2\u0213")
        buf.write("\u0214\7k\2\2\u0214\u0215\5\u00b6\\\2\u0215?\3\2\2\2\u0216")
        buf.write("\u0218\7.\2\2\u0217\u0219\5\u017e\u00c0\2\u0218\u0217")
        buf.write("\3\2\2\2\u0218\u0219\3\2\2\2\u0219A\3\2\2\2\u021a\u021b")
        buf.write("\7\60\2\2\u021bC\3\2\2\2\u021c\u021d\5\u00e2r\2\u021d")
        buf.write("E\3\2\2\2\u021e\u021f\5\u00e2r\2\u021fG\3\2\2\2\u0220")
        buf.write("\u0221\7\t\2\2\u0221\u0222\5D#\2\u0222\u0223\7\13\2\2")
        buf.write("\u0223\u0224\5F$\2\u0224\u0225\7\n\2\2\u0225I\3\2\2\2")
        buf.write("\u0226\u0227\t\3\2\2\u0227K\3\2\2\2\u0228\u0229\t\4\2")
        buf.write("\2\u0229M\3\2\2\2\u022a\u022b\t\5\2\2\u022bO\3\2\2\2\u022c")
        buf.write("\u0231\5R*\2\u022d\u022e\7\5\2\2\u022e\u0230\5R*\2\u022f")
        buf.write("\u022d\3\2\2\2\u0230\u0233\3\2\2\2\u0231\u022f\3\2\2\2")
        buf.write("\u0231\u0232\3\2\2\2\u0232\u0234\3\2\2\2\u0233\u0231\3")
        buf.write("\2\2\2\u0234\u0235\7\13\2\2\u0235\u0236\5\u013e\u00a0")
        buf.write("\2\u0236Q\3\2\2\2\u0237\u0238\5\u0086D\2\u0238S\3\2\2")
        buf.write("\2\u0239\u023a\7\62\2\2\u023a\u023b\5\u012c\u0097\2\u023b")
        buf.write("\u023f\7k\2\2\u023c\u023e\5P)\2\u023d\u023c\3\2\2\2\u023e")
        buf.write("\u0241\3\2\2\2\u023f\u023d\3\2\2\2\u023f\u0240\3\2\2\2")
        buf.write("\u0240\u0245\3\2\2\2\u0241\u023f\3\2\2\2\u0242\u0243\7")
        buf.write("o\2\2\u0243\u0244\7\13\2\2\u0244\u0246\5\u013e\u00a0\2")
        buf.write("\u0245\u0242\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0247\3")
        buf.write("\2\2\2\u0247\u0248\7;\2\2\u0248\u0249\7\3\2\2\u0249U\3")
        buf.write("\2\2\2\u024a\u024c\7-\2\2\u024b\u024d\5\u013e\u00a0\2")
        buf.write("\u024c\u024b\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u024c\3")
        buf.write("\2\2\2\u024e\u024f\3\2\2\2\u024f\u0250\3\2\2\2\u0250\u0251")
        buf.write("\79\2\2\u0251\u0252\7\3\2\2\u0252W\3\2\2\2\u0253\u0257")
        buf.write("\5.\30\2\u0254\u0257\5\u013a\u009e\2\u0255\u0257\5\32")
        buf.write("\16\2\u0256\u0253\3\2\2\2\u0256\u0254\3\2\2\2\u0256\u0255")
        buf.write("\3\2\2\2\u0257Y\3\2\2\2\u0258\u0259\5`\61\2\u0259\u025a")
        buf.write("\7\13\2\2\u025a\u025b\5\u00b6\\\2\u025b\u025c\7\f\2\2")
        buf.write("\u025c\u025d\5\u0086D\2\u025d\u025e\7\3\2\2\u025e[\3\2")
        buf.write("\2\2\u025f\u0261\7\63\2\2\u0260\u0262\5Z.\2\u0261\u0260")
        buf.write("\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0261\3\2\2\2\u0263")
        buf.write("\u0264\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0266\7<\2\2")
        buf.write("\u0266\u0267\7\3\2\2\u0267]\3\2\2\2\u0268\u026b\5J&\2")
        buf.write("\u0269\u026b\5\4\3\2\u026a\u0268\3\2\2\2\u026a\u0269\3")
        buf.write("\2\2\2\u026b_\3\2\2\2\u026c\u026d\7\u009f\2\2\u026da\3")
        buf.write("\2\2\2\u026e\u0271\5\u0080A\2\u026f\u0271\5\u0132\u009a")
        buf.write("\2\u0270\u026e\3\2\2\2\u0270\u026f\3\2\2\2\u0271c\3\2")
        buf.write("\2\2\u0272\u0278\5r:\2\u0273\u0278\5\u008eH\2\u0274\u0278")
        buf.write("\5\u00f4{\2\u0275\u0278\5\u014a\u00a6\2\u0276\u0278\5")
        buf.write("\u0162\u00b2\2\u0277\u0272\3\2\2\2\u0277\u0273\3\2\2\2")
        buf.write("\u0277\u0274\3\2\2\2\u0277\u0275\3\2\2\2\u0277\u0276\3")
        buf.write("\2\2\2\u0278e\3\2\2\2\u0279\u027a\58\35\2\u027a\u027b")
        buf.write("\7\13\2\2\u027b\u027c\5\u00eav\2\u027c\u027d\7\f\2\2\u027d")
        buf.write("\u027e\5\u0086D\2\u027e\u027f\7\3\2\2\u027fg\3\2\2\2\u0280")
        buf.write("\u0282\7\66\2\2\u0281\u0283\5f\64\2\u0282\u0281\3\2\2")
        buf.write("\2\u0283\u0284\3\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285")
        buf.write("\3\2\2\2\u0285i\3\2\2\2\u0286\u0287\5\u0122\u0092\2\u0287")
        buf.write("\u0288\7\13\2\2\u0288\u028a\3\2\2\2\u0289\u0286\3\2\2")
        buf.write("\2\u0289\u028a\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028c")
        buf.write("\5\u0086D\2\u028ck\3\2\2\2\u028d\u0290\5\u0086D\2\u028e")
        buf.write("\u028f\7\13\2\2\u028f\u0291\5\u0114\u008b\2\u0290\u028e")
        buf.write("\3\2\2\2\u0290\u0291\3\2\2\2\u0291m\3\2\2\2\u0292\u0294")
        buf.write("\5\u0084C\2\u0293\u0292\3\2\2\2\u0294\u0297\3\2\2\2\u0295")
        buf.write("\u0293\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0299\3\2\2\2")
        buf.write("\u0297\u0295\3\2\2\2\u0298\u029a\5h\65\2\u0299\u0298\3")
        buf.write("\2\2\2\u0299\u029a\3\2\2\2\u029a\u029c\3\2\2\2\u029b\u029d")
        buf.write("\5\u00c8e\2\u029c\u029b\3\2\2\2\u029c\u029d\3\2\2\2\u029d")
        buf.write("\u029f\3\2\2\2\u029e\u02a0\5\u016e\u00b8\2\u029f\u029e")
        buf.write("\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a2\3\2\2\2\u02a1")
        buf.write("\u02a3\5\u0178\u00bd\2\u02a2\u02a1\3\2\2\2\u02a2\u02a3")
        buf.write("\3\2\2\2\u02a3o\3\2\2\2\u02a4\u02a5\5\6\4\2\u02a5\u02ae")
        buf.write("\7\4\2\2\u02a6\u02ab\5\u0086D\2\u02a7\u02a8\7\5\2\2\u02a8")
        buf.write("\u02aa\5\u0086D\2\u02a9\u02a7\3\2\2\2\u02aa\u02ad\3\2")
        buf.write("\2\2\u02ab\u02a9\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02af")
        buf.write("\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ae\u02a6\3\2\2\2\u02ae")
        buf.write("\u02af\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1\7\6\2\2")
        buf.write("\u02b1q\3\2\2\2\u02b2\u02b3\5t;\2\u02b3\u02b4\5n8\2\u02b4")
        buf.write("\u02b5\7=\2\2\u02b5\u02b6\7\3\2\2\u02b6s\3\2\2\2\u02b7")
        buf.write("\u02b8\7G\2\2\u02b8\u02b9\5v<\2\u02b9\u02ba\5\u0144\u00a3")
        buf.write("\2\u02ba\u02bb\7\3\2\2\u02bbu\3\2\2\2\u02bc\u02bd\7\u009f")
        buf.write("\2\2\u02bdw\3\2\2\2\u02be\u02bf\7,\2\2\u02bf\u02c2\5\32")
        buf.write("\16\2\u02c0\u02c1\7\u0099\2\2\u02c1\u02c3\5|?\2\u02c2")
        buf.write("\u02c0\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3y\3\2\2\2\u02c4")
        buf.write("\u02c5\7\u009f\2\2\u02c5{\3\2\2\2\u02c6\u02c7\7\4\2\2")
        buf.write("\u02c7\u02cc\5z>\2\u02c8\u02c9\7\5\2\2\u02c9\u02cb\5z")
        buf.write(">\2\u02ca\u02c8\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca")
        buf.write("\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02cf\3\2\2\2\u02ce")
        buf.write("\u02cc\3\2\2\2\u02cf\u02d0\7\6\2\2\u02d0}\3\2\2\2\u02d1")
        buf.write("\u02d2\5\32\16\2\u02d2\u02d3\7\r\2\2\u02d3\u02d5\3\2\2")
        buf.write("\2\u02d4\u02d1\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d6")
        buf.write("\3\2\2\2\u02d6\u02d7\5\b\5\2\u02d7\177\3\2\2\2\u02d8\u02da")
        buf.write("\7K\2\2\u02d9\u02d8\3\2\2\2\u02d9\u02da\3\2\2\2\u02da")
        buf.write("\u02db\3\2\2\2\u02db\u02df\7H\2\2\u02dc\u02dd\7k\2\2\u02dd")
        buf.write("\u02e0\5|?\2\u02de\u02e0\5x=\2\u02df\u02dc\3\2\2\2\u02df")
        buf.write("\u02de\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u0081\3\2\2\2")
        buf.write("\u02e1\u02e2\7I\2\2\u02e2\u02e3\7\3\2\2\u02e3\u0083\3")
        buf.write("\2\2\2\u02e4\u02e7\58\35\2\u02e5\u02e6\7\5\2\2\u02e6\u02e8")
        buf.write("\58\35\2\u02e7\u02e5\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8")
        buf.write("\u02e9\3\2\2\2\u02e9\u02eb\7\13\2\2\u02ea\u02ec\7m\2\2")
        buf.write("\u02eb\u02ea\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ed\3")
        buf.write("\2\2\2\u02ed\u02ee\5\u00eav\2\u02ee\u02ef\7\3\2\2\u02ef")
        buf.write("\u0085\3\2\2\2\u02f0\u02f4\5\u0136\u009c\2\u02f1\u02f2")
        buf.write("\5\u010c\u0087\2\u02f2\u02f3\5\u0136\u009c\2\u02f3\u02f5")
        buf.write("\3\2\2\2\u02f4\u02f1\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5")
        buf.write("\u0087\3\2\2\2\u02f6\u02f9\5\u0138\u009d\2\u02f7\u02f8")
        buf.write("\7\17\2\2\u02f8\u02fa\5\u0138\u009d\2\u02f9\u02f7\3\2")
        buf.write("\2\2\u02f9\u02fa\3\2\2\2\u02fa\u0089\3\2\2\2\u02fb\u0300")
        buf.write("\5\u00e8u\2\u02fc\u02fd\7\5\2\2\u02fd\u02ff\5\u00e8u\2")
        buf.write("\u02fe\u02fc\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u02fe\3")
        buf.write("\2\2\2\u0300\u0301\3\2\2\2\u0301\u0303\3\2\2\2\u0302\u0300")
        buf.write("\3\2\2\2\u0303\u0304\7\13\2\2\u0304\u0305\5\u00eav\2\u0305")
        buf.write("\u008b\3\2\2\2\u0306\u0309\5L\'\2\u0307\u0309\5\n\6\2")
        buf.write("\u0308\u0306\3\2\2\2\u0308\u0307\3\2\2\2\u0309\u030b\3")
        buf.write("\2\2\2\u030a\u030c\5$\23\2\u030b\u030a\3\2\2\2\u030b\u030c")
        buf.write("\3\2\2\2\u030c\u008d\3\2\2\2\u030d\u030e\5\u0090I\2\u030e")
        buf.write("\u0310\5\60\31\2\u030f\u0311\5\u013e\u00a0\2\u0310\u030f")
        buf.write("\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0310\3\2\2\2\u0312")
        buf.write("\u0313\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0315\7>\2\2")
        buf.write("\u0315\u0316\7\3\2\2\u0316\u008f\3\2\2\2\u0317\u0318\7")
        buf.write("R\2\2\u0318\u0324\5\u0092J\2\u0319\u031a\7\4\2\2\u031a")
        buf.write("\u031f\5\u008aF\2\u031b\u031c\7\3\2\2\u031c\u031e\5\u008a")
        buf.write("F\2\u031d\u031b\3\2\2\2\u031e\u0321\3\2\2\2\u031f\u031d")
        buf.write("\3\2\2\2\u031f\u0320\3\2\2\2\u0320\u0322\3\2\2\2\u0321")
        buf.write("\u031f\3\2\2\2\u0322\u0323\7\6\2\2\u0323\u0325\3\2\2\2")
        buf.write("\u0324\u0319\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0326\3")
        buf.write("\2\2\2\u0326\u0327\7\13\2\2\u0327\u0328\5\u00eav\2\u0328")
        buf.write("\u0329\7\3\2\2\u0329\u0091\3\2\2\2\u032a\u032b\7\u009f")
        buf.write("\2\2\u032b\u0093\3\2\2\2\u032c\u0331\5,\27\2\u032d\u0331")
        buf.write("\5\u0096L\2\u032e\u0331\5\u00a2R\2\u032f\u0331\5\u00a4")
        buf.write("S\2\u0330\u032c\3\2\2\2\u0330\u032d\3\2\2\2\u0330\u032e")
        buf.write("\3\2\2\2\u0330\u032f\3\2\2\2\u0331\u0095\3\2\2\2\u0332")
        buf.write("\u0337\5\u0098M\2\u0333\u0337\5\u009aN\2\u0334\u0337\5")
        buf.write("\u009cO\2\u0335\u0337\5\u00a0Q\2\u0336\u0332\3\2\2\2\u0336")
        buf.write("\u0333\3\2\2\2\u0336\u0334\3\2\2\2\u0336\u0335\3\2\2\2")
        buf.write("\u0337\u0097\3\2\2\2\u0338\u033a\7\'\2\2\u0339\u033b\5")
        buf.write("H%\2\u033a\u0339\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033c")
        buf.write("\3\2\2\2\u033c\u033e\7k\2\2\u033d\u033f\7m\2\2\u033e\u033d")
        buf.write("\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0341\3\2\2\2\u0340")
        buf.write("\u0342\7\u008e\2\2\u0341\u0340\3\2\2\2\u0341\u0342\3\2")
        buf.write("\2\2\u0342\u0343\3\2\2\2\u0343\u0344\5\u00eav\2\u0344")
        buf.write("\u0099\3\2\2\2\u0345\u0347\7+\2\2\u0346\u0348\5H%\2\u0347")
        buf.write("\u0346\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0349\3\2\2\2")
        buf.write("\u0349\u034a\7k\2\2\u034a\u034b\5\u00eav\2\u034b\u009b")
        buf.write("\3\2\2\2\u034c\u034e\7^\2\2\u034d\u034f\5H%\2\u034e\u034d")
        buf.write("\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0350\3\2\2\2\u0350")
        buf.write("\u0352\7k\2\2\u0351\u0353\7\u008e\2\2\u0352\u0351\3\2")
        buf.write("\2\2\u0352\u0353\3\2\2\2\u0353\u0354\3\2\2\2\u0354\u0355")
        buf.write("\5\u00eav\2\u0355\u009d\3\2\2\2\u0356\u0359\5\f\7\2\u0357")
        buf.write("\u0359\5\34\17\2\u0358\u0356\3\2\2\2\u0358\u0357\3\2\2")
        buf.write("\2\u0359\u009f\3\2\2\2\u035a\u035c\7~\2\2\u035b\u035d")
        buf.write("\5H%\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u035e")
        buf.write("\3\2\2\2\u035e\u035f\7k\2\2\u035f\u0360\5\u00eav\2\u0360")
        buf.write("\u00a1\3\2\2\2\u0361\u0364\7T\2\2\u0362\u0363\7\13\2\2")
        buf.write("\u0363\u0365\5\u0166\u00b4\2\u0364\u0362\3\2\2\2\u0364")
        buf.write("\u0365\3\2\2\2\u0365\u00a3\3\2\2\2\u0366\u0369\7S\2\2")
        buf.write("\u0367\u0368\7\13\2\2\u0368\u036a\5\u0166\u00b4\2\u0369")
        buf.write("\u0367\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u00a5\3\2\2\2")
        buf.write("\u036b\u036c\7\20\2\2\u036c\u036d\5\6\4\2\u036d\u00a7")
        buf.write("\3\2\2\2\u036e\u036f\7W\2\2\u036f\u0370\5\u00d2j\2\u0370")
        buf.write("\u0372\7\u0088\2\2\u0371\u0373\5\u013e\u00a0\2\u0372\u0371")
        buf.write("\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0372\3\2\2\2\u0374")
        buf.write("\u0375\3\2\2\2\u0375\u037c\3\2\2\2\u0376\u0378\78\2\2")
        buf.write("\u0377\u0379\5\u013e\u00a0\2\u0378\u0377\3\2\2\2\u0379")
        buf.write("\u037a\3\2\2\2\u037a\u0378\3\2\2\2\u037a\u037b\3\2\2\2")
        buf.write("\u037b\u037d\3\2\2\2\u037c\u0376\3\2\2\2\u037c\u037d\3")
        buf.write("\2\2\2\u037d\u037e\3\2\2\2\u037e\u037f\7?\2\2\u037f\u0380")
        buf.write("\7\3\2\2\u0380\u00a9\3\2\2\2\u0381\u0382\5\u00e2r\2\u0382")
        buf.write("\u00ab\3\2\2\2\u0383\u0384\5\u0176\u00bc\2\u0384\u0385")
        buf.write("\7\f\2\2\u0385\u0386\5D#\2\u0386\u0387\7\u0089\2\2\u0387")
        buf.write("\u038a\5F$\2\u0388\u0389\7\61\2\2\u0389\u038b\5\u00aa")
        buf.write("V\2\u038a\u0388\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u00ad")
        buf.write("\3\2\2\2\u038c\u038d\5\u00e2r\2\u038d\u00af\3\2\2\2\u038e")
        buf.write("\u038f\5\u00aeX\2\u038f\u00b1\3\2\2\2\u0390\u0391\5\u00ae")
        buf.write("X\2\u0391\u00b3\3\2\2\2\u0392\u0393\7\t\2\2\u0393\u0396")
        buf.write("\5\u00b0Y\2\u0394\u0395\7\13\2\2\u0395\u0397\5\u00b2Z")
        buf.write("\2\u0396\u0394\3\2\2\2\u0396\u0397\3\2\2\2\u0397\u0398")
        buf.write("\3\2\2\2\u0398\u0399\7\n\2\2\u0399\u00b5\3\2\2\2\u039a")
        buf.write("\u039d\5X-\2\u039b\u039d\5\6\4\2\u039c\u039a\3\2\2\2\u039c")
        buf.write("\u039b\3\2\2\2\u039d\u00b7\3\2\2\2\u039e\u039f\7Z\2\2")
        buf.write("\u039f\u00b9\3\2\2\2\u03a0\u03a3\5\u0108\u0085\2\u03a1")
        buf.write("\u03a3\5\u0174\u00bb\2\u03a2\u03a0\3\2\2\2\u03a2\u03a1")
        buf.write("\3\2\2\2\u03a3\u00bb\3\2\2\2\u03a4\u03a5\7\21\2\2\u03a5")
        buf.write("\u03a6\5\u00c2b\2\u03a6\u03a7\5\u00c4c\2\u03a7\u03a8\5")
        buf.write("\u00c0a\2\u03a8\u03a9\5\u00c4c\2\u03a9\u03aa\5\u00be`")
        buf.write("\2\u03aa\u03ab\7\22\2\2\u03ab\u00bd\3\2\2\2\u03ac\u03ad")
        buf.write("\5\u0136\u009c\2\u03ad\u00bf\3\2\2\2\u03ae\u03af\5\u0136")
        buf.write("\u009c\2\u03af\u00c1\3\2\2\2\u03b0\u03b1\5\u0136\u009c")
        buf.write("\2\u03b1\u00c3\3\2\2\2\u03b2\u03b3\t\6\2\2\u03b3\u00c5")
        buf.write("\3\2\2\2\u03b4\u03b5\58\35\2\u03b5\u03bb\7\13\2\2\u03b6")
        buf.write("\u03b8\t\7\2\2\u03b7\u03b9\5H%\2\u03b8\u03b7\3\2\2\2\u03b8")
        buf.write("\u03b9\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba\u03bc\7k\2\2")
        buf.write("\u03bb\u03b6\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd\3")
        buf.write("\2\2\2\u03bd\u03be\5\6\4\2\u03be\u03c2\7O\2\2\u03bf\u03c0")
        buf.write("\5\6\4\2\u03c0\u03c1\7\r\2\2\u03c1\u03c3\3\2\2\2\u03c2")
        buf.write("\u03bf\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c4\3\2\2\2")
        buf.write("\u03c4\u03c5\5\2\2\2\u03c5\u03c6\7\3\2\2\u03c6\u00c7\3")
        buf.write("\2\2\2\u03c7\u03c9\7[\2\2\u03c8\u03ca\5\u00c6d\2\u03c9")
        buf.write("\u03c8\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03c9\3\2\2\2")
        buf.write("\u03cb\u03cc\3\2\2\2\u03cc\u00c9\3\2\2\2\u03cd\u03cf\7")
        buf.write("^\2\2\u03ce\u03d0\5H%\2\u03cf\u03ce\3\2\2\2\u03cf\u03d0")
        buf.write("\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d3\7k\2\2\u03d2")
        buf.write("\u03d4\7\u008e\2\2\u03d3\u03d2\3\2\2\2\u03d3\u03d4\3\2")
        buf.write("\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03d6\5\u00b6\\\2\u03d6")
        buf.write("\u00cb\3\2\2\2\u03d7\u03dd\7\u009b\2\2\u03d8\u03dd\5\u00d4")
        buf.write("k\2\u03d9\u03dd\7\u009e\2\2\u03da\u03dd\7\u009d\2\2\u03db")
        buf.write("\u03dd\5\u0140\u00a1\2\u03dc\u03d7\3\2\2\2\u03dc\u03d8")
        buf.write("\3\2\2\2\u03dc\u03d9\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc")
        buf.write("\u03db\3\2\2\2\u03dd\u00cd\3\2\2\2\u03de\u03e0\7`\2\2")
        buf.write("\u03df\u03e1\5\u00d0i\2\u03e0\u03df\3\2\2\2\u03e1\u03e2")
        buf.write("\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3")
        buf.write("\u03e4\3\2\2\2\u03e4\u03e5\7@\2\2\u03e5\u03e6\7\3\2\2")
        buf.write("\u03e6\u00cf\3\2\2\2\u03e7\u03ec\5\u0176\u00bc\2\u03e8")
        buf.write("\u03e9\7\5\2\2\u03e9\u03eb\5\u0176\u00bc\2\u03ea\u03e8")
        buf.write("\3\2\2\2\u03eb\u03ee\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ec")
        buf.write("\u03ed\3\2\2\2\u03ed\u03ef\3\2\2\2\u03ee\u03ec\3\2\2\2")
        buf.write("\u03ef\u03f0\7\13\2\2\u03f0\u03f3\5\u00eav\2\u03f1\u03f2")
        buf.write("\7\f\2\2\u03f2\u03f4\5\u0086D\2\u03f3\u03f1\3\2\2\2\u03f3")
        buf.write("\u03f4\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6\7\3\2\2")
        buf.write("\u03f6\u00d1\3\2\2\2\u03f7\u03f8\5\u0086D\2\u03f8\u00d3")
        buf.write("\3\2\2\2\u03f9\u03fa\t\b\2\2\u03fa\u00d5\3\2\2\2\u03fb")
        buf.write("\u03fc\7d\2\2\u03fc\u00d7\3\2\2\2\u03fd\u03fe\t\t\2\2")
        buf.write("\u03fe\u00d9\3\2\2\2\u03ff\u0402\5\6\4\2\u0400\u0402\5")
        buf.write("\32\16\2\u0401\u03ff\3\2\2\2\u0401\u0400\3\2\2\2\u0402")
        buf.write("\u00db\3\2\2\2\u0403\u0409\5\u00dan\2\u0404\u0407\7(\2")
        buf.write("\2\u0405\u0408\5v<\2\u0406\u0408\5\u0164\u00b3\2\u0407")
        buf.write("\u0405\3\2\2\2\u0407\u0406\3\2\2\2\u0408\u040a\3\2\2\2")
        buf.write("\u0409\u0404\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u00dd\3")
        buf.write("\2\2\2\u040b\u040c\7\3\2\2\u040c\u00df\3\2\2\2\u040d\u040e")
        buf.write("\7h\2\2\u040e\u00e1\3\2\2\2\u040f\u0410\5\u0136\u009c")
        buf.write("\2\u0410\u00e3\3\2\2\2\u0411\u0412\7l\2\2\u0412\u0413")
        buf.write("\7\4\2\2\u0413\u0418\5\u0154\u00ab\2\u0414\u0415\7\5\2")
        buf.write("\2\u0415\u0417\5\u0154\u00ab\2\u0416\u0414\3\2\2\2\u0417")
        buf.write("\u041a\3\2\2\2\u0418\u0416\3\2\2\2\u0418\u0419\3\2\2\2")
        buf.write("\u0419\u041b\3\2\2\2\u041a\u0418\3\2\2\2\u041b\u041c\7")
        buf.write("\6\2\2\u041c\u00e5\3\2\2\2\u041d\u041e\5\u0086D\2\u041e")
        buf.write("\u00e7\3\2\2\2\u041f\u0420\7\u009f\2\2\u0420\u00e9\3\2")
        buf.write("\2\2\u0421\u0425\5\u0094K\2\u0422\u0425\5\u00dan\2\u0423")
        buf.write("\u0425\5\u013a\u009e\2\u0424\u0421\3\2\2\2\u0424\u0422")
        buf.write("\3\2\2\2\u0424\u0423\3\2\2\2\u0425\u00eb\3\2\2\2\u0426")
        buf.write("\u0427\5\6\4\2\u0427\u00ed\3\2\2\2\u0428\u0429\5\u00e2")
        buf.write("r\2\u0429\u00ef\3\2\2\2\u042a\u0433\5\u00ccg\2\u042b\u042f")
        buf.write("\5\u00fa~\2\u042c\u042e\5\u00fe\u0080\2\u042d\u042c\3")
        buf.write("\2\2\2\u042e\u0431\3\2\2\2\u042f\u042d\3\2\2\2\u042f\u0430")
        buf.write("\3\2\2\2\u0430\u0433\3\2\2\2\u0431\u042f\3\2\2\2\u0432")
        buf.write("\u042a\3\2\2\2\u0432\u042b\3\2\2\2\u0433\u00f1\3\2\2\2")
        buf.write("\u0434\u0437\5N(\2\u0435\u0437\5\16\b\2\u0436\u0434\3")
        buf.write("\2\2\2\u0436\u0435\3\2\2\2\u0437\u0439\3\2\2\2\u0438\u043a")
        buf.write("\5$\23\2\u0439\u0438\3\2\2\2\u043a\u043b\3\2\2\2\u043b")
        buf.write("\u0439\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043d\3\2\2\2")
        buf.write("\u043d\u043e\7\3\2\2\u043e\u00f3\3\2\2\2\u043f\u0440\5")
        buf.write("\u00f6|\2\u0440\u0444\5\60\31\2\u0441\u0443\5\u013e\u00a0")
        buf.write("\2\u0442\u0441\3\2\2\2\u0443\u0446\3\2\2\2\u0444\u0442")
        buf.write("\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0447\3\2\2\2\u0446")
        buf.write("\u0444\3\2\2\2\u0447\u0448\7A\2\2\u0448\u0449\7\3\2\2")
        buf.write("\u0449\u00f5\3\2\2\2\u044a\u044b\7q\2\2\u044b\u045d\5")
        buf.write("\u00f8}\2\u044c\u044e\7\4\2\2\u044d\u044f\7\u0096\2\2")
        buf.write("\u044e\u044d\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0450\3")
        buf.write("\2\2\2\u0450\u0458\5\u008aF\2\u0451\u0453\7\3\2\2\u0452")
        buf.write("\u0454\7\u0096\2\2\u0453\u0452\3\2\2\2\u0453\u0454\3\2")
        buf.write("\2\2\u0454\u0455\3\2\2\2\u0455\u0457\5\u008aF\2\u0456")
        buf.write("\u0451\3\2\2\2\u0457\u045a\3\2\2\2\u0458\u0456\3\2\2\2")
        buf.write("\u0458\u0459\3\2\2\2\u0459\u045b\3\2\2\2\u045a\u0458\3")
        buf.write("\2\2\2\u045b\u045c\7\6\2\2\u045c\u045e\3\2\2\2\u045d\u044c")
        buf.write("\3\2\2\2\u045d\u045e\3\2\2\2\u045e\u045f\3\2\2\2\u045f")
        buf.write("\u0460\7\3\2\2\u0460\u00f7\3\2\2\2\u0461\u0462\7\u009f")
        buf.write("\2\2\u0462\u00f9\3\2\2\2\u0463\u0469\5\2\2\2\u0464\u0469")
        buf.write("\5^\60\2\u0465\u0469\5\u008cG\2\u0466\u0469\5\u009eP\2")
        buf.write("\u0467\u0469\5\u00ecw\2\u0468\u0463\3\2\2\2\u0468\u0464")
        buf.write("\3\2\2\2\u0468\u0465\3\2\2\2\u0468\u0466\3\2\2\2\u0468")
        buf.write("\u0467\3\2\2\2\u0469\u00fb\3\2\2\2\u046a\u046b\7}\2\2")
        buf.write("\u046b\u046c\5\u00a6T\2\u046c\u046d\5<\37\2\u046d\u00fd")
        buf.write("\3\2\2\2\u046e\u0472\5<\37\2\u046f\u0472\5\u00a6T\2\u0470")
        buf.write("\u0472\5\u00b4[\2\u0471\u046e\3\2\2\2\u0471\u046f\3\2")
        buf.write("\2\2\u0471\u0470\3\2\2\2\u0472\u00ff\3\2\2\2\u0473\u0474")
        buf.write("\7r\2\2\u0474\u0475\7\4\2\2\u0475\u0476\5\u0176\u00bc")
        buf.write("\2\u0476\u0477\7\30\2\2\u0477\u0478\5*\26\2\u0478\u0479")
        buf.write("\7\31\2\2\u0479\u047a\5\u00d2j\2\u047a\u047b\7\6\2\2\u047b")
        buf.write("\u0101\3\2\2\2\u047c\u0481\7s\2\2\u047d\u047e\7\4\2\2")
        buf.write("\u047e\u047f\5\u00eex\2\u047f\u0480\7\6\2\2\u0480\u0482")
        buf.write("\3\2\2\2\u0481\u047d\3\2\2\2\u0481\u0482\3\2\2\2\u0482")
        buf.write("\u0103\3\2\2\2\u0483\u0486\5\u00fc\177\2\u0484\u0485\7")
        buf.write("v\2\2\u0485\u0487\5:\36\2\u0486\u0484\3\2\2\2\u0486\u0487")
        buf.write("\3\2\2\2\u0487\u0105\3\2\2\2\u0488\u048b\5\2\2\2\u0489")
        buf.write("\u048b\5\u00fc\177\2\u048a\u0488\3\2\2\2\u048a\u0489\3")
        buf.write("\2\2\2\u048b\u0107\3\2\2\2\u048c\u048d\7t\2\2\u048d\u048e")
        buf.write("\7Q\2\2\u048e\u049a\5\24\13\2\u048f\u0490\7\4\2\2\u0490")
        buf.write("\u0495\5\u0116\u008c\2\u0491\u0492\7\5\2\2\u0492\u0494")
        buf.write("\5\u0116\u008c\2\u0493\u0491\3\2\2\2\u0494\u0497\3\2\2")
        buf.write("\2\u0495\u0493\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u0498")
        buf.write("\3\2\2\2\u0497\u0495\3\2\2\2\u0498\u0499\7\6\2\2\u0499")
        buf.write("\u049b\3\2\2\2\u049a\u048f\3\2\2\2\u049a\u049b\3\2\2\2")
        buf.write("\u049b\u049c\3\2\2\2\u049c\u049d\7\3\2\2\u049d\u0109\3")
        buf.write("\2\2\2\u049e\u049f\t\n\2\2\u049f\u010b\3\2\2\2\u04a0\u04a4")
        buf.write("\5\u010a\u0086\2\u04a1\u04a4\7X\2\2\u04a2\u04a4\7]\2\2")
        buf.write("\u04a3\u04a0\3\2\2\2\u04a3\u04a1\3\2\2\2\u04a3\u04a2\3")
        buf.write("\2\2\2\u04a4\u010d\3\2\2\2\u04a5\u04ab\5`\61\2\u04a6\u04ab")
        buf.write("\5v<\2\u04a7\u04ab\5\u0092J\2\u04a8\u04ab\5\u00f8}\2\u04a9")
        buf.write("\u04ab\5\u0164\u00b3\2\u04aa\u04a5\3\2\2\2\u04aa\u04a6")
        buf.write("\3\2\2\2\u04aa\u04a7\3\2\2\2\u04aa\u04a8\3\2\2\2\u04aa")
        buf.write("\u04a9\3\2\2\2\u04ab\u010f\3\2\2\2\u04ac\u04ae\5\u00ac")
        buf.write("W\2\u04ad\u04ac\3\2\2\2\u04ad\u04ae\3\2\2\2\u04ae\u04b0")
        buf.write("\3\2\2\2\u04af\u04b1\5\u017a\u00be\2\u04b0\u04af\3\2\2")
        buf.write("\2\u04b0\u04b1\3\2\2\2\u04b1\u04b3\3\2\2\2\u04b2\u04b4")
        buf.write("\5\u0172\u00ba\2\u04b3\u04b2\3\2\2\2\u04b3\u04b4\3\2\2")
        buf.write("\2\u04b4\u0111\3\2\2\2\u04b5\u04b6\7w\2\2\u04b6\u04b7")
        buf.write("\5\u0110\u0089\2\u04b7\u04b9\7\3\2\2\u04b8\u04ba\5\u013e")
        buf.write("\u00a0\2\u04b9\u04b8\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb")
        buf.write("\u04b9\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04bd\3\2\2\2")
        buf.write("\u04bd\u04be\7B\2\2\u04be\u04bf\7\3\2\2\u04bf\u0113\3")
        buf.write("\2\2\2\u04c0\u04c1\5\u00e2r\2\u04c1\u0115\3\2\2\2\u04c2")
        buf.write("\u04c5\5\u0118\u008d\2\u04c3\u04c4\7(\2\2\u04c4\u04c6")
        buf.write("\5\u010e\u0088\2\u04c5\u04c3\3\2\2\2\u04c5\u04c6\3\2\2")
        buf.write("\2\u04c6\u0117\3\2\2\2\u04c7\u04cd\5\4\3\2\u04c8\u04cd")
        buf.write("\5\6\4\2\u04c9\u04cd\5\n\6\2\u04ca\u04cd\5\16\b\2\u04cb")
        buf.write("\u04cd\5\32\16\2\u04cc\u04c7\3\2\2\2\u04cc\u04c8\3\2\2")
        buf.write("\2\u04cc\u04c9\3\2\2\2\u04cc\u04ca\3\2\2\2\u04cc\u04cb")
        buf.write("\3\2\2\2\u04cd\u0119\3\2\2\2\u04ce\u04d3\7x\2\2\u04cf")
        buf.write("\u04d0\7\4\2\2\u04d0\u04d1\5\u0086D\2\u04d1\u04d2\7\6")
        buf.write("\2\2\u04d2\u04d4\3\2\2\2\u04d3\u04cf\3\2\2\2\u04d3\u04d4")
        buf.write("\3\2\2\2\u04d4\u04d5\3\2\2\2\u04d5\u04d6\7\3\2\2\u04d6")
        buf.write("\u011b\3\2\2\2\u04d7\u04d8\5\u011e\u0090\2\u04d8\u04dc")
        buf.write("\5\60\31\2\u04d9\u04db\5\u013e\u00a0\2\u04da\u04d9\3\2")
        buf.write("\2\2\u04db\u04de\3\2\2\2\u04dc\u04da\3\2\2\2\u04dc\u04dd")
        buf.write("\3\2\2\2\u04dd\u04df\3\2\2\2\u04de\u04dc\3\2\2\2\u04df")
        buf.write("\u04e0\5\u0178\u00bd\2\u04e0\u04e1\7C\2\2\u04e1\u04e2")
        buf.write("\7\3\2\2\u04e2\u011d\3\2\2\2\u04e3\u04e4\7z\2\2\u04e4")
        buf.write("\u04e5\5\u0120\u0091\2\u04e5\u04e6\7O\2\2\u04e6\u04e7")
        buf.write("\7\4\2\2\u04e7\u04ec\5\6\4\2\u04e8\u04e9\7\5\2\2\u04e9")
        buf.write("\u04eb\5\6\4\2\u04ea\u04e8\3\2\2\2\u04eb\u04ee\3\2\2\2")
        buf.write("\u04ec\u04ea\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ef\3")
        buf.write("\2\2\2\u04ee\u04ec\3\2\2\2\u04ef\u04f0\7\6\2\2\u04f0\u04f1")
        buf.write("\7\3\2\2\u04f1\u011f\3\2\2\2\u04f2\u04f3\7\u009f\2\2\u04f3")
        buf.write("\u0121\3\2\2\2\u04f4\u04f5\7\u009f\2\2\u04f5\u0123\3\2")
        buf.write("\2\2\u04f6\u04f8\5\u00ba^\2\u04f7\u04f6\3\2\2\2\u04f8")
        buf.write("\u04fb\3\2\2\2\u04f9\u04f7\3\2\2\2\u04f9\u04fa\3\2\2\2")
        buf.write("\u04fa\u04fd\3\2\2\2\u04fb\u04f9\3\2\2\2\u04fc\u04fe\5")
        buf.write("\\/\2\u04fd\u04fc\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0503")
        buf.write("\3\2\2\2\u04ff\u0502\5d\63\2\u0500\u0502\5\u011c\u008f")
        buf.write("\2\u0501\u04ff\3\2\2\2\u0501\u0500\3\2\2\2\u0502\u0505")
        buf.write("\3\2\2\2\u0503\u0501\3\2\2\2\u0503\u0504\3\2\2\2\u0504")
        buf.write("\u0125\3\2\2\2\u0505\u0503\3\2\2\2\u0506\u0507\7{\2\2")
        buf.write("\u0507\u0509\5\u0128\u0095\2\u0508\u050a\5\u012a\u0096")
        buf.write("\2\u0509\u0508\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050b")
        buf.write("\3\2\2\2\u050b\u050c\7\3\2\2\u050c\u050d\5\u0124\u0093")
        buf.write("\2\u050d\u050e\7D\2\2\u050e\u050f\7\3\2\2\u050f\u0127")
        buf.write("\3\2\2\2\u0510\u0511\7\u009f\2\2\u0511\u0129\3\2\2\2\u0512")
        buf.write("\u0513\5\u0140\u00a1\2\u0513\u012b\3\2\2\2\u0514\u0515")
        buf.write("\5\u0086D\2\u0515\u012d\3\2\2\2\u0516\u0517\7,\2\2\u0517")
        buf.write("\u051a\5\32\16\2\u0518\u0519\7\u0099\2\2\u0519\u051b\5")
        buf.write("\u0130\u0099\2\u051a\u0518\3\2\2\2\u051a\u051b\3\2\2\2")
        buf.write("\u051b\u012f\3\2\2\2\u051c\u051d\7\4\2\2\u051d\u0522\5")
        buf.write("\u00dan\2\u051e\u051f\7\5\2\2\u051f\u0521\5\u00dan\2\u0520")
        buf.write("\u051e\3\2\2\2\u0521\u0524\3\2\2\2\u0522\u0520\3\2\2\2")
        buf.write("\u0522\u0523\3\2\2\2\u0523\u0525\3\2\2\2\u0524\u0522\3")
        buf.write("\2\2\2\u0525\u0526\7\6\2\2\u0526\u0131\3\2\2\2\u0527\u0529")
        buf.write("\7K\2\2\u0528\u052a\7T\2\2\u0529\u0528\3\2\2\2\u0529\u052a")
        buf.write("\3\2\2\2\u052a\u052c\3\2\2\2\u052b\u0527\3\2\2\2\u052b")
        buf.write("\u052c\3\2\2\2\u052c\u052d\3\2\2\2\u052d\u0530\7|\2\2")
        buf.write("\u052e\u0531\5\u0130\u0099\2\u052f\u0531\5\u012e\u0098")
        buf.write("\2\u0530\u052e\3\2\2\2\u0530\u052f\3\2\2\2\u0530\u0531")
        buf.write("\3\2\2\2\u0531\u0133\3\2\2\2\u0532\u0534\7~\2\2\u0533")
        buf.write("\u0535\5H%\2\u0534\u0533\3\2\2\2\u0534\u0535\3\2\2\2\u0535")
        buf.write("\u0536\3\2\2\2\u0536\u0537\7k\2\2\u0537\u0538\5\u00b6")
        buf.write("\\\2\u0538\u0135\3\2\2\2\u0539\u053f\5\u015e\u00b0\2\u053a")
        buf.write("\u053b\5&\24\2\u053b\u053c\5\u015e\u00b0\2\u053c\u053e")
        buf.write("\3\2\2\2\u053d\u053a\3\2\2\2\u053e\u0541\3\2\2\2\u053f")
        buf.write("\u053d\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0137\3\2\2\2")
        buf.write("\u0541\u053f\3\2\2\2\u0542\u0552\5(\25\2\u0543\u0552\5")
        buf.write("p9\2\u0544\u0552\5~@\2\u0545\u0552\5\u00bc_\2\u0546\u0552")
        buf.write("\5\u0100\u0081\2\u0547\u0549\5\u016a\u00b6\2\u0548\u0547")
        buf.write("\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u054f\3\2\2\2\u054a")
        buf.write("\u054b\7\4\2\2\u054b\u054c\5\u0086D\2\u054c\u054d\7\6")
        buf.write("\2\2\u054d\u0550\3\2\2\2\u054e\u0550\5\u00f0y\2\u054f")
        buf.write("\u054a\3\2\2\2\u054f\u054e\3\2\2\2\u0550\u0552\3\2\2\2")
        buf.write("\u0551\u0542\3\2\2\2\u0551\u0543\3\2\2\2\u0551\u0544\3")
        buf.write("\2\2\2\u0551\u0545\3\2\2\2\u0551\u0546\3\2\2\2\u0551\u0548")
        buf.write("\3\2\2\2\u0552\u0139\3\2\2\2\u0553\u055b\5@!\2\u0554\u055b")
        buf.write("\5B\"\2\u0555\u055b\5\u00b8]\2\u0556\u055b\5\u00d6l\2")
        buf.write("\u0557\u055b\5\u00e0q\2\u0558\u055b\5\u0102\u0082\2\u0559")
        buf.write("\u055b\5\u0142\u00a2\2\u055a\u0553\3\2\2\2\u055a\u0554")
        buf.write("\3\2\2\2\u055a\u0555\3\2\2\2\u055a\u0556\3\2\2\2\u055a")
        buf.write("\u0557\3\2\2\2\u055a\u0558\3\2\2\2\u055a\u0559\3\2\2\2")
        buf.write("\u055b\u013b\3\2\2\2\u055c\u055d\7\u0081\2\2\u055d\u055e")
        buf.write("\7\3\2\2\u055e\u013d\3\2\2\2\u055f\u056b\5\62\32\2\u0560")
        buf.write("\u056b\5\66\34\2\u0561\u056b\5T+\2\u0562\u056b\5V,\2\u0563")
        buf.write("\u056b\5\u0082B\2\u0564\u056b\5\u00a8U\2\u0565\u056b\5")
        buf.write("\u00dep\2\u0566\u056b\5\u00f2z\2\u0567\u056b\5\u0112\u008a")
        buf.write("\2\u0568\u056b\5\u011a\u008e\2\u0569\u056b\5\u013c\u009f")
        buf.write("\2\u056a\u055f\3\2\2\2\u056a\u0560\3\2\2\2\u056a\u0561")
        buf.write("\3\2\2\2\u056a\u0562\3\2\2\2\u056a\u0563\3\2\2\2\u056a")
        buf.write("\u0564\3\2\2\2\u056a\u0565\3\2\2\2\u056a\u0566\3\2\2\2")
        buf.write("\u056a\u0567\3\2\2\2\u056a\u0568\3\2\2\2\u056a\u0569\3")
        buf.write("\2\2\2\u056b\u013f\3\2\2\2\u056c\u056d\t\13\2\2\u056d")
        buf.write("\u0141\3\2\2\2\u056e\u0570\7\u0083\2\2\u056f\u0571\5\u017e")
        buf.write("\u00c0\2\u0570\u056f\3\2\2\2\u0570\u0571\3\2\2\2\u0571")
        buf.write("\u0143\3\2\2\2\u0572\u0574\5\u0152\u00aa\2\u0573\u0572")
        buf.write("\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0576\3\2\2\2\u0575")
        buf.write("\u0577\5\u0150\u00a9\2\u0576\u0575\3\2\2\2\u0576\u0577")
        buf.write("\3\2\2\2\u0577\u0145\3\2\2\2\u0578\u0579\7k\2\2\u0579")
        buf.write("\u057a\7\4\2\2\u057a\u057b\5\u0154\u00ab\2\u057b\u057c")
        buf.write("\7\6\2\2\u057c\u0147\3\2\2\2\u057d\u057f\5 \21\2\u057e")
        buf.write("\u057d\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0581\3\2\2\2")
        buf.write("\u0580\u0582\5\u0160\u00b1\2\u0581\u0580\3\2\2\2\u0581")
        buf.write("\u0582\3\2\2\2\u0582\u0586\3\2\2\2\u0583\u0584\5\u0154")
        buf.write("\u00ab\2\u0584\u0585\7\3\2\2\u0585\u0587\3\2\2\2\u0586")
        buf.write("\u0583\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0149\3\2\2\2")
        buf.write("\u0588\u0589\5\u014c\u00a7\2\u0589\u058a\5\u0148\u00a5")
        buf.write("\2\u058a\u058b\7E\2\2\u058b\u058c\7\3\2\2\u058c\u014b")
        buf.write("\3\2\2\2\u058d\u058e\7\u0085\2\2\u058e\u058f\5\u014e\u00a8")
        buf.write("\2\u058f\u0590\7O\2\2\u0590\u0591\5\6\4\2\u0591\u0592")
        buf.write("\7\3\2\2\u0592\u014d\3\2\2\2\u0593\u0594\7\u009f\2\2\u0594")
        buf.write("\u014f\3\2\2\2\u0595\u0596\7\u0084\2\2\u0596\u0597\7k")
        buf.write("\2\2\u0597\u0598\7\4\2\2\u0598\u059d\5\6\4\2\u0599\u059a")
        buf.write("\7\5\2\2\u059a\u059c\5\6\4\2\u059b\u0599\3\2\2\2\u059c")
        buf.write("\u059f\3\2\2\2\u059d\u059b\3\2\2\2\u059d\u059e\3\2\2\2")
        buf.write("\u059e\u05a0\3\2\2\2\u059f\u059d\3\2\2\2\u05a0\u05a1\7")
        buf.write("\6\2\2\u05a1\u0151\3\2\2\2\u05a2\u05a6\5\36\20\2\u05a3")
        buf.write("\u05a6\5\"\22\2\u05a4\u05a6\5\u0158\u00ad\2\u05a5\u05a2")
        buf.write("\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a5\u05a4\3\2\2\2\u05a6")
        buf.write("\u0153\3\2\2\2\u05a7\u05ac\5\u0156\u00ac\2\u05a8\u05a9")
        buf.write("\7&\2\2\u05a9\u05ab\5\u0156\u00ac\2\u05aa\u05a8\3\2\2")
        buf.write("\2\u05ab\u05ae\3\2\2\2\u05ac\u05aa\3\2\2\2\u05ac\u05ad")
        buf.write("\3\2\2\2\u05ad\u0155\3\2\2\2\u05ae\u05ac\3\2\2\2\u05af")
        buf.write("\u05b4\5\u015a\u00ae\2\u05b0\u05b1\7%\2\2\u05b1\u05b3")
        buf.write("\5\u015a\u00ae\2\u05b2\u05b0\3\2\2\2\u05b3\u05b6\3\2\2")
        buf.write("\2\u05b4\u05b2\3\2\2\2\u05b4\u05b5\3\2\2\2\u05b5\u0157")
        buf.write("\3\2\2\2\u05b6\u05b4\3\2\2\2\u05b7\u05b8\7\u0086\2\2\u05b8")
        buf.write("\u05b9\5\u0146\u00a4\2\u05b9\u0159\3\2\2\2\u05ba\u05c1")
        buf.write("\5\6\4\2\u05bb\u05c1\5\u00e4s\2\u05bc\u05bd\7\4\2\2\u05bd")
        buf.write("\u05be\5\u0154\u00ab\2\u05be\u05bf\7\6\2\2\u05bf\u05c1")
        buf.write("\3\2\2\2\u05c0\u05ba\3\2\2\2\u05c0\u05bb\3\2\2\2\u05c0")
        buf.write("\u05bc\3\2\2\2\u05c1\u015b\3\2\2\2\u05c2\u05c4\5\u0126")
        buf.write("\u0094\2\u05c3\u05c2\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5")
        buf.write("\u05c3\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u015d\3\2\2\2")
        buf.write("\u05c7\u05cd\5\u0088E\2\u05c8\u05c9\5\u00d8m\2\u05c9\u05ca")
        buf.write("\5\u0088E\2\u05ca\u05cc\3\2\2\2\u05cb\u05c8\3\2\2\2\u05cc")
        buf.write("\u05cf\3\2\2\2\u05cd\u05cb\3\2\2\2\u05cd\u05ce\3\2\2\2")
        buf.write("\u05ce\u015f\3\2\2\2\u05cf\u05cd\3\2\2\2\u05d0\u05d1\7")
        buf.write("\u008a\2\2\u05d1\u05d2\7\4\2\2\u05d2\u05d7\5\6\4\2\u05d3")
        buf.write("\u05d4\7\5\2\2\u05d4\u05d6\5\6\4\2\u05d5\u05d3\3\2\2\2")
        buf.write("\u05d6\u05d9\3\2\2\2\u05d7\u05d5\3\2\2\2\u05d7\u05d8\3")
        buf.write("\2\2\2\u05d8\u05da\3\2\2\2\u05d9\u05d7\3\2\2\2\u05da\u05db")
        buf.write("\7\6\2\2\u05db\u05dc\7\3\2\2\u05dc\u0161\3\2\2\2\u05dd")
        buf.write("\u05de\7\u008c\2\2\u05de\u05df\5\u0164\u00b3\2\u05df\u05e0")
        buf.write("\7\35\2\2\u05e0\u05e1\5\u016c\u00b7\2\u05e1\u05e3\7\3")
        buf.write("\2\2\u05e2\u05e4\5\u0178\u00bd\2\u05e3\u05e2\3\2\2\2\u05e3")
        buf.write("\u05e4\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05e6\7F\2\2")
        buf.write("\u05e6\u05e7\7\3\2\2\u05e7\u0163\3\2\2\2\u05e8\u05e9\7")
        buf.write("\u009f\2\2\u05e9\u0165\3\2\2\2\u05ea\u05ed\5\u0168\u00b5")
        buf.write("\2\u05eb\u05ed\5\30\r\2\u05ec\u05ea\3\2\2\2\u05ec\u05eb")
        buf.write("\3\2\2\2\u05ed\u0167\3\2\2\2\u05ee\u05ef\7\u009f\2\2\u05ef")
        buf.write("\u0169\3\2\2\2\u05f0\u05f1\t\f\2\2\u05f1\u016b\3\2\2\2")
        buf.write("\u05f2\u05f5\5X-\2\u05f3\u05f5\5b\62\2\u05f4\u05f2\3\2")
        buf.write("\2\2\u05f4\u05f3\3\2\2\2\u05f5\u016d\3\2\2\2\u05f6\u05fa")
        buf.write("\7\u008e\2\2\u05f7\u05f8\5\u0170\u00b9\2\u05f8\u05f9\7")
        buf.write("\3\2\2\u05f9\u05fb\3\2\2\2\u05fa\u05f7\3\2\2\2\u05fb\u05fc")
        buf.write("\3\2\2\2\u05fc\u05fa\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd")
        buf.write("\u016f\3\2\2\2\u05fe\u05ff\5\u0122\u0092\2\u05ff\u0600")
        buf.write("\7\13\2\2\u0600\u0602\3\2\2\2\u0601\u05fe\3\2\2\2\u0601")
        buf.write("\u0602\3\2\2\2\u0602\u0603\3\2\2\2\u0603\u0608\5\u0106")
        buf.write("\u0084\2\u0604\u0605\7\5\2\2\u0605\u0607\5\u0106\u0084")
        buf.write("\2\u0606\u0604\3\2\2\2\u0607\u060a\3\2\2\2\u0608\u0606")
        buf.write("\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u0171\3\2\2\2\u060a")
        buf.write("\u0608\3\2\2\2\u060b\u060c\7\u0090\2\2\u060c\u060d\5\u00d2")
        buf.write("j\2\u060d\u0173\3\2\2\2\u060e\u060f\7\u0091\2\2\u060f")
        buf.write("\u0610\7Q\2\2\u0610\u061c\5\24\13\2\u0611\u0612\7\4\2")
        buf.write("\2\u0612\u0617\5\u00dco\2\u0613\u0614\7\5\2\2\u0614\u0616")
        buf.write("\5\u00dco\2\u0615\u0613\3\2\2\2\u0616\u0619\3\2\2\2\u0617")
        buf.write("\u0615\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u061a\3\2\2\2")
        buf.write("\u0619\u0617\3\2\2\2\u061a\u061b\7\6\2\2\u061b\u061d\3")
        buf.write("\2\2\2\u061c\u0611\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u061e")
        buf.write("\3\2\2\2\u061e\u061f\7\3\2\2\u061f\u0175\3\2\2\2\u0620")
        buf.write("\u0621\7\u009f\2\2\u0621\u0177\3\2\2\2\u0622\u0626\7\u0097")
        buf.write("\2\2\u0623\u0624\5j\66\2\u0624\u0625\7\3\2\2\u0625\u0627")
        buf.write("\3\2\2\2\u0626\u0623\3\2\2\2\u0627\u0628\3\2\2\2\u0628")
        buf.write("\u0626\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u0179\3\2\2\2")
        buf.write("\u062a\u062b\7\u0098\2\2\u062b\u062c\5\u00d2j\2\u062c")
        buf.write("\u017b\3\2\2\2\u062d\u062e\5\u00e2r\2\u062e\u017d\3\2")
        buf.write("\2\2\u062f\u0630\7\4\2\2\u0630\u0631\5\u017c\u00bf\2\u0631")
        buf.write("\u0633\7\6\2\2\u0632\u0634\7N\2\2\u0633\u0632\3\2\2\2")
        buf.write("\u0633\u0634\3\2\2\2\u0634\u017f\3\2\2\2\u009b\u01a5\u01ad")
        buf.write("\u01ba\u01bd\u01c6\u01cf\u01d4\u01d8\u01db\u01e4\u01eb")
        buf.write("\u01f4\u01f7\u01ff\u0208\u0211\u0218\u0231\u023f\u0245")
        buf.write("\u024e\u0256\u0263\u026a\u0270\u0277\u0284\u0289\u0290")
        buf.write("\u0295\u0299\u029c\u029f\u02a2\u02ab\u02ae\u02c2\u02cc")
        buf.write("\u02d4\u02d9\u02df\u02e7\u02eb\u02f4\u02f9\u0300\u0308")
        buf.write("\u030b\u0312\u031f\u0324\u0330\u0336\u033a\u033e\u0341")
        buf.write("\u0347\u034e\u0352\u0358\u035c\u0364\u0369\u0374\u037a")
        buf.write("\u037c\u038a\u0396\u039c\u03a2\u03b8\u03bb\u03c2\u03cb")
        buf.write("\u03cf\u03d3\u03dc\u03e2\u03ec\u03f3\u0401\u0407\u0409")
        buf.write("\u0418\u0424\u042f\u0432\u0436\u043b\u0444\u044e\u0453")
        buf.write("\u0458\u045d\u0468\u0471\u0481\u0486\u048a\u0495\u049a")
        buf.write("\u04a3\u04aa\u04ad\u04b0\u04b3\u04bb\u04c5\u04cc\u04d3")
        buf.write("\u04dc\u04ec\u04f9\u04fd\u0501\u0503\u0509\u051a\u0522")
        buf.write("\u0529\u052b\u0530\u0534\u053f\u0548\u054f\u0551\u055a")
        buf.write("\u056a\u0570\u0573\u0576\u057e\u0581\u0586\u059d\u05a5")
        buf.write("\u05ac\u05b4\u05c0\u05c5\u05cd\u05d7\u05e3\u05ec\u05f4")
        buf.write("\u05fc\u0601\u0608\u0617\u061c\u0628\u0633")
        return buf.getvalue()


class expressParser ( Parser ):

    grammarFileName = "express.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'('", "','", "')'", "'+'", "'-'", 
                     "'['", "']'", "':'", "':='", "'.'", "'?'", "'**'", 
                     "'\\'", "'{'", "'}'", "'<'", "'<='", "'*'", "'/'", 
                     "'||'", "'<*'", "'|'", "'>'", "'>='", "'<>'", "'='", 
                     "':<>:'", "':=:'", "'ABS'", "'ABSTRACT'", "'ACOS'", 
                     "'AGGREGATE'", "'ALIAS'", "'AND'", "'ANDOR'", "'ARRAY'", 
                     "'AS'", "'ASIN'", "'ATAN'", "'BAG'", "'BASED_ON'", 
                     "'BEGIN'", "'BINARY'", "'BLENGTH'", "'BOOLEAN'", "'BY'", 
                     "'CASE'", "'CONSTANT'", "'CONST_E'", "'COS'", "'DERIVE'", 
                     "'DIV'", "'ELSE'", "'END'", "'END_ALIAS'", "'END_CASE'", 
                     "'END_CONSTANT'", "'END_ENTITY'", "'END_FUNCTION'", 
                     "'END_IF'", "'END_LOCAL'", "'END_PROCEDURE'", "'END_REPEAT'", 
                     "'END_RULE'", "'END_SCHEMA'", "'END_SUBTYPE_CONSTRAINT'", 
                     "'END_TYPE'", "'ENTITY'", "'ENUMERATION'", "'ESCAPE'", 
                     "'EXISTS'", "'EXTENSIBLE'", "'EXP'", "'FALSE'", "'FIXED'", 
                     "'FOR'", "'FORMAT'", "'FROM'", "'FUNCTION'", "'GENERIC'", 
                     "'GENERIC_ENTITY'", "'HIBOUND'", "'HIINDEX'", "'IF'", 
                     "'IN'", "'INSERT'", "'INTEGER'", "'INVERSE'", "'LENGTH'", 
                     "'LIKE'", "'LIST'", "'LOBOUND'", "'LOCAL'", "'LOG'", 
                     "'LOG10'", "'LOG2'", "'LOGICAL'", "'LOINDEX'", "'MOD'", 
                     "'NOT'", "'NUMBER'", "'NVL'", "'ODD'", "'OF'", "'ONEOF'", 
                     "'OPTIONAL'", "'OR'", "'OTHERWISE'", "'PI'", "'PROCEDURE'", 
                     "'QUERY'", "'REAL'", "'REFERENCE'", "'REMOVE'", "'RENAMED'", 
                     "'REPEAT'", "'RETURN'", "'ROLESOF'", "'RULE'", "'SCHEMA'", 
                     "'SELECT'", "'SELF'", "'SET'", "'SIN'", "'SIZEOF'", 
                     "'SKIP'", "'SQRT'", "'STRING'", "'SUBTYPE'", "'SUBTYPE_CONSTRAINT'", 
                     "'SUPERTYPE'", "'TAN'", "'THEN'", "'TO'", "'TOTAL_OVER'", 
                     "'TRUE'", "'TYPE'", "'TYPEOF'", "'UNIQUE'", "'UNKNOWN'", 
                     "'UNTIL'", "'USE'", "'USEDIN'", "'VALUE'", "'VALUE_IN'", 
                     "'VALUE_UNIQUE'", "'VAR'", "'WHERE'", "'WHILE'", "'WITH'", 
                     "'XOR'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'''" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "ABS", "ABSTRACT", "ACOS", 
                      "AGGREGATE", "ALIAS", "AND", "ANDOR", "ARRAY", "AS", 
                      "ASIN", "ATAN", "BAG", "BASED_ON", "BEGIN", "BINARY", 
                      "BLENGTH", "BOOLEAN", "BY", "CASE", "CONSTANT", "CONST_E", 
                      "COS", "DERIVE", "DIV", "ELSE", "END", "END_ALIAS", 
                      "END_CASE", "END_CONSTANT", "END_ENTITY", "END_FUNCTION", 
                      "END_IF", "END_LOCAL", "END_PROCEDURE", "END_REPEAT", 
                      "END_RULE", "END_SCHEMA", "END_SUBTYPE_CONSTRAINT", 
                      "END_TYPE", "ENTITY", "ENUMERATION", "ESCAPE", "EXISTS", 
                      "EXTENSIBLE", "EXP", "FALSE", "FIXED", "FOR", "FORMAT", 
                      "FROM", "FUNCTION", "GENERIC", "GENERIC_ENTITY", "HIBOUND", 
                      "HIINDEX", "IF", "IN", "INSERT", "INTEGER", "INVERSE", 
                      "LENGTH", "LIKE", "LIST", "LOBOUND", "LOCAL", "LOG", 
                      "LOG10", "LOG2", "LOGICAL", "LOINDEX", "MOD", "NOT", 
                      "NUMBER", "NVL", "ODD", "OF", "ONEOF", "OPTIONAL", 
                      "OR", "OTHERWISE", "PI", "PROCEDURE", "QUERY", "REAL", 
                      "REFERENCE", "REMOVE", "RENAMED", "REPEAT", "RETURN", 
                      "ROLESOF", "RULE", "SCHEMA", "SELECT", "SELF", "SET", 
                      "SIN", "SIZEOF", "SKIP_", "SQRT", "STRING", "SUBTYPE", 
                      "SUBTYPE_CONSTRAINT", "SUPERTYPE", "TAN", "THEN", 
                      "TO", "TOTAL_OVER", "TRUE", "TYPE", "TYPEOF", "UNIQUE", 
                      "UNKNOWN", "UNTIL", "USE", "USEDIN", "VALUE", "VALUE_IN", 
                      "VALUE_UNIQUE", "VAR", "WHERE", "WHILE", "WITH", "XOR", 
                      "BINARY_LITERAL", "ENCODED_STRING_LITERAL", "INTEGER_LITERAL", 
                      "REAL_LITERAL", "SIMPLE_ID", "QUOTECHAR", "SIMPLE_STRING_LITERAL", 
                      "COMMENTS", "TAIL_REMARK", "WS" ]

    RULE_attribute_ref = 0
    RULE_constant_ref = 1
    RULE_entity_ref = 2
    RULE_enumeration_ref = 3
    RULE_function_ref = 4
    RULE_parameter_ref = 5
    RULE_procedure_ref = 6
    RULE_rule_label_ref = 7
    RULE_rule_ref = 8
    RULE_schema_ref = 9
    RULE_subtype_constraint_ref = 10
    RULE_type_label_ref = 11
    RULE_type_ref = 12
    RULE_variable_ref = 13
    RULE_abstract_entity_declaration = 14
    RULE_abstract_supertype = 15
    RULE_abstract_supertype_declaration = 16
    RULE_actual_parameter_list = 17
    RULE_add_like_op = 18
    RULE_aggregate_initializer = 19
    RULE_aggregate_source = 20
    RULE_aggregate_type = 21
    RULE_aggregation_types = 22
    RULE_algorithm_head = 23
    RULE_alias_stmt = 24
    RULE_array_type = 25
    RULE_assignment_stmt = 26
    RULE_attribute_decl = 27
    RULE_attribute_id = 28
    RULE_attribute_qualifier = 29
    RULE_bag_type = 30
    RULE_binary_type = 31
    RULE_boolean_type = 32
    RULE_bound_1 = 33
    RULE_bound_2 = 34
    RULE_bound_spec = 35
    RULE_built_in_constant = 36
    RULE_built_in_function = 37
    RULE_built_in_procedure = 38
    RULE_case_action = 39
    RULE_case_label = 40
    RULE_case_stmt = 41
    RULE_compound_stmt = 42
    RULE_concrete_types = 43
    RULE_constant_body = 44
    RULE_constant_decl = 45
    RULE_constant_factor = 46
    RULE_constant_id = 47
    RULE_constructed_types = 48
    RULE_declaration = 49
    RULE_derived_attr = 50
    RULE_derive_clause = 51
    RULE_domain_rule = 52
    RULE_element = 53
    RULE_entity_body = 54
    RULE_entity_constructor = 55
    RULE_entity_decl = 56
    RULE_entity_head = 57
    RULE_entity_id = 58
    RULE_enumeration_extension = 59
    RULE_enumeration_id = 60
    RULE_enumeration_items = 61
    RULE_enumeration_reference = 62
    RULE_enumeration_type = 63
    RULE_escape_stmt = 64
    RULE_explicit_attr = 65
    RULE_expression = 66
    RULE_factor = 67
    RULE_formal_parameter = 68
    RULE_function_call = 69
    RULE_function_decl = 70
    RULE_function_head = 71
    RULE_function_id = 72
    RULE_generalized_types = 73
    RULE_general_aggregation_types = 74
    RULE_general_array_type = 75
    RULE_general_bag_type = 76
    RULE_general_list_type = 77
    RULE_general_ref = 78
    RULE_general_set_type = 79
    RULE_generic_entity_type = 80
    RULE_generic_type = 81
    RULE_group_qualifier = 82
    RULE_if_stmt = 83
    RULE_increment = 84
    RULE_increment_control = 85
    RULE_index = 86
    RULE_index_1 = 87
    RULE_index_2 = 88
    RULE_index_qualifier = 89
    RULE_instantiable_type = 90
    RULE_integer_type = 91
    RULE_interface_specification = 92
    RULE_interval = 93
    RULE_interval_high = 94
    RULE_interval_item = 95
    RULE_interval_low = 96
    RULE_interval_op = 97
    RULE_inverse_attr = 98
    RULE_inverse_clause = 99
    RULE_list_type = 100
    RULE_literal = 101
    RULE_local_decl = 102
    RULE_local_variable = 103
    RULE_logical_expression = 104
    RULE_logical_literal = 105
    RULE_logical_type = 106
    RULE_multiplication_like_op = 107
    RULE_named_types = 108
    RULE_named_type_or_rename = 109
    RULE_null_stmt = 110
    RULE_number_type = 111
    RULE_numeric_expression = 112
    RULE_one_of = 113
    RULE_parameter = 114
    RULE_parameter_id = 115
    RULE_parameter_type = 116
    RULE_population = 117
    RULE_precision_spec = 118
    RULE_primary = 119
    RULE_procedure_call_stmt = 120
    RULE_procedure_decl = 121
    RULE_procedure_head = 122
    RULE_procedure_id = 123
    RULE_qualifiable_factor = 124
    RULE_qualified_attribute = 125
    RULE_qualifier = 126
    RULE_query_expression = 127
    RULE_real_type = 128
    RULE_redeclared_attribute = 129
    RULE_referenced_attribute = 130
    RULE_reference_clause = 131
    RULE_rel_op = 132
    RULE_rel_op_extended = 133
    RULE_rename_id = 134
    RULE_repeat_control = 135
    RULE_repeat_stmt = 136
    RULE_repetition = 137
    RULE_resource_or_rename = 138
    RULE_resource_ref = 139
    RULE_return_stmt = 140
    RULE_rule_decl = 141
    RULE_rule_head = 142
    RULE_rule_id = 143
    RULE_rule_label_id = 144
    RULE_schema_body = 145
    RULE_schema_decl = 146
    RULE_schema_id = 147
    RULE_schema_version_id = 148
    RULE_selector = 149
    RULE_select_extension = 150
    RULE_select_list = 151
    RULE_select_type = 152
    RULE_set_type = 153
    RULE_simple_expression = 154
    RULE_simple_factor = 155
    RULE_simple_types = 156
    RULE_skip_stmt = 157
    RULE_stmt = 158
    RULE_string_literal = 159
    RULE_string_type = 160
    RULE_subsuper = 161
    RULE_subtype_constraint = 162
    RULE_subtype_constraint_body = 163
    RULE_subtype_constraint_decl = 164
    RULE_subtype_constraint_head = 165
    RULE_subtype_constraint_id = 166
    RULE_subtype_declaration = 167
    RULE_supertype_constraint = 168
    RULE_supertype_expression = 169
    RULE_supertype_factor = 170
    RULE_supertype_rule = 171
    RULE_supertype_term = 172
    RULE_syntax = 173
    RULE_term = 174
    RULE_total_over = 175
    RULE_type_decl = 176
    RULE_type_id = 177
    RULE_type_label = 178
    RULE_type_label_id = 179
    RULE_unary_op = 180
    RULE_underlying_type = 181
    RULE_unique_clause = 182
    RULE_unique_rule = 183
    RULE_until_control = 184
    RULE_use_clause = 185
    RULE_variable_id = 186
    RULE_where_clause = 187
    RULE_while_control = 188
    RULE_width = 189
    RULE_width_spec = 190

    ruleNames =  [ "attribute_ref", "constant_ref", "entity_ref", "enumeration_ref", 
                   "function_ref", "parameter_ref", "procedure_ref", "rule_label_ref", 
                   "rule_ref", "schema_ref", "subtype_constraint_ref", "type_label_ref", 
                   "type_ref", "variable_ref", "abstract_entity_declaration", 
                   "abstract_supertype", "abstract_supertype_declaration", 
                   "actual_parameter_list", "add_like_op", "aggregate_initializer", 
                   "aggregate_source", "aggregate_type", "aggregation_types", 
                   "algorithm_head", "alias_stmt", "array_type", "assignment_stmt", 
                   "attribute_decl", "attribute_id", "attribute_qualifier", 
                   "bag_type", "binary_type", "boolean_type", "bound_1", 
                   "bound_2", "bound_spec", "built_in_constant", "built_in_function", 
                   "built_in_procedure", "case_action", "case_label", "case_stmt", 
                   "compound_stmt", "concrete_types", "constant_body", "constant_decl", 
                   "constant_factor", "constant_id", "constructed_types", 
                   "declaration", "derived_attr", "derive_clause", "domain_rule", 
                   "element", "entity_body", "entity_constructor", "entity_decl", 
                   "entity_head", "entity_id", "enumeration_extension", 
                   "enumeration_id", "enumeration_items", "enumeration_reference", 
                   "enumeration_type", "escape_stmt", "explicit_attr", "expression", 
                   "factor", "formal_parameter", "function_call", "function_decl", 
                   "function_head", "function_id", "generalized_types", 
                   "general_aggregation_types", "general_array_type", "general_bag_type", 
                   "general_list_type", "general_ref", "general_set_type", 
                   "generic_entity_type", "generic_type", "group_qualifier", 
                   "if_stmt", "increment", "increment_control", "index", 
                   "index_1", "index_2", "index_qualifier", "instantiable_type", 
                   "integer_type", "interface_specification", "interval", 
                   "interval_high", "interval_item", "interval_low", "interval_op", 
                   "inverse_attr", "inverse_clause", "list_type", "literal", 
                   "local_decl", "local_variable", "logical_expression", 
                   "logical_literal", "logical_type", "multiplication_like_op", 
                   "named_types", "named_type_or_rename", "null_stmt", "number_type", 
                   "numeric_expression", "one_of", "parameter", "parameter_id", 
                   "parameter_type", "population", "precision_spec", "primary", 
                   "procedure_call_stmt", "procedure_decl", "procedure_head", 
                   "procedure_id", "qualifiable_factor", "qualified_attribute", 
                   "qualifier", "query_expression", "real_type", "redeclared_attribute", 
                   "referenced_attribute", "reference_clause", "rel_op", 
                   "rel_op_extended", "rename_id", "repeat_control", "repeat_stmt", 
                   "repetition", "resource_or_rename", "resource_ref", "return_stmt", 
                   "rule_decl", "rule_head", "rule_id", "rule_label_id", 
                   "schema_body", "schema_decl", "schema_id", "schema_version_id", 
                   "selector", "select_extension", "select_list", "select_type", 
                   "set_type", "simple_expression", "simple_factor", "simple_types", 
                   "skip_stmt", "stmt", "string_literal", "string_type", 
                   "subsuper", "subtype_constraint", "subtype_constraint_body", 
                   "subtype_constraint_decl", "subtype_constraint_head", 
                   "subtype_constraint_id", "subtype_declaration", "supertype_constraint", 
                   "supertype_expression", "supertype_factor", "supertype_rule", 
                   "supertype_term", "syntax", "term", "total_over", "type_decl", 
                   "type_id", "type_label", "type_label_id", "unary_op", 
                   "underlying_type", "unique_clause", "unique_rule", "until_control", 
                   "use_clause", "variable_id", "where_clause", "while_control", 
                   "width", "width_spec" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    ABS=30
    ABSTRACT=31
    ACOS=32
    AGGREGATE=33
    ALIAS=34
    AND=35
    ANDOR=36
    ARRAY=37
    AS=38
    ASIN=39
    ATAN=40
    BAG=41
    BASED_ON=42
    BEGIN=43
    BINARY=44
    BLENGTH=45
    BOOLEAN=46
    BY=47
    CASE=48
    CONSTANT=49
    CONST_E=50
    COS=51
    DERIVE=52
    DIV=53
    ELSE=54
    END=55
    END_ALIAS=56
    END_CASE=57
    END_CONSTANT=58
    END_ENTITY=59
    END_FUNCTION=60
    END_IF=61
    END_LOCAL=62
    END_PROCEDURE=63
    END_REPEAT=64
    END_RULE=65
    END_SCHEMA=66
    END_SUBTYPE_CONSTRAINT=67
    END_TYPE=68
    ENTITY=69
    ENUMERATION=70
    ESCAPE=71
    EXISTS=72
    EXTENSIBLE=73
    EXP=74
    FALSE=75
    FIXED=76
    FOR=77
    FORMAT=78
    FROM=79
    FUNCTION=80
    GENERIC=81
    GENERIC_ENTITY=82
    HIBOUND=83
    HIINDEX=84
    IF=85
    IN=86
    INSERT=87
    INTEGER=88
    INVERSE=89
    LENGTH=90
    LIKE=91
    LIST=92
    LOBOUND=93
    LOCAL=94
    LOG=95
    LOG10=96
    LOG2=97
    LOGICAL=98
    LOINDEX=99
    MOD=100
    NOT=101
    NUMBER=102
    NVL=103
    ODD=104
    OF=105
    ONEOF=106
    OPTIONAL=107
    OR=108
    OTHERWISE=109
    PI=110
    PROCEDURE=111
    QUERY=112
    REAL=113
    REFERENCE=114
    REMOVE=115
    RENAMED=116
    REPEAT=117
    RETURN=118
    ROLESOF=119
    RULE=120
    SCHEMA=121
    SELECT=122
    SELF=123
    SET=124
    SIN=125
    SIZEOF=126
    SKIP_=127
    SQRT=128
    STRING=129
    SUBTYPE=130
    SUBTYPE_CONSTRAINT=131
    SUPERTYPE=132
    TAN=133
    THEN=134
    TO=135
    TOTAL_OVER=136
    TRUE=137
    TYPE=138
    TYPEOF=139
    UNIQUE=140
    UNKNOWN=141
    UNTIL=142
    USE=143
    USEDIN=144
    VALUE=145
    VALUE_IN=146
    VALUE_UNIQUE=147
    VAR=148
    WHERE=149
    WHILE=150
    WITH=151
    XOR=152
    BINARY_LITERAL=153
    ENCODED_STRING_LITERAL=154
    INTEGER_LITERAL=155
    REAL_LITERAL=156
    SIMPLE_ID=157
    QUOTECHAR=158
    SIMPLE_STRING_LITERAL=159
    COMMENTS=160
    TAIL_REMARK=161
    WS=162

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Attribute_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_id(self):
            return self.getTypedRuleContext(expressParser.Attribute_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_attribute_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_ref" ):
                listener.enterAttribute_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_ref" ):
                listener.exitAttribute_ref(self)




    def attribute_ref(self):

        localctx = expressParser.Attribute_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_attribute_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.attribute_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_id(self):
            return self.getTypedRuleContext(expressParser.Constant_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_constant_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_ref" ):
                listener.enterConstant_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_ref" ):
                listener.exitConstant_ref(self)




    def constant_ref(self):

        localctx = expressParser.Constant_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_constant_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.constant_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entity_id(self):
            return self.getTypedRuleContext(expressParser.Entity_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_entity_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_ref" ):
                listener.enterEntity_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_ref" ):
                listener.exitEntity_ref(self)




    def entity_ref(self):

        localctx = expressParser.Entity_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_entity_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.entity_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enumeration_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeration_id(self):
            return self.getTypedRuleContext(expressParser.Enumeration_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_enumeration_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeration_ref" ):
                listener.enterEnumeration_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeration_ref" ):
                listener.exitEnumeration_ref(self)




    def enumeration_ref(self):

        localctx = expressParser.Enumeration_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_enumeration_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.enumeration_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_id(self):
            return self.getTypedRuleContext(expressParser.Function_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_function_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_ref" ):
                listener.enterFunction_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_ref" ):
                listener.exitFunction_ref(self)




    def function_ref(self):

        localctx = expressParser.Function_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_function_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.function_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_id(self):
            return self.getTypedRuleContext(expressParser.Parameter_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_parameter_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_ref" ):
                listener.enterParameter_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_ref" ):
                listener.exitParameter_ref(self)




    def parameter_ref(self):

        localctx = expressParser.Parameter_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_parameter_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.parameter_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedure_id(self):
            return self.getTypedRuleContext(expressParser.Procedure_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_procedure_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_ref" ):
                listener.enterProcedure_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_ref" ):
                listener.exitProcedure_ref(self)




    def procedure_ref(self):

        localctx = expressParser.Procedure_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_procedure_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.procedure_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_label_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rule_label_id(self):
            return self.getTypedRuleContext(expressParser.Rule_label_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_rule_label_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_label_ref" ):
                listener.enterRule_label_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_label_ref" ):
                listener.exitRule_label_ref(self)




    def rule_label_ref(self):

        localctx = expressParser.Rule_label_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_rule_label_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.rule_label_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rule_id(self):
            return self.getTypedRuleContext(expressParser.Rule_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_rule_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_ref" ):
                listener.enterRule_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_ref" ):
                listener.exitRule_ref(self)




    def rule_ref(self):

        localctx = expressParser.Rule_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_rule_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.rule_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schema_id(self):
            return self.getTypedRuleContext(expressParser.Schema_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_schema_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_ref" ):
                listener.enterSchema_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_ref" ):
                listener.exitSchema_ref(self)




    def schema_ref(self):

        localctx = expressParser.Schema_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_schema_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.schema_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subtype_constraint_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subtype_constraint_id(self):
            return self.getTypedRuleContext(expressParser.Subtype_constraint_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_subtype_constraint_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_constraint_ref" ):
                listener.enterSubtype_constraint_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_constraint_ref" ):
                listener.exitSubtype_constraint_ref(self)




    def subtype_constraint_ref(self):

        localctx = expressParser.Subtype_constraint_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_subtype_constraint_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.subtype_constraint_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_label_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_label_id(self):
            return self.getTypedRuleContext(expressParser.Type_label_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_type_label_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_label_ref" ):
                listener.enterType_label_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_label_ref" ):
                listener.exitType_label_ref(self)




    def type_label_ref(self):

        localctx = expressParser.Type_label_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_type_label_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.type_label_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_id(self):
            return self.getTypedRuleContext(expressParser.Type_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_type_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_ref" ):
                listener.enterType_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_ref" ):
                listener.exitType_ref(self)




    def type_ref(self):

        localctx = expressParser.Type_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_type_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.type_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_id(self):
            return self.getTypedRuleContext(expressParser.Variable_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_variable_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_ref" ):
                listener.enterVariable_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_ref" ):
                listener.exitVariable_ref(self)




    def variable_ref(self):

        localctx = expressParser.Variable_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_variable_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.variable_id()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abstract_entity_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(expressParser.ABSTRACT, 0)

        def getRuleIndex(self):
            return expressParser.RULE_abstract_entity_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstract_entity_declaration" ):
                listener.enterAbstract_entity_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstract_entity_declaration" ):
                listener.exitAbstract_entity_declaration(self)




    def abstract_entity_declaration(self):

        localctx = expressParser.Abstract_entity_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_abstract_entity_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(expressParser.ABSTRACT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abstract_supertypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(expressParser.ABSTRACT, 0)

        def SUPERTYPE(self):
            return self.getToken(expressParser.SUPERTYPE, 0)

        def getRuleIndex(self):
            return expressParser.RULE_abstract_supertype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstract_supertype" ):
                listener.enterAbstract_supertype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstract_supertype" ):
                listener.exitAbstract_supertype(self)




    def abstract_supertype(self):

        localctx = expressParser.Abstract_supertypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_abstract_supertype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(expressParser.ABSTRACT)
            self.state = 413
            self.match(expressParser.SUPERTYPE)
            self.state = 414
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Abstract_supertype_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(expressParser.ABSTRACT, 0)

        def SUPERTYPE(self):
            return self.getToken(expressParser.SUPERTYPE, 0)

        def subtype_constraint(self):
            return self.getTypedRuleContext(expressParser.Subtype_constraintContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_abstract_supertype_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstract_supertype_declaration" ):
                listener.enterAbstract_supertype_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstract_supertype_declaration" ):
                listener.exitAbstract_supertype_declaration(self)




    def abstract_supertype_declaration(self):

        localctx = expressParser.Abstract_supertype_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_abstract_supertype_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(expressParser.ABSTRACT)
            self.state = 417
            self.match(expressParser.SUPERTYPE)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.OF:
                self.state = 418
                self.subtype_constraint()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Actual_parameter_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.ParameterContext)
            else:
                return self.getTypedRuleContext(expressParser.ParameterContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_actual_parameter_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActual_parameter_list" ):
                listener.enterActual_parameter_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActual_parameter_list" ):
                listener.exitActual_parameter_list(self)




    def actual_parameter_list(self):

        localctx = expressParser.Actual_parameter_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_actual_parameter_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(expressParser.T__1)
            self.state = 422
            self.parameter()
            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__2:
                self.state = 423
                self.match(expressParser.T__2)
                self.state = 424
                self.parameter()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 430
            self.match(expressParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Add_like_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(expressParser.OR, 0)

        def XOR(self):
            return self.getToken(expressParser.XOR, 0)

        def getRuleIndex(self):
            return expressParser.RULE_add_like_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdd_like_op" ):
                listener.enterAdd_like_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdd_like_op" ):
                listener.exitAdd_like_op(self)




    def add_like_op(self):

        localctx = expressParser.Add_like_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_add_like_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            _la = self._input.LA(1)
            if not(_la==expressParser.T__4 or _la==expressParser.T__5 or _la==expressParser.OR or _la==expressParser.XOR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_initializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.ElementContext)
            else:
                return self.getTypedRuleContext(expressParser.ElementContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_aggregate_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_initializer" ):
                listener.enterAggregate_initializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_initializer" ):
                listener.exitAggregate_initializer(self)




    def aggregate_initializer(self):

        localctx = expressParser.Aggregate_initializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_aggregate_initializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.match(expressParser.T__6)
            self.state = 443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__1) | (1 << expressParser.T__4) | (1 << expressParser.T__5) | (1 << expressParser.T__6) | (1 << expressParser.T__11) | (1 << expressParser.T__14) | (1 << expressParser.ABS) | (1 << expressParser.ACOS) | (1 << expressParser.ASIN) | (1 << expressParser.ATAN) | (1 << expressParser.BLENGTH) | (1 << expressParser.CONST_E) | (1 << expressParser.COS))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (expressParser.EXISTS - 72)) | (1 << (expressParser.EXP - 72)) | (1 << (expressParser.FALSE - 72)) | (1 << (expressParser.FORMAT - 72)) | (1 << (expressParser.HIBOUND - 72)) | (1 << (expressParser.HIINDEX - 72)) | (1 << (expressParser.LENGTH - 72)) | (1 << (expressParser.LOBOUND - 72)) | (1 << (expressParser.LOG - 72)) | (1 << (expressParser.LOG10 - 72)) | (1 << (expressParser.LOG2 - 72)) | (1 << (expressParser.LOINDEX - 72)) | (1 << (expressParser.NOT - 72)) | (1 << (expressParser.NVL - 72)) | (1 << (expressParser.ODD - 72)) | (1 << (expressParser.PI - 72)) | (1 << (expressParser.QUERY - 72)) | (1 << (expressParser.ROLESOF - 72)) | (1 << (expressParser.SELF - 72)) | (1 << (expressParser.SIN - 72)) | (1 << (expressParser.SIZEOF - 72)) | (1 << (expressParser.SQRT - 72)) | (1 << (expressParser.TAN - 72)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (expressParser.TRUE - 137)) | (1 << (expressParser.TYPEOF - 137)) | (1 << (expressParser.UNKNOWN - 137)) | (1 << (expressParser.USEDIN - 137)) | (1 << (expressParser.VALUE - 137)) | (1 << (expressParser.VALUE_IN - 137)) | (1 << (expressParser.VALUE_UNIQUE - 137)) | (1 << (expressParser.BINARY_LITERAL - 137)) | (1 << (expressParser.ENCODED_STRING_LITERAL - 137)) | (1 << (expressParser.INTEGER_LITERAL - 137)) | (1 << (expressParser.REAL_LITERAL - 137)) | (1 << (expressParser.SIMPLE_ID - 137)) | (1 << (expressParser.SIMPLE_STRING_LITERAL - 137)))) != 0):
                self.state = 435
                self.element()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==expressParser.T__2:
                    self.state = 436
                    self.match(expressParser.T__2)
                    self.state = 437
                    self.element()
                    self.state = 442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 445
            self.match(expressParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_sourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self):
            return self.getTypedRuleContext(expressParser.Simple_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_aggregate_source

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_source" ):
                listener.enterAggregate_source(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_source" ):
                listener.exitAggregate_source(self)




    def aggregate_source(self):

        localctx = expressParser.Aggregate_sourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_aggregate_source)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.simple_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AGGREGATE(self):
            return self.getToken(expressParser.AGGREGATE, 0)

        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def parameter_type(self):
            return self.getTypedRuleContext(expressParser.Parameter_typeContext,0)


        def type_label(self):
            return self.getTypedRuleContext(expressParser.Type_labelContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_aggregate_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_type" ):
                listener.enterAggregate_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_type" ):
                listener.exitAggregate_type(self)




    def aggregate_type(self):

        localctx = expressParser.Aggregate_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_aggregate_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(expressParser.AGGREGATE)
            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__8:
                self.state = 450
                self.match(expressParser.T__8)
                self.state = 451
                self.type_label()


            self.state = 454
            self.match(expressParser.OF)
            self.state = 455
            self.parameter_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregation_typesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def array_type(self):
            return self.getTypedRuleContext(expressParser.Array_typeContext,0)


        def bag_type(self):
            return self.getTypedRuleContext(expressParser.Bag_typeContext,0)


        def list_type(self):
            return self.getTypedRuleContext(expressParser.List_typeContext,0)


        def set_type(self):
            return self.getTypedRuleContext(expressParser.Set_typeContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_aggregation_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregation_types" ):
                listener.enterAggregation_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregation_types" ):
                listener.exitAggregation_types(self)




    def aggregation_types(self):

        localctx = expressParser.Aggregation_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_aggregation_types)
        try:
            self.state = 461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.ARRAY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 457
                self.array_type()
                pass
            elif token in [expressParser.BAG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.bag_type()
                pass
            elif token in [expressParser.LIST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 459
                self.list_type()
                pass
            elif token in [expressParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 460
                self.set_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Algorithm_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(expressParser.DeclarationContext,i)


        def constant_decl(self):
            return self.getTypedRuleContext(expressParser.Constant_declContext,0)


        def local_decl(self):
            return self.getTypedRuleContext(expressParser.Local_declContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_algorithm_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlgorithm_head" ):
                listener.enterAlgorithm_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlgorithm_head" ):
                listener.exitAlgorithm_head(self)




    def algorithm_head(self):

        localctx = expressParser.Algorithm_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_algorithm_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (expressParser.ENTITY - 69)) | (1 << (expressParser.FUNCTION - 69)) | (1 << (expressParser.PROCEDURE - 69)) | (1 << (expressParser.SUBTYPE_CONSTRAINT - 69)))) != 0) or _la==expressParser.TYPE:
                self.state = 463
                self.declaration()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.CONSTANT:
                self.state = 469
                self.constant_decl()


            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.LOCAL:
                self.state = 472
                self.local_decl()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alias_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIAS(self):
            return self.getToken(expressParser.ALIAS, 0)

        def variable_id(self):
            return self.getTypedRuleContext(expressParser.Variable_idContext,0)


        def FOR(self):
            return self.getToken(expressParser.FOR, 0)

        def general_ref(self):
            return self.getTypedRuleContext(expressParser.General_refContext,0)


        def END_ALIAS(self):
            return self.getToken(expressParser.END_ALIAS, 0)

        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.QualifierContext)
            else:
                return self.getTypedRuleContext(expressParser.QualifierContext,i)


        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.StmtContext)
            else:
                return self.getTypedRuleContext(expressParser.StmtContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_alias_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias_stmt" ):
                listener.enterAlias_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias_stmt" ):
                listener.exitAlias_stmt(self)




    def alias_stmt(self):

        localctx = expressParser.Alias_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_alias_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(expressParser.ALIAS)
            self.state = 476
            self.variable_id()
            self.state = 477
            self.match(expressParser.FOR)
            self.state = 478
            self.general_ref()
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__6) | (1 << expressParser.T__10) | (1 << expressParser.T__13))) != 0):
                self.state = 479
                self.qualifier()
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 485
            self.match(expressParser.T__0)
            self.state = 487 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 486
                self.stmt()
                self.state = 489 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__0) | (1 << expressParser.ALIAS) | (1 << expressParser.BEGIN) | (1 << expressParser.CASE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (expressParser.ESCAPE - 71)) | (1 << (expressParser.IF - 71)) | (1 << (expressParser.INSERT - 71)) | (1 << (expressParser.REMOVE - 71)) | (1 << (expressParser.REPEAT - 71)) | (1 << (expressParser.RETURN - 71)) | (1 << (expressParser.SKIP_ - 71)))) != 0) or _la==expressParser.SIMPLE_ID):
                    break

            self.state = 491
            self.match(expressParser.END_ALIAS)
            self.state = 492
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(expressParser.ARRAY, 0)

        def bound_spec(self):
            return self.getTypedRuleContext(expressParser.Bound_specContext,0)


        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def instantiable_type(self):
            return self.getTypedRuleContext(expressParser.Instantiable_typeContext,0)


        def OPTIONAL(self):
            return self.getToken(expressParser.OPTIONAL, 0)

        def UNIQUE(self):
            return self.getToken(expressParser.UNIQUE, 0)

        def getRuleIndex(self):
            return expressParser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = expressParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_array_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(expressParser.ARRAY)
            self.state = 495
            self.bound_spec()
            self.state = 496
            self.match(expressParser.OF)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.OPTIONAL:
                self.state = 497
                self.match(expressParser.OPTIONAL)


            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.UNIQUE:
                self.state = 500
                self.match(expressParser.UNIQUE)


            self.state = 503
            self.instantiable_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_ref(self):
            return self.getTypedRuleContext(expressParser.General_refContext,0)


        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.QualifierContext)
            else:
                return self.getTypedRuleContext(expressParser.QualifierContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_assignment_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_stmt" ):
                listener.enterAssignment_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_stmt" ):
                listener.exitAssignment_stmt(self)




    def assignment_stmt(self):

        localctx = expressParser.Assignment_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_assignment_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.general_ref()
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__6) | (1 << expressParser.T__10) | (1 << expressParser.T__13))) != 0):
                self.state = 506
                self.qualifier()
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 512
            self.match(expressParser.T__9)
            self.state = 513
            self.expression()
            self.state = 514
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_id(self):
            return self.getTypedRuleContext(expressParser.Attribute_idContext,0)


        def redeclared_attribute(self):
            return self.getTypedRuleContext(expressParser.Redeclared_attributeContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_attribute_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_decl" ):
                listener.enterAttribute_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_decl" ):
                listener.exitAttribute_decl(self)




    def attribute_decl(self):

        localctx = expressParser.Attribute_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_attribute_decl)
        try:
            self.state = 518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.SIMPLE_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 516
                self.attribute_id()
                pass
            elif token in [expressParser.SELF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 517
                self.redeclared_attribute()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_attribute_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_id" ):
                listener.enterAttribute_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_id" ):
                listener.exitAttribute_id(self)




    def attribute_id(self):

        localctx = expressParser.Attribute_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_attribute_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attribute_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_ref(self):
            return self.getTypedRuleContext(expressParser.Attribute_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_attribute_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute_qualifier" ):
                listener.enterAttribute_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute_qualifier" ):
                listener.exitAttribute_qualifier(self)




    def attribute_qualifier(self):

        localctx = expressParser.Attribute_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_attribute_qualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.match(expressParser.T__10)
            self.state = 523
            self.attribute_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bag_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAG(self):
            return self.getToken(expressParser.BAG, 0)

        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def instantiable_type(self):
            return self.getTypedRuleContext(expressParser.Instantiable_typeContext,0)


        def bound_spec(self):
            return self.getTypedRuleContext(expressParser.Bound_specContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_bag_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBag_type" ):
                listener.enterBag_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBag_type" ):
                listener.exitBag_type(self)




    def bag_type(self):

        localctx = expressParser.Bag_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_bag_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(expressParser.BAG)
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__6:
                self.state = 526
                self.bound_spec()


            self.state = 529
            self.match(expressParser.OF)
            self.state = 530
            self.instantiable_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(expressParser.BINARY, 0)

        def width_spec(self):
            return self.getTypedRuleContext(expressParser.Width_specContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_binary_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_type" ):
                listener.enterBinary_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_type" ):
                listener.exitBinary_type(self)




    def binary_type(self):

        localctx = expressParser.Binary_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_binary_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.match(expressParser.BINARY)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__1:
                self.state = 533
                self.width_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(expressParser.BOOLEAN, 0)

        def getRuleIndex(self):
            return expressParser.RULE_boolean_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_type" ):
                listener.enterBoolean_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_type" ):
                listener.exitBoolean_type(self)




    def boolean_type(self):

        localctx = expressParser.Boolean_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_boolean_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(expressParser.BOOLEAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bound_1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_expression(self):
            return self.getTypedRuleContext(expressParser.Numeric_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_bound_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBound_1" ):
                listener.enterBound_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBound_1" ):
                listener.exitBound_1(self)




    def bound_1(self):

        localctx = expressParser.Bound_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_bound_1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.numeric_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bound_2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_expression(self):
            return self.getTypedRuleContext(expressParser.Numeric_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_bound_2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBound_2" ):
                listener.enterBound_2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBound_2" ):
                listener.exitBound_2(self)




    def bound_2(self):

        localctx = expressParser.Bound_2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_bound_2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.numeric_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bound_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bound_1(self):
            return self.getTypedRuleContext(expressParser.Bound_1Context,0)


        def bound_2(self):
            return self.getTypedRuleContext(expressParser.Bound_2Context,0)


        def getRuleIndex(self):
            return expressParser.RULE_bound_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBound_spec" ):
                listener.enterBound_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBound_spec" ):
                listener.exitBound_spec(self)




    def bound_spec(self):

        localctx = expressParser.Bound_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_bound_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(expressParser.T__6)
            self.state = 543
            self.bound_1()
            self.state = 544
            self.match(expressParser.T__8)
            self.state = 545
            self.bound_2()
            self.state = 546
            self.match(expressParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Built_in_constantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST_E(self):
            return self.getToken(expressParser.CONST_E, 0)

        def PI(self):
            return self.getToken(expressParser.PI, 0)

        def SELF(self):
            return self.getToken(expressParser.SELF, 0)

        def getRuleIndex(self):
            return expressParser.RULE_built_in_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuilt_in_constant" ):
                listener.enterBuilt_in_constant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuilt_in_constant" ):
                listener.exitBuilt_in_constant(self)




    def built_in_constant(self):

        localctx = expressParser.Built_in_constantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_built_in_constant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 548
            _la = self._input.LA(1)
            if not(_la==expressParser.T__11 or _la==expressParser.CONST_E or _la==expressParser.PI or _la==expressParser.SELF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Built_in_functionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(expressParser.ABS, 0)

        def ACOS(self):
            return self.getToken(expressParser.ACOS, 0)

        def ASIN(self):
            return self.getToken(expressParser.ASIN, 0)

        def ATAN(self):
            return self.getToken(expressParser.ATAN, 0)

        def BLENGTH(self):
            return self.getToken(expressParser.BLENGTH, 0)

        def COS(self):
            return self.getToken(expressParser.COS, 0)

        def EXISTS(self):
            return self.getToken(expressParser.EXISTS, 0)

        def EXP(self):
            return self.getToken(expressParser.EXP, 0)

        def FORMAT(self):
            return self.getToken(expressParser.FORMAT, 0)

        def HIBOUND(self):
            return self.getToken(expressParser.HIBOUND, 0)

        def HIINDEX(self):
            return self.getToken(expressParser.HIINDEX, 0)

        def LENGTH(self):
            return self.getToken(expressParser.LENGTH, 0)

        def LOBOUND(self):
            return self.getToken(expressParser.LOBOUND, 0)

        def LOINDEX(self):
            return self.getToken(expressParser.LOINDEX, 0)

        def LOG(self):
            return self.getToken(expressParser.LOG, 0)

        def LOG2(self):
            return self.getToken(expressParser.LOG2, 0)

        def LOG10(self):
            return self.getToken(expressParser.LOG10, 0)

        def NVL(self):
            return self.getToken(expressParser.NVL, 0)

        def ODD(self):
            return self.getToken(expressParser.ODD, 0)

        def ROLESOF(self):
            return self.getToken(expressParser.ROLESOF, 0)

        def SIN(self):
            return self.getToken(expressParser.SIN, 0)

        def SIZEOF(self):
            return self.getToken(expressParser.SIZEOF, 0)

        def SQRT(self):
            return self.getToken(expressParser.SQRT, 0)

        def TAN(self):
            return self.getToken(expressParser.TAN, 0)

        def TYPEOF(self):
            return self.getToken(expressParser.TYPEOF, 0)

        def USEDIN(self):
            return self.getToken(expressParser.USEDIN, 0)

        def VALUE(self):
            return self.getToken(expressParser.VALUE, 0)

        def VALUE_IN(self):
            return self.getToken(expressParser.VALUE_IN, 0)

        def VALUE_UNIQUE(self):
            return self.getToken(expressParser.VALUE_UNIQUE, 0)

        def getRuleIndex(self):
            return expressParser.RULE_built_in_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuilt_in_function" ):
                listener.enterBuilt_in_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuilt_in_function" ):
                listener.exitBuilt_in_function(self)




    def built_in_function(self):

        localctx = expressParser.Built_in_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_built_in_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            _la = self._input.LA(1)
            if not(((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (expressParser.ABS - 30)) | (1 << (expressParser.ACOS - 30)) | (1 << (expressParser.ASIN - 30)) | (1 << (expressParser.ATAN - 30)) | (1 << (expressParser.BLENGTH - 30)) | (1 << (expressParser.COS - 30)) | (1 << (expressParser.EXISTS - 30)) | (1 << (expressParser.EXP - 30)) | (1 << (expressParser.FORMAT - 30)) | (1 << (expressParser.HIBOUND - 30)) | (1 << (expressParser.HIINDEX - 30)) | (1 << (expressParser.LENGTH - 30)) | (1 << (expressParser.LOBOUND - 30)))) != 0) or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (expressParser.LOG - 95)) | (1 << (expressParser.LOG10 - 95)) | (1 << (expressParser.LOG2 - 95)) | (1 << (expressParser.LOINDEX - 95)) | (1 << (expressParser.NVL - 95)) | (1 << (expressParser.ODD - 95)) | (1 << (expressParser.ROLESOF - 95)) | (1 << (expressParser.SIN - 95)) | (1 << (expressParser.SIZEOF - 95)) | (1 << (expressParser.SQRT - 95)) | (1 << (expressParser.TAN - 95)) | (1 << (expressParser.TYPEOF - 95)) | (1 << (expressParser.USEDIN - 95)) | (1 << (expressParser.VALUE - 95)) | (1 << (expressParser.VALUE_IN - 95)) | (1 << (expressParser.VALUE_UNIQUE - 95)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Built_in_procedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSERT(self):
            return self.getToken(expressParser.INSERT, 0)

        def REMOVE(self):
            return self.getToken(expressParser.REMOVE, 0)

        def getRuleIndex(self):
            return expressParser.RULE_built_in_procedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuilt_in_procedure" ):
                listener.enterBuilt_in_procedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuilt_in_procedure" ):
                listener.exitBuilt_in_procedure(self)




    def built_in_procedure(self):

        localctx = expressParser.Built_in_procedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_built_in_procedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            _la = self._input.LA(1)
            if not(_la==expressParser.INSERT or _la==expressParser.REMOVE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_actionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def case_label(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Case_labelContext)
            else:
                return self.getTypedRuleContext(expressParser.Case_labelContext,i)


        def stmt(self):
            return self.getTypedRuleContext(expressParser.StmtContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_case_action

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_action" ):
                listener.enterCase_action(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_action" ):
                listener.exitCase_action(self)




    def case_action(self):

        localctx = expressParser.Case_actionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_case_action)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.case_label()
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__2:
                self.state = 555
                self.match(expressParser.T__2)
                self.state = 556
                self.case_label()
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 562
            self.match(expressParser.T__8)
            self.state = 563
            self.stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_labelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_case_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_label" ):
                listener.enterCase_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_label" ):
                listener.exitCase_label(self)




    def case_label(self):

        localctx = expressParser.Case_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_case_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(expressParser.CASE, 0)

        def selector(self):
            return self.getTypedRuleContext(expressParser.SelectorContext,0)


        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def END_CASE(self):
            return self.getToken(expressParser.END_CASE, 0)

        def case_action(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Case_actionContext)
            else:
                return self.getTypedRuleContext(expressParser.Case_actionContext,i)


        def OTHERWISE(self):
            return self.getToken(expressParser.OTHERWISE, 0)

        def stmt(self):
            return self.getTypedRuleContext(expressParser.StmtContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_case_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_stmt" ):
                listener.enterCase_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_stmt" ):
                listener.exitCase_stmt(self)




    def case_stmt(self):

        localctx = expressParser.Case_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_case_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(expressParser.CASE)
            self.state = 568
            self.selector()
            self.state = 569
            self.match(expressParser.OF)
            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__1) | (1 << expressParser.T__4) | (1 << expressParser.T__5) | (1 << expressParser.T__6) | (1 << expressParser.T__11) | (1 << expressParser.T__14) | (1 << expressParser.ABS) | (1 << expressParser.ACOS) | (1 << expressParser.ASIN) | (1 << expressParser.ATAN) | (1 << expressParser.BLENGTH) | (1 << expressParser.CONST_E) | (1 << expressParser.COS))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (expressParser.EXISTS - 72)) | (1 << (expressParser.EXP - 72)) | (1 << (expressParser.FALSE - 72)) | (1 << (expressParser.FORMAT - 72)) | (1 << (expressParser.HIBOUND - 72)) | (1 << (expressParser.HIINDEX - 72)) | (1 << (expressParser.LENGTH - 72)) | (1 << (expressParser.LOBOUND - 72)) | (1 << (expressParser.LOG - 72)) | (1 << (expressParser.LOG10 - 72)) | (1 << (expressParser.LOG2 - 72)) | (1 << (expressParser.LOINDEX - 72)) | (1 << (expressParser.NOT - 72)) | (1 << (expressParser.NVL - 72)) | (1 << (expressParser.ODD - 72)) | (1 << (expressParser.PI - 72)) | (1 << (expressParser.QUERY - 72)) | (1 << (expressParser.ROLESOF - 72)) | (1 << (expressParser.SELF - 72)) | (1 << (expressParser.SIN - 72)) | (1 << (expressParser.SIZEOF - 72)) | (1 << (expressParser.SQRT - 72)) | (1 << (expressParser.TAN - 72)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (expressParser.TRUE - 137)) | (1 << (expressParser.TYPEOF - 137)) | (1 << (expressParser.UNKNOWN - 137)) | (1 << (expressParser.USEDIN - 137)) | (1 << (expressParser.VALUE - 137)) | (1 << (expressParser.VALUE_IN - 137)) | (1 << (expressParser.VALUE_UNIQUE - 137)) | (1 << (expressParser.BINARY_LITERAL - 137)) | (1 << (expressParser.ENCODED_STRING_LITERAL - 137)) | (1 << (expressParser.INTEGER_LITERAL - 137)) | (1 << (expressParser.REAL_LITERAL - 137)) | (1 << (expressParser.SIMPLE_ID - 137)) | (1 << (expressParser.SIMPLE_STRING_LITERAL - 137)))) != 0):
                self.state = 570
                self.case_action()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.OTHERWISE:
                self.state = 576
                self.match(expressParser.OTHERWISE)
                self.state = 577
                self.match(expressParser.T__8)
                self.state = 578
                self.stmt()


            self.state = 581
            self.match(expressParser.END_CASE)
            self.state = 582
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(expressParser.BEGIN, 0)

        def END(self):
            return self.getToken(expressParser.END, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.StmtContext)
            else:
                return self.getTypedRuleContext(expressParser.StmtContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)




    def compound_stmt(self):

        localctx = expressParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_compound_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(expressParser.BEGIN)
            self.state = 586 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 585
                self.stmt()
                self.state = 588 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__0) | (1 << expressParser.ALIAS) | (1 << expressParser.BEGIN) | (1 << expressParser.CASE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (expressParser.ESCAPE - 71)) | (1 << (expressParser.IF - 71)) | (1 << (expressParser.INSERT - 71)) | (1 << (expressParser.REMOVE - 71)) | (1 << (expressParser.REPEAT - 71)) | (1 << (expressParser.RETURN - 71)) | (1 << (expressParser.SKIP_ - 71)))) != 0) or _la==expressParser.SIMPLE_ID):
                    break

            self.state = 590
            self.match(expressParser.END)
            self.state = 591
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Concrete_typesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregation_types(self):
            return self.getTypedRuleContext(expressParser.Aggregation_typesContext,0)


        def simple_types(self):
            return self.getTypedRuleContext(expressParser.Simple_typesContext,0)


        def type_ref(self):
            return self.getTypedRuleContext(expressParser.Type_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_concrete_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcrete_types" ):
                listener.enterConcrete_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcrete_types" ):
                listener.exitConcrete_types(self)




    def concrete_types(self):

        localctx = expressParser.Concrete_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_concrete_types)
        try:
            self.state = 596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.ARRAY, expressParser.BAG, expressParser.LIST, expressParser.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 593
                self.aggregation_types()
                pass
            elif token in [expressParser.BINARY, expressParser.BOOLEAN, expressParser.INTEGER, expressParser.LOGICAL, expressParser.NUMBER, expressParser.REAL, expressParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 594
                self.simple_types()
                pass
            elif token in [expressParser.SIMPLE_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 595
                self.type_ref()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_id(self):
            return self.getTypedRuleContext(expressParser.Constant_idContext,0)


        def instantiable_type(self):
            return self.getTypedRuleContext(expressParser.Instantiable_typeContext,0)


        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_constant_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_body" ):
                listener.enterConstant_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_body" ):
                listener.exitConstant_body(self)




    def constant_body(self):

        localctx = expressParser.Constant_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_constant_body)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.constant_id()
            self.state = 599
            self.match(expressParser.T__8)
            self.state = 600
            self.instantiable_type()
            self.state = 601
            self.match(expressParser.T__9)
            self.state = 602
            self.expression()
            self.state = 603
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTANT(self):
            return self.getToken(expressParser.CONSTANT, 0)

        def END_CONSTANT(self):
            return self.getToken(expressParser.END_CONSTANT, 0)

        def constant_body(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Constant_bodyContext)
            else:
                return self.getTypedRuleContext(expressParser.Constant_bodyContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_constant_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_decl" ):
                listener.enterConstant_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_decl" ):
                listener.exitConstant_decl(self)




    def constant_decl(self):

        localctx = expressParser.Constant_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_constant_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(expressParser.CONSTANT)
            self.state = 607 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 606
                self.constant_body()
                self.state = 609 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==expressParser.SIMPLE_ID):
                    break

            self.state = 611
            self.match(expressParser.END_CONSTANT)
            self.state = 612
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def built_in_constant(self):
            return self.getTypedRuleContext(expressParser.Built_in_constantContext,0)


        def constant_ref(self):
            return self.getTypedRuleContext(expressParser.Constant_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_constant_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_factor" ):
                listener.enterConstant_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_factor" ):
                listener.exitConstant_factor(self)




    def constant_factor(self):

        localctx = expressParser.Constant_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_constant_factor)
        try:
            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.T__11, expressParser.CONST_E, expressParser.PI, expressParser.SELF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 614
                self.built_in_constant()
                pass
            elif token in [expressParser.SIMPLE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 615
                self.constant_ref()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constant_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_constant_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant_id" ):
                listener.enterConstant_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant_id" ):
                listener.exitConstant_id(self)




    def constant_id(self):

        localctx = expressParser.Constant_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_constant_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Constructed_typesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeration_type(self):
            return self.getTypedRuleContext(expressParser.Enumeration_typeContext,0)


        def select_type(self):
            return self.getTypedRuleContext(expressParser.Select_typeContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_constructed_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructed_types" ):
                listener.enterConstructed_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructed_types" ):
                listener.exitConstructed_types(self)




    def constructed_types(self):

        localctx = expressParser.Constructed_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_constructed_types)
        try:
            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 620
                self.enumeration_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 621
                self.select_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entity_decl(self):
            return self.getTypedRuleContext(expressParser.Entity_declContext,0)


        def function_decl(self):
            return self.getTypedRuleContext(expressParser.Function_declContext,0)


        def procedure_decl(self):
            return self.getTypedRuleContext(expressParser.Procedure_declContext,0)


        def subtype_constraint_decl(self):
            return self.getTypedRuleContext(expressParser.Subtype_constraint_declContext,0)


        def type_decl(self):
            return self.getTypedRuleContext(expressParser.Type_declContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = expressParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_declaration)
        try:
            self.state = 629
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.ENTITY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self.entity_decl()
                pass
            elif token in [expressParser.FUNCTION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.function_decl()
                pass
            elif token in [expressParser.PROCEDURE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 626
                self.procedure_decl()
                pass
            elif token in [expressParser.SUBTYPE_CONSTRAINT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 627
                self.subtype_constraint_decl()
                pass
            elif token in [expressParser.TYPE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 628
                self.type_decl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derived_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_decl(self):
            return self.getTypedRuleContext(expressParser.Attribute_declContext,0)


        def parameter_type(self):
            return self.getTypedRuleContext(expressParser.Parameter_typeContext,0)


        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_derived_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerived_attr" ):
                listener.enterDerived_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerived_attr" ):
                listener.exitDerived_attr(self)




    def derived_attr(self):

        localctx = expressParser.Derived_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_derived_attr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self.attribute_decl()
            self.state = 632
            self.match(expressParser.T__8)
            self.state = 633
            self.parameter_type()
            self.state = 634
            self.match(expressParser.T__9)
            self.state = 635
            self.expression()
            self.state = 636
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Derive_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DERIVE(self):
            return self.getToken(expressParser.DERIVE, 0)

        def derived_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Derived_attrContext)
            else:
                return self.getTypedRuleContext(expressParser.Derived_attrContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_derive_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDerive_clause" ):
                listener.enterDerive_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDerive_clause" ):
                listener.exitDerive_clause(self)




    def derive_clause(self):

        localctx = expressParser.Derive_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_derive_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(expressParser.DERIVE)
            self.state = 640 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 639
                self.derived_attr()
                self.state = 642 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==expressParser.SELF or _la==expressParser.SIMPLE_ID):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Domain_ruleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def rule_label_id(self):
            return self.getTypedRuleContext(expressParser.Rule_label_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_domain_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDomain_rule" ):
                listener.enterDomain_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDomain_rule" ):
                listener.exitDomain_rule(self)




    def domain_rule(self):

        localctx = expressParser.Domain_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_domain_rule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 644
                self.rule_label_id()
                self.state = 645
                self.match(expressParser.T__8)


            self.state = 649
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def repetition(self):
            return self.getTypedRuleContext(expressParser.RepetitionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement" ):
                listener.enterElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement" ):
                listener.exitElement(self)




    def element(self):

        localctx = expressParser.ElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_element)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.expression()
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__8:
                self.state = 652
                self.match(expressParser.T__8)
                self.state = 653
                self.repetition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def explicit_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Explicit_attrContext)
            else:
                return self.getTypedRuleContext(expressParser.Explicit_attrContext,i)


        def derive_clause(self):
            return self.getTypedRuleContext(expressParser.Derive_clauseContext,0)


        def inverse_clause(self):
            return self.getTypedRuleContext(expressParser.Inverse_clauseContext,0)


        def unique_clause(self):
            return self.getTypedRuleContext(expressParser.Unique_clauseContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(expressParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_entity_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_body" ):
                listener.enterEntity_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_body" ):
                listener.exitEntity_body(self)




    def entity_body(self):

        localctx = expressParser.Entity_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_entity_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.SELF or _la==expressParser.SIMPLE_ID:
                self.state = 656
                self.explicit_attr()
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.DERIVE:
                self.state = 662
                self.derive_clause()


            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.INVERSE:
                self.state = 665
                self.inverse_clause()


            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.UNIQUE:
                self.state = 668
                self.unique_clause()


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.WHERE:
                self.state = 671
                self.where_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entity_ref(self):
            return self.getTypedRuleContext(expressParser.Entity_refContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(expressParser.ExpressionContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_entity_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_constructor" ):
                listener.enterEntity_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_constructor" ):
                listener.exitEntity_constructor(self)




    def entity_constructor(self):

        localctx = expressParser.Entity_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_entity_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.entity_ref()
            self.state = 675
            self.match(expressParser.T__1)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__1) | (1 << expressParser.T__4) | (1 << expressParser.T__5) | (1 << expressParser.T__6) | (1 << expressParser.T__11) | (1 << expressParser.T__14) | (1 << expressParser.ABS) | (1 << expressParser.ACOS) | (1 << expressParser.ASIN) | (1 << expressParser.ATAN) | (1 << expressParser.BLENGTH) | (1 << expressParser.CONST_E) | (1 << expressParser.COS))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (expressParser.EXISTS - 72)) | (1 << (expressParser.EXP - 72)) | (1 << (expressParser.FALSE - 72)) | (1 << (expressParser.FORMAT - 72)) | (1 << (expressParser.HIBOUND - 72)) | (1 << (expressParser.HIINDEX - 72)) | (1 << (expressParser.LENGTH - 72)) | (1 << (expressParser.LOBOUND - 72)) | (1 << (expressParser.LOG - 72)) | (1 << (expressParser.LOG10 - 72)) | (1 << (expressParser.LOG2 - 72)) | (1 << (expressParser.LOINDEX - 72)) | (1 << (expressParser.NOT - 72)) | (1 << (expressParser.NVL - 72)) | (1 << (expressParser.ODD - 72)) | (1 << (expressParser.PI - 72)) | (1 << (expressParser.QUERY - 72)) | (1 << (expressParser.ROLESOF - 72)) | (1 << (expressParser.SELF - 72)) | (1 << (expressParser.SIN - 72)) | (1 << (expressParser.SIZEOF - 72)) | (1 << (expressParser.SQRT - 72)) | (1 << (expressParser.TAN - 72)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (expressParser.TRUE - 137)) | (1 << (expressParser.TYPEOF - 137)) | (1 << (expressParser.UNKNOWN - 137)) | (1 << (expressParser.USEDIN - 137)) | (1 << (expressParser.VALUE - 137)) | (1 << (expressParser.VALUE_IN - 137)) | (1 << (expressParser.VALUE_UNIQUE - 137)) | (1 << (expressParser.BINARY_LITERAL - 137)) | (1 << (expressParser.ENCODED_STRING_LITERAL - 137)) | (1 << (expressParser.INTEGER_LITERAL - 137)) | (1 << (expressParser.REAL_LITERAL - 137)) | (1 << (expressParser.SIMPLE_ID - 137)) | (1 << (expressParser.SIMPLE_STRING_LITERAL - 137)))) != 0):
                self.state = 676
                self.expression()
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==expressParser.T__2:
                    self.state = 677
                    self.match(expressParser.T__2)
                    self.state = 678
                    self.expression()
                    self.state = 683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 686
            self.match(expressParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entity_head(self):
            return self.getTypedRuleContext(expressParser.Entity_headContext,0)


        def entity_body(self):
            return self.getTypedRuleContext(expressParser.Entity_bodyContext,0)


        def END_ENTITY(self):
            return self.getToken(expressParser.END_ENTITY, 0)

        def getRuleIndex(self):
            return expressParser.RULE_entity_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_decl" ):
                listener.enterEntity_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_decl" ):
                listener.exitEntity_decl(self)




    def entity_decl(self):

        localctx = expressParser.Entity_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_entity_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.entity_head()
            self.state = 689
            self.entity_body()
            self.state = 690
            self.match(expressParser.END_ENTITY)
            self.state = 691
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENTITY(self):
            return self.getToken(expressParser.ENTITY, 0)

        def entity_id(self):
            return self.getTypedRuleContext(expressParser.Entity_idContext,0)


        def subsuper(self):
            return self.getTypedRuleContext(expressParser.SubsuperContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_entity_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_head" ):
                listener.enterEntity_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_head" ):
                listener.exitEntity_head(self)




    def entity_head(self):

        localctx = expressParser.Entity_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_entity_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(expressParser.ENTITY)
            self.state = 694
            self.entity_id()
            self.state = 695
            self.subsuper()
            self.state = 696
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entity_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_entity_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntity_id" ):
                listener.enterEntity_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntity_id" ):
                listener.exitEntity_id(self)




    def entity_id(self):

        localctx = expressParser.Entity_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_entity_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enumeration_extensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASED_ON(self):
            return self.getToken(expressParser.BASED_ON, 0)

        def type_ref(self):
            return self.getTypedRuleContext(expressParser.Type_refContext,0)


        def WITH(self):
            return self.getToken(expressParser.WITH, 0)

        def enumeration_items(self):
            return self.getTypedRuleContext(expressParser.Enumeration_itemsContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_enumeration_extension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeration_extension" ):
                listener.enterEnumeration_extension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeration_extension" ):
                listener.exitEnumeration_extension(self)




    def enumeration_extension(self):

        localctx = expressParser.Enumeration_extensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_enumeration_extension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(expressParser.BASED_ON)
            self.state = 701
            self.type_ref()
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.WITH:
                self.state = 702
                self.match(expressParser.WITH)
                self.state = 703
                self.enumeration_items()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enumeration_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_enumeration_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeration_id" ):
                listener.enterEnumeration_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeration_id" ):
                listener.exitEnumeration_id(self)




    def enumeration_id(self):

        localctx = expressParser.Enumeration_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_enumeration_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 706
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enumeration_itemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeration_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Enumeration_idContext)
            else:
                return self.getTypedRuleContext(expressParser.Enumeration_idContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_enumeration_items

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeration_items" ):
                listener.enterEnumeration_items(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeration_items" ):
                listener.exitEnumeration_items(self)




    def enumeration_items(self):

        localctx = expressParser.Enumeration_itemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_enumeration_items)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(expressParser.T__1)
            self.state = 709
            self.enumeration_id()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__2:
                self.state = 710
                self.match(expressParser.T__2)
                self.state = 711
                self.enumeration_id()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 717
            self.match(expressParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enumeration_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeration_ref(self):
            return self.getTypedRuleContext(expressParser.Enumeration_refContext,0)


        def type_ref(self):
            return self.getTypedRuleContext(expressParser.Type_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_enumeration_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeration_reference" ):
                listener.enterEnumeration_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeration_reference" ):
                listener.exitEnumeration_reference(self)




    def enumeration_reference(self):

        localctx = expressParser.Enumeration_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_enumeration_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 719
                self.type_ref()
                self.state = 720
                self.match(expressParser.T__10)


            self.state = 724
            self.enumeration_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Enumeration_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUMERATION(self):
            return self.getToken(expressParser.ENUMERATION, 0)

        def EXTENSIBLE(self):
            return self.getToken(expressParser.EXTENSIBLE, 0)

        def enumeration_extension(self):
            return self.getTypedRuleContext(expressParser.Enumeration_extensionContext,0)


        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def enumeration_items(self):
            return self.getTypedRuleContext(expressParser.Enumeration_itemsContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_enumeration_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeration_type" ):
                listener.enterEnumeration_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeration_type" ):
                listener.exitEnumeration_type(self)




    def enumeration_type(self):

        localctx = expressParser.Enumeration_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_enumeration_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.EXTENSIBLE:
                self.state = 726
                self.match(expressParser.EXTENSIBLE)


            self.state = 729
            self.match(expressParser.ENUMERATION)
            self.state = 733
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.OF]:
                self.state = 730
                self.match(expressParser.OF)
                self.state = 731
                self.enumeration_items()
                pass
            elif token in [expressParser.BASED_ON]:
                self.state = 732
                self.enumeration_extension()
                pass
            elif token in [expressParser.T__0]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Escape_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ESCAPE(self):
            return self.getToken(expressParser.ESCAPE, 0)

        def getRuleIndex(self):
            return expressParser.RULE_escape_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEscape_stmt" ):
                listener.enterEscape_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEscape_stmt" ):
                listener.exitEscape_stmt(self)




    def escape_stmt(self):

        localctx = expressParser.Escape_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_escape_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(expressParser.ESCAPE)
            self.state = 736
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Attribute_declContext)
            else:
                return self.getTypedRuleContext(expressParser.Attribute_declContext,i)


        def parameter_type(self):
            return self.getTypedRuleContext(expressParser.Parameter_typeContext,0)


        def OPTIONAL(self):
            return self.getToken(expressParser.OPTIONAL, 0)

        def getRuleIndex(self):
            return expressParser.RULE_explicit_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_attr" ):
                listener.enterExplicit_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_attr" ):
                listener.exitExplicit_attr(self)




    def explicit_attr(self):

        localctx = expressParser.Explicit_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_explicit_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 738
            self.attribute_decl()
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__2:
                self.state = 739
                self.match(expressParser.T__2)
                self.state = 740
                self.attribute_decl()


            self.state = 743
            self.match(expressParser.T__8)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.OPTIONAL:
                self.state = 744
                self.match(expressParser.OPTIONAL)


            self.state = 747
            self.parameter_type()
            self.state = 748
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Simple_expressionContext)
            else:
                return self.getTypedRuleContext(expressParser.Simple_expressionContext,i)


        def rel_op_extended(self):
            return self.getTypedRuleContext(expressParser.Rel_op_extendedContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = expressParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 750
            self.simple_expression()
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__16) | (1 << expressParser.T__17) | (1 << expressParser.T__23) | (1 << expressParser.T__24) | (1 << expressParser.T__25) | (1 << expressParser.T__26) | (1 << expressParser.T__27) | (1 << expressParser.T__28))) != 0) or _la==expressParser.IN or _la==expressParser.LIKE:
                self.state = 751
                self.rel_op_extended()
                self.state = 752
                self.simple_expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Simple_factorContext)
            else:
                return self.getTypedRuleContext(expressParser.Simple_factorContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = expressParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.simple_factor()
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__12:
                self.state = 757
                self.match(expressParser.T__12)
                self.state = 758
                self.simple_factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Formal_parameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Parameter_idContext)
            else:
                return self.getTypedRuleContext(expressParser.Parameter_idContext,i)


        def parameter_type(self):
            return self.getTypedRuleContext(expressParser.Parameter_typeContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_formal_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormal_parameter" ):
                listener.enterFormal_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormal_parameter" ):
                listener.exitFormal_parameter(self)




    def formal_parameter(self):

        localctx = expressParser.Formal_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_formal_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.parameter_id()
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__2:
                self.state = 762
                self.match(expressParser.T__2)
                self.state = 763
                self.parameter_id()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 769
            self.match(expressParser.T__8)
            self.state = 770
            self.parameter_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def built_in_function(self):
            return self.getTypedRuleContext(expressParser.Built_in_functionContext,0)


        def function_ref(self):
            return self.getTypedRuleContext(expressParser.Function_refContext,0)


        def actual_parameter_list(self):
            return self.getTypedRuleContext(expressParser.Actual_parameter_listContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_function_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_call" ):
                listener.enterFunction_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_call" ):
                listener.exitFunction_call(self)




    def function_call(self):

        localctx = expressParser.Function_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_function_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.ABS, expressParser.ACOS, expressParser.ASIN, expressParser.ATAN, expressParser.BLENGTH, expressParser.COS, expressParser.EXISTS, expressParser.EXP, expressParser.FORMAT, expressParser.HIBOUND, expressParser.HIINDEX, expressParser.LENGTH, expressParser.LOBOUND, expressParser.LOG, expressParser.LOG10, expressParser.LOG2, expressParser.LOINDEX, expressParser.NVL, expressParser.ODD, expressParser.ROLESOF, expressParser.SIN, expressParser.SIZEOF, expressParser.SQRT, expressParser.TAN, expressParser.TYPEOF, expressParser.USEDIN, expressParser.VALUE, expressParser.VALUE_IN, expressParser.VALUE_UNIQUE]:
                self.state = 772
                self.built_in_function()
                pass
            elif token in [expressParser.SIMPLE_ID]:
                self.state = 773
                self.function_ref()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__1:
                self.state = 776
                self.actual_parameter_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_head(self):
            return self.getTypedRuleContext(expressParser.Function_headContext,0)


        def algorithm_head(self):
            return self.getTypedRuleContext(expressParser.Algorithm_headContext,0)


        def END_FUNCTION(self):
            return self.getToken(expressParser.END_FUNCTION, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.StmtContext)
            else:
                return self.getTypedRuleContext(expressParser.StmtContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_function_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_decl" ):
                listener.enterFunction_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_decl" ):
                listener.exitFunction_decl(self)




    def function_decl(self):

        localctx = expressParser.Function_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_function_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.function_head()
            self.state = 780
            self.algorithm_head()
            self.state = 782 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 781
                self.stmt()
                self.state = 784 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__0) | (1 << expressParser.ALIAS) | (1 << expressParser.BEGIN) | (1 << expressParser.CASE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (expressParser.ESCAPE - 71)) | (1 << (expressParser.IF - 71)) | (1 << (expressParser.INSERT - 71)) | (1 << (expressParser.REMOVE - 71)) | (1 << (expressParser.REPEAT - 71)) | (1 << (expressParser.RETURN - 71)) | (1 << (expressParser.SKIP_ - 71)))) != 0) or _la==expressParser.SIMPLE_ID):
                    break

            self.state = 786
            self.match(expressParser.END_FUNCTION)
            self.state = 787
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(expressParser.FUNCTION, 0)

        def function_id(self):
            return self.getTypedRuleContext(expressParser.Function_idContext,0)


        def parameter_type(self):
            return self.getTypedRuleContext(expressParser.Parameter_typeContext,0)


        def formal_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Formal_parameterContext)
            else:
                return self.getTypedRuleContext(expressParser.Formal_parameterContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_function_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_head" ):
                listener.enterFunction_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_head" ):
                listener.exitFunction_head(self)




    def function_head(self):

        localctx = expressParser.Function_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_function_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(expressParser.FUNCTION)
            self.state = 790
            self.function_id()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__1:
                self.state = 791
                self.match(expressParser.T__1)
                self.state = 792
                self.formal_parameter()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==expressParser.T__0:
                    self.state = 793
                    self.match(expressParser.T__0)
                    self.state = 794
                    self.formal_parameter()
                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 800
                self.match(expressParser.T__3)


            self.state = 804
            self.match(expressParser.T__8)
            self.state = 805
            self.parameter_type()
            self.state = 806
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_function_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_id" ):
                listener.enterFunction_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_id" ):
                listener.exitFunction_id(self)




    def function_id(self):

        localctx = expressParser.Function_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_function_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generalized_typesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_type(self):
            return self.getTypedRuleContext(expressParser.Aggregate_typeContext,0)


        def general_aggregation_types(self):
            return self.getTypedRuleContext(expressParser.General_aggregation_typesContext,0)


        def generic_entity_type(self):
            return self.getTypedRuleContext(expressParser.Generic_entity_typeContext,0)


        def generic_type(self):
            return self.getTypedRuleContext(expressParser.Generic_typeContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_generalized_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneralized_types" ):
                listener.enterGeneralized_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneralized_types" ):
                listener.exitGeneralized_types(self)




    def generalized_types(self):

        localctx = expressParser.Generalized_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_generalized_types)
        try:
            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.AGGREGATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.aggregate_type()
                pass
            elif token in [expressParser.ARRAY, expressParser.BAG, expressParser.LIST, expressParser.SET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.general_aggregation_types()
                pass
            elif token in [expressParser.GENERIC_ENTITY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 812
                self.generic_entity_type()
                pass
            elif token in [expressParser.GENERIC]:
                self.enterOuterAlt(localctx, 4)
                self.state = 813
                self.generic_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_aggregation_typesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def general_array_type(self):
            return self.getTypedRuleContext(expressParser.General_array_typeContext,0)


        def general_bag_type(self):
            return self.getTypedRuleContext(expressParser.General_bag_typeContext,0)


        def general_list_type(self):
            return self.getTypedRuleContext(expressParser.General_list_typeContext,0)


        def general_set_type(self):
            return self.getTypedRuleContext(expressParser.General_set_typeContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_general_aggregation_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_aggregation_types" ):
                listener.enterGeneral_aggregation_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_aggregation_types" ):
                listener.exitGeneral_aggregation_types(self)




    def general_aggregation_types(self):

        localctx = expressParser.General_aggregation_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_general_aggregation_types)
        try:
            self.state = 820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.ARRAY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 816
                self.general_array_type()
                pass
            elif token in [expressParser.BAG]:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.general_bag_type()
                pass
            elif token in [expressParser.LIST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 818
                self.general_list_type()
                pass
            elif token in [expressParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 819
                self.general_set_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_array_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARRAY(self):
            return self.getToken(expressParser.ARRAY, 0)

        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def parameter_type(self):
            return self.getTypedRuleContext(expressParser.Parameter_typeContext,0)


        def bound_spec(self):
            return self.getTypedRuleContext(expressParser.Bound_specContext,0)


        def OPTIONAL(self):
            return self.getToken(expressParser.OPTIONAL, 0)

        def UNIQUE(self):
            return self.getToken(expressParser.UNIQUE, 0)

        def getRuleIndex(self):
            return expressParser.RULE_general_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_array_type" ):
                listener.enterGeneral_array_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_array_type" ):
                listener.exitGeneral_array_type(self)




    def general_array_type(self):

        localctx = expressParser.General_array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_general_array_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(expressParser.ARRAY)
            self.state = 824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__6:
                self.state = 823
                self.bound_spec()


            self.state = 826
            self.match(expressParser.OF)
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.OPTIONAL:
                self.state = 827
                self.match(expressParser.OPTIONAL)


            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.UNIQUE:
                self.state = 830
                self.match(expressParser.UNIQUE)


            self.state = 833
            self.parameter_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_bag_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BAG(self):
            return self.getToken(expressParser.BAG, 0)

        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def parameter_type(self):
            return self.getTypedRuleContext(expressParser.Parameter_typeContext,0)


        def bound_spec(self):
            return self.getTypedRuleContext(expressParser.Bound_specContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_general_bag_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_bag_type" ):
                listener.enterGeneral_bag_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_bag_type" ):
                listener.exitGeneral_bag_type(self)




    def general_bag_type(self):

        localctx = expressParser.General_bag_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_general_bag_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(expressParser.BAG)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__6:
                self.state = 836
                self.bound_spec()


            self.state = 839
            self.match(expressParser.OF)
            self.state = 840
            self.parameter_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_list_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIST(self):
            return self.getToken(expressParser.LIST, 0)

        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def parameter_type(self):
            return self.getTypedRuleContext(expressParser.Parameter_typeContext,0)


        def bound_spec(self):
            return self.getTypedRuleContext(expressParser.Bound_specContext,0)


        def UNIQUE(self):
            return self.getToken(expressParser.UNIQUE, 0)

        def getRuleIndex(self):
            return expressParser.RULE_general_list_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_list_type" ):
                listener.enterGeneral_list_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_list_type" ):
                listener.exitGeneral_list_type(self)




    def general_list_type(self):

        localctx = expressParser.General_list_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_general_list_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(expressParser.LIST)
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__6:
                self.state = 843
                self.bound_spec()


            self.state = 846
            self.match(expressParser.OF)
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.UNIQUE:
                self.state = 847
                self.match(expressParser.UNIQUE)


            self.state = 850
            self.parameter_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_ref(self):
            return self.getTypedRuleContext(expressParser.Parameter_refContext,0)


        def variable_ref(self):
            return self.getTypedRuleContext(expressParser.Variable_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_general_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_ref" ):
                listener.enterGeneral_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_ref" ):
                listener.exitGeneral_ref(self)




    def general_ref(self):

        localctx = expressParser.General_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_general_ref)
        try:
            self.state = 854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 852
                self.parameter_ref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 853
                self.variable_ref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_set_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(expressParser.SET, 0)

        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def parameter_type(self):
            return self.getTypedRuleContext(expressParser.Parameter_typeContext,0)


        def bound_spec(self):
            return self.getTypedRuleContext(expressParser.Bound_specContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_general_set_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_set_type" ):
                listener.enterGeneral_set_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_set_type" ):
                listener.exitGeneral_set_type(self)




    def general_set_type(self):

        localctx = expressParser.General_set_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_general_set_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(expressParser.SET)
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__6:
                self.state = 857
                self.bound_spec()


            self.state = 860
            self.match(expressParser.OF)
            self.state = 861
            self.parameter_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_entity_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERIC_ENTITY(self):
            return self.getToken(expressParser.GENERIC_ENTITY, 0)

        def type_label(self):
            return self.getTypedRuleContext(expressParser.Type_labelContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_generic_entity_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_entity_type" ):
                listener.enterGeneric_entity_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_entity_type" ):
                listener.exitGeneric_entity_type(self)




    def generic_entity_type(self):

        localctx = expressParser.Generic_entity_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_generic_entity_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(expressParser.GENERIC_ENTITY)
            self.state = 866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__8:
                self.state = 864
                self.match(expressParser.T__8)
                self.state = 865
                self.type_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Generic_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GENERIC(self):
            return self.getToken(expressParser.GENERIC, 0)

        def type_label(self):
            return self.getTypedRuleContext(expressParser.Type_labelContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_generic_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneric_type" ):
                listener.enterGeneric_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneric_type" ):
                listener.exitGeneric_type(self)




    def generic_type(self):

        localctx = expressParser.Generic_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_generic_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(expressParser.GENERIC)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__8:
                self.state = 869
                self.match(expressParser.T__8)
                self.state = 870
                self.type_label()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entity_ref(self):
            return self.getTypedRuleContext(expressParser.Entity_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_group_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_qualifier" ):
                listener.enterGroup_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_qualifier" ):
                listener.exitGroup_qualifier(self)




    def group_qualifier(self):

        localctx = expressParser.Group_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_group_qualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(expressParser.T__13)
            self.state = 874
            self.entity_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(expressParser.IF, 0)

        def logical_expression(self):
            return self.getTypedRuleContext(expressParser.Logical_expressionContext,0)


        def THEN(self):
            return self.getToken(expressParser.THEN, 0)

        def END_IF(self):
            return self.getToken(expressParser.END_IF, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.StmtContext)
            else:
                return self.getTypedRuleContext(expressParser.StmtContext,i)


        def ELSE(self):
            return self.getToken(expressParser.ELSE, 0)

        def getRuleIndex(self):
            return expressParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)




    def if_stmt(self):

        localctx = expressParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(expressParser.IF)
            self.state = 877
            self.logical_expression()
            self.state = 878
            self.match(expressParser.THEN)
            self.state = 880 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 879
                self.stmt()
                self.state = 882 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__0) | (1 << expressParser.ALIAS) | (1 << expressParser.BEGIN) | (1 << expressParser.CASE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (expressParser.ESCAPE - 71)) | (1 << (expressParser.IF - 71)) | (1 << (expressParser.INSERT - 71)) | (1 << (expressParser.REMOVE - 71)) | (1 << (expressParser.REPEAT - 71)) | (1 << (expressParser.RETURN - 71)) | (1 << (expressParser.SKIP_ - 71)))) != 0) or _la==expressParser.SIMPLE_ID):
                    break

            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.ELSE:
                self.state = 884
                self.match(expressParser.ELSE)
                self.state = 886 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 885
                    self.stmt()
                    self.state = 888 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__0) | (1 << expressParser.ALIAS) | (1 << expressParser.BEGIN) | (1 << expressParser.CASE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (expressParser.ESCAPE - 71)) | (1 << (expressParser.IF - 71)) | (1 << (expressParser.INSERT - 71)) | (1 << (expressParser.REMOVE - 71)) | (1 << (expressParser.REPEAT - 71)) | (1 << (expressParser.RETURN - 71)) | (1 << (expressParser.SKIP_ - 71)))) != 0) or _la==expressParser.SIMPLE_ID):
                        break



            self.state = 892
            self.match(expressParser.END_IF)
            self.state = 893
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IncrementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_expression(self):
            return self.getTypedRuleContext(expressParser.Numeric_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_increment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncrement" ):
                listener.enterIncrement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncrement" ):
                listener.exitIncrement(self)




    def increment(self):

        localctx = expressParser.IncrementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_increment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.numeric_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Increment_controlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_id(self):
            return self.getTypedRuleContext(expressParser.Variable_idContext,0)


        def bound_1(self):
            return self.getTypedRuleContext(expressParser.Bound_1Context,0)


        def TO(self):
            return self.getToken(expressParser.TO, 0)

        def bound_2(self):
            return self.getTypedRuleContext(expressParser.Bound_2Context,0)


        def BY(self):
            return self.getToken(expressParser.BY, 0)

        def increment(self):
            return self.getTypedRuleContext(expressParser.IncrementContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_increment_control

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncrement_control" ):
                listener.enterIncrement_control(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncrement_control" ):
                listener.exitIncrement_control(self)




    def increment_control(self):

        localctx = expressParser.Increment_controlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_increment_control)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.variable_id()
            self.state = 898
            self.match(expressParser.T__9)
            self.state = 899
            self.bound_1()
            self.state = 900
            self.match(expressParser.TO)
            self.state = 901
            self.bound_2()
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.BY:
                self.state = 902
                self.match(expressParser.BY)
                self.state = 903
                self.increment()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_expression(self):
            return self.getTypedRuleContext(expressParser.Numeric_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex" ):
                listener.enterIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex" ):
                listener.exitIndex(self)




    def index(self):

        localctx = expressParser.IndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.numeric_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_1Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index(self):
            return self.getTypedRuleContext(expressParser.IndexContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_index_1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_1" ):
                listener.enterIndex_1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_1" ):
                listener.exitIndex_1(self)




    def index_1(self):

        localctx = expressParser.Index_1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_index_1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_2Context(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index(self):
            return self.getTypedRuleContext(expressParser.IndexContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_index_2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_2" ):
                listener.enterIndex_2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_2" ):
                listener.exitIndex_2(self)




    def index_2(self):

        localctx = expressParser.Index_2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_index_2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.index()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def index_1(self):
            return self.getTypedRuleContext(expressParser.Index_1Context,0)


        def index_2(self):
            return self.getTypedRuleContext(expressParser.Index_2Context,0)


        def getRuleIndex(self):
            return expressParser.RULE_index_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_qualifier" ):
                listener.enterIndex_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_qualifier" ):
                listener.exitIndex_qualifier(self)




    def index_qualifier(self):

        localctx = expressParser.Index_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_index_qualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(expressParser.T__6)
            self.state = 913
            self.index_1()
            self.state = 916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__8:
                self.state = 914
                self.match(expressParser.T__8)
                self.state = 915
                self.index_2()


            self.state = 918
            self.match(expressParser.T__7)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Instantiable_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concrete_types(self):
            return self.getTypedRuleContext(expressParser.Concrete_typesContext,0)


        def entity_ref(self):
            return self.getTypedRuleContext(expressParser.Entity_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_instantiable_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstantiable_type" ):
                listener.enterInstantiable_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstantiable_type" ):
                listener.exitInstantiable_type(self)




    def instantiable_type(self):

        localctx = expressParser.Instantiable_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_instantiable_type)
        try:
            self.state = 922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 920
                self.concrete_types()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 921
                self.entity_ref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(expressParser.INTEGER, 0)

        def getRuleIndex(self):
            return expressParser.RULE_integer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_type" ):
                listener.enterInteger_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_type" ):
                listener.exitInteger_type(self)




    def integer_type(self):

        localctx = expressParser.Integer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_integer_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(expressParser.INTEGER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interface_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_clause(self):
            return self.getTypedRuleContext(expressParser.Reference_clauseContext,0)


        def use_clause(self):
            return self.getTypedRuleContext(expressParser.Use_clauseContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_interface_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterface_specification" ):
                listener.enterInterface_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterface_specification" ):
                listener.exitInterface_specification(self)




    def interface_specification(self):

        localctx = expressParser.Interface_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_interface_specification)
        try:
            self.state = 928
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.REFERENCE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 926
                self.reference_clause()
                pass
            elif token in [expressParser.USE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 927
                self.use_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interval_low(self):
            return self.getTypedRuleContext(expressParser.Interval_lowContext,0)


        def interval_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Interval_opContext)
            else:
                return self.getTypedRuleContext(expressParser.Interval_opContext,i)


        def interval_item(self):
            return self.getTypedRuleContext(expressParser.Interval_itemContext,0)


        def interval_high(self):
            return self.getTypedRuleContext(expressParser.Interval_highContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_interval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval" ):
                listener.enterInterval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval" ):
                listener.exitInterval(self)




    def interval(self):

        localctx = expressParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(expressParser.T__14)
            self.state = 931
            self.interval_low()
            self.state = 932
            self.interval_op()
            self.state = 933
            self.interval_item()
            self.state = 934
            self.interval_op()
            self.state = 935
            self.interval_high()
            self.state = 936
            self.match(expressParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_highContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self):
            return self.getTypedRuleContext(expressParser.Simple_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_interval_high

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_high" ):
                listener.enterInterval_high(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_high" ):
                listener.exitInterval_high(self)




    def interval_high(self):

        localctx = expressParser.Interval_highContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_interval_high)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.simple_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_itemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self):
            return self.getTypedRuleContext(expressParser.Simple_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_interval_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_item" ):
                listener.enterInterval_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_item" ):
                listener.exitInterval_item(self)




    def interval_item(self):

        localctx = expressParser.Interval_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_interval_item)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.simple_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_lowContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self):
            return self.getTypedRuleContext(expressParser.Simple_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_interval_low

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_low" ):
                listener.enterInterval_low(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_low" ):
                listener.exitInterval_low(self)




    def interval_low(self):

        localctx = expressParser.Interval_lowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_interval_low)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.simple_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Interval_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return expressParser.RULE_interval_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterval_op" ):
                listener.enterInterval_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterval_op" ):
                listener.exitInterval_op(self)




    def interval_op(self):

        localctx = expressParser.Interval_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_interval_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            _la = self._input.LA(1)
            if not(_la==expressParser.T__16 or _la==expressParser.T__17):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inverse_attrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_decl(self):
            return self.getTypedRuleContext(expressParser.Attribute_declContext,0)


        def entity_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Entity_refContext)
            else:
                return self.getTypedRuleContext(expressParser.Entity_refContext,i)


        def FOR(self):
            return self.getToken(expressParser.FOR, 0)

        def attribute_ref(self):
            return self.getTypedRuleContext(expressParser.Attribute_refContext,0)


        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def SET(self):
            return self.getToken(expressParser.SET, 0)

        def BAG(self):
            return self.getToken(expressParser.BAG, 0)

        def bound_spec(self):
            return self.getTypedRuleContext(expressParser.Bound_specContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_inverse_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInverse_attr" ):
                listener.enterInverse_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInverse_attr" ):
                listener.exitInverse_attr(self)




    def inverse_attr(self):

        localctx = expressParser.Inverse_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_inverse_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.attribute_decl()
            self.state = 947
            self.match(expressParser.T__8)
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.BAG or _la==expressParser.SET:
                self.state = 948
                _la = self._input.LA(1)
                if not(_la==expressParser.BAG or _la==expressParser.SET):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==expressParser.T__6:
                    self.state = 949
                    self.bound_spec()


                self.state = 952
                self.match(expressParser.OF)


            self.state = 955
            self.entity_ref()
            self.state = 956
            self.match(expressParser.FOR)
            self.state = 960
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 957
                self.entity_ref()
                self.state = 958
                self.match(expressParser.T__10)


            self.state = 962
            self.attribute_ref()
            self.state = 963
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Inverse_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INVERSE(self):
            return self.getToken(expressParser.INVERSE, 0)

        def inverse_attr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Inverse_attrContext)
            else:
                return self.getTypedRuleContext(expressParser.Inverse_attrContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_inverse_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInverse_clause" ):
                listener.enterInverse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInverse_clause" ):
                listener.exitInverse_clause(self)




    def inverse_clause(self):

        localctx = expressParser.Inverse_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_inverse_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(expressParser.INVERSE)
            self.state = 967 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 966
                self.inverse_attr()
                self.state = 969 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==expressParser.SELF or _la==expressParser.SIMPLE_ID):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIST(self):
            return self.getToken(expressParser.LIST, 0)

        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def instantiable_type(self):
            return self.getTypedRuleContext(expressParser.Instantiable_typeContext,0)


        def bound_spec(self):
            return self.getTypedRuleContext(expressParser.Bound_specContext,0)


        def UNIQUE(self):
            return self.getToken(expressParser.UNIQUE, 0)

        def getRuleIndex(self):
            return expressParser.RULE_list_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_type" ):
                listener.enterList_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_type" ):
                listener.exitList_type(self)




    def list_type(self):

        localctx = expressParser.List_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_list_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(expressParser.LIST)
            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__6:
                self.state = 972
                self.bound_spec()


            self.state = 975
            self.match(expressParser.OF)
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.UNIQUE:
                self.state = 976
                self.match(expressParser.UNIQUE)


            self.state = 979
            self.instantiable_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY_LITERAL(self):
            return self.getToken(expressParser.BINARY_LITERAL, 0)

        def logical_literal(self):
            return self.getTypedRuleContext(expressParser.Logical_literalContext,0)


        def REAL_LITERAL(self):
            return self.getToken(expressParser.REAL_LITERAL, 0)

        def INTEGER_LITERAL(self):
            return self.getToken(expressParser.INTEGER_LITERAL, 0)

        def string_literal(self):
            return self.getTypedRuleContext(expressParser.String_literalContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = expressParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_literal)
        try:
            self.state = 986
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.BINARY_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                self.match(expressParser.BINARY_LITERAL)
                pass
            elif token in [expressParser.FALSE, expressParser.TRUE, expressParser.UNKNOWN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.logical_literal()
                pass
            elif token in [expressParser.REAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 983
                self.match(expressParser.REAL_LITERAL)
                pass
            elif token in [expressParser.INTEGER_LITERAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 984
                self.match(expressParser.INTEGER_LITERAL)
                pass
            elif token in [expressParser.ENCODED_STRING_LITERAL, expressParser.SIMPLE_STRING_LITERAL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 985
                self.string_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(expressParser.LOCAL, 0)

        def END_LOCAL(self):
            return self.getToken(expressParser.END_LOCAL, 0)

        def local_variable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Local_variableContext)
            else:
                return self.getTypedRuleContext(expressParser.Local_variableContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_local_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_decl" ):
                listener.enterLocal_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_decl" ):
                listener.exitLocal_decl(self)




    def local_decl(self):

        localctx = expressParser.Local_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_local_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(expressParser.LOCAL)
            self.state = 990 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 989
                self.local_variable()
                self.state = 992 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==expressParser.SIMPLE_ID):
                    break

            self.state = 994
            self.match(expressParser.END_LOCAL)
            self.state = 995
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Local_variableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Variable_idContext)
            else:
                return self.getTypedRuleContext(expressParser.Variable_idContext,i)


        def parameter_type(self):
            return self.getTypedRuleContext(expressParser.Parameter_typeContext,0)


        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_local_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocal_variable" ):
                listener.enterLocal_variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocal_variable" ):
                listener.exitLocal_variable(self)




    def local_variable(self):

        localctx = expressParser.Local_variableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_local_variable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.variable_id()
            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__2:
                self.state = 998
                self.match(expressParser.T__2)
                self.state = 999
                self.variable_id()
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1005
            self.match(expressParser.T__8)
            self.state = 1006
            self.parameter_type()
            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__9:
                self.state = 1007
                self.match(expressParser.T__9)
                self.state = 1008
                self.expression()


            self.state = 1011
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_logical_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_expression" ):
                listener.enterLogical_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_expression" ):
                listener.exitLogical_expression(self)




    def logical_expression(self):

        localctx = expressParser.Logical_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_logical_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1013
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FALSE(self):
            return self.getToken(expressParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(expressParser.TRUE, 0)

        def UNKNOWN(self):
            return self.getToken(expressParser.UNKNOWN, 0)

        def getRuleIndex(self):
            return expressParser.RULE_logical_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_literal" ):
                listener.enterLogical_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_literal" ):
                listener.exitLogical_literal(self)




    def logical_literal(self):

        localctx = expressParser.Logical_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_logical_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            _la = self._input.LA(1)
            if not(_la==expressParser.FALSE or _la==expressParser.TRUE or _la==expressParser.UNKNOWN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOGICAL(self):
            return self.getToken(expressParser.LOGICAL, 0)

        def getRuleIndex(self):
            return expressParser.RULE_logical_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_type" ):
                listener.enterLogical_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_type" ):
                listener.exitLogical_type(self)




    def logical_type(self):

        localctx = expressParser.Logical_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_logical_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(expressParser.LOGICAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Multiplication_like_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(expressParser.DIV, 0)

        def MOD(self):
            return self.getToken(expressParser.MOD, 0)

        def AND(self):
            return self.getToken(expressParser.AND, 0)

        def getRuleIndex(self):
            return expressParser.RULE_multiplication_like_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplication_like_op" ):
                listener.enterMultiplication_like_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplication_like_op" ):
                listener.exitMultiplication_like_op(self)




    def multiplication_like_op(self):

        localctx = expressParser.Multiplication_like_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_multiplication_like_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__18) | (1 << expressParser.T__19) | (1 << expressParser.T__20) | (1 << expressParser.AND) | (1 << expressParser.DIV))) != 0) or _la==expressParser.MOD):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_typesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entity_ref(self):
            return self.getTypedRuleContext(expressParser.Entity_refContext,0)


        def type_ref(self):
            return self.getTypedRuleContext(expressParser.Type_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_named_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_types" ):
                listener.enterNamed_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_types" ):
                listener.exitNamed_types(self)




    def named_types(self):

        localctx = expressParser.Named_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_named_types)
        try:
            self.state = 1023
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.entity_ref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.type_ref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_type_or_renameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_types(self):
            return self.getTypedRuleContext(expressParser.Named_typesContext,0)


        def AS(self):
            return self.getToken(expressParser.AS, 0)

        def entity_id(self):
            return self.getTypedRuleContext(expressParser.Entity_idContext,0)


        def type_id(self):
            return self.getTypedRuleContext(expressParser.Type_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_named_type_or_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_type_or_rename" ):
                listener.enterNamed_type_or_rename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_type_or_rename" ):
                listener.exitNamed_type_or_rename(self)




    def named_type_or_rename(self):

        localctx = expressParser.Named_type_or_renameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_named_type_or_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.named_types()
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.AS:
                self.state = 1026
                self.match(expressParser.AS)
                self.state = 1029
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 1027
                    self.entity_id()
                    pass

                elif la_ == 2:
                    self.state = 1028
                    self.type_id()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Null_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return expressParser.RULE_null_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNull_stmt" ):
                listener.enterNull_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNull_stmt" ):
                listener.exitNull_stmt(self)




    def null_stmt(self):

        localctx = expressParser.Null_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_null_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(expressParser.NUMBER, 0)

        def getRuleIndex(self):
            return expressParser.RULE_number_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_type" ):
                listener.enterNumber_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_type" ):
                listener.exitNumber_type(self)




    def number_type(self):

        localctx = expressParser.Number_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_number_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.match(expressParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Numeric_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_expression(self):
            return self.getTypedRuleContext(expressParser.Simple_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_numeric_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumeric_expression" ):
                listener.enterNumeric_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumeric_expression" ):
                listener.exitNumeric_expression(self)




    def numeric_expression(self):

        localctx = expressParser.Numeric_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_numeric_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.simple_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_ofContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONEOF(self):
            return self.getToken(expressParser.ONEOF, 0)

        def supertype_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Supertype_expressionContext)
            else:
                return self.getTypedRuleContext(expressParser.Supertype_expressionContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_one_of

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_of" ):
                listener.enterOne_of(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_of" ):
                listener.exitOne_of(self)




    def one_of(self):

        localctx = expressParser.One_ofContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_one_of)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(expressParser.ONEOF)
            self.state = 1040
            self.match(expressParser.T__1)
            self.state = 1041
            self.supertype_expression()
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__2:
                self.state = 1042
                self.match(expressParser.T__2)
                self.state = 1043
                self.supertype_expression()
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1049
            self.match(expressParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)




    def parameter(self):

        localctx = expressParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_parameter_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_id" ):
                listener.enterParameter_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_id" ):
                listener.exitParameter_id(self)




    def parameter_id(self):

        localctx = expressParser.Parameter_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_parameter_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def generalized_types(self):
            return self.getTypedRuleContext(expressParser.Generalized_typesContext,0)


        def named_types(self):
            return self.getTypedRuleContext(expressParser.Named_typesContext,0)


        def simple_types(self):
            return self.getTypedRuleContext(expressParser.Simple_typesContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_parameter_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_type" ):
                listener.enterParameter_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_type" ):
                listener.exitParameter_type(self)




    def parameter_type(self):

        localctx = expressParser.Parameter_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_parameter_type)
        try:
            self.state = 1058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.AGGREGATE, expressParser.ARRAY, expressParser.BAG, expressParser.GENERIC, expressParser.GENERIC_ENTITY, expressParser.LIST, expressParser.SET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.generalized_types()
                pass
            elif token in [expressParser.SIMPLE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.named_types()
                pass
            elif token in [expressParser.BINARY, expressParser.BOOLEAN, expressParser.INTEGER, expressParser.LOGICAL, expressParser.NUMBER, expressParser.REAL, expressParser.STRING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1057
                self.simple_types()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PopulationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entity_ref(self):
            return self.getTypedRuleContext(expressParser.Entity_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_population

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPopulation" ):
                listener.enterPopulation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPopulation" ):
                listener.exitPopulation(self)




    def population(self):

        localctx = expressParser.PopulationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_population)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.entity_ref()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Precision_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_expression(self):
            return self.getTypedRuleContext(expressParser.Numeric_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_precision_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrecision_spec" ):
                listener.enterPrecision_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrecision_spec" ):
                listener.exitPrecision_spec(self)




    def precision_spec(self):

        localctx = expressParser.Precision_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_precision_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.numeric_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(expressParser.LiteralContext,0)


        def qualifiable_factor(self):
            return self.getTypedRuleContext(expressParser.Qualifiable_factorContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.QualifierContext)
            else:
                return self.getTypedRuleContext(expressParser.QualifierContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = expressParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 1072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.FALSE, expressParser.TRUE, expressParser.UNKNOWN, expressParser.BINARY_LITERAL, expressParser.ENCODED_STRING_LITERAL, expressParser.INTEGER_LITERAL, expressParser.REAL_LITERAL, expressParser.SIMPLE_STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.literal()
                pass
            elif token in [expressParser.T__11, expressParser.ABS, expressParser.ACOS, expressParser.ASIN, expressParser.ATAN, expressParser.BLENGTH, expressParser.CONST_E, expressParser.COS, expressParser.EXISTS, expressParser.EXP, expressParser.FORMAT, expressParser.HIBOUND, expressParser.HIINDEX, expressParser.LENGTH, expressParser.LOBOUND, expressParser.LOG, expressParser.LOG10, expressParser.LOG2, expressParser.LOINDEX, expressParser.NVL, expressParser.ODD, expressParser.PI, expressParser.ROLESOF, expressParser.SELF, expressParser.SIN, expressParser.SIZEOF, expressParser.SQRT, expressParser.TAN, expressParser.TYPEOF, expressParser.USEDIN, expressParser.VALUE, expressParser.VALUE_IN, expressParser.VALUE_UNIQUE, expressParser.SIMPLE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1065
                self.qualifiable_factor()
                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__6) | (1 << expressParser.T__10) | (1 << expressParser.T__13))) != 0):
                    self.state = 1066
                    self.qualifier()
                    self.state = 1071
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_call_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def built_in_procedure(self):
            return self.getTypedRuleContext(expressParser.Built_in_procedureContext,0)


        def procedure_ref(self):
            return self.getTypedRuleContext(expressParser.Procedure_refContext,0)


        def actual_parameter_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Actual_parameter_listContext)
            else:
                return self.getTypedRuleContext(expressParser.Actual_parameter_listContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_procedure_call_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_call_stmt" ):
                listener.enterProcedure_call_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_call_stmt" ):
                listener.exitProcedure_call_stmt(self)




    def procedure_call_stmt(self):

        localctx = expressParser.Procedure_call_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_procedure_call_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.INSERT, expressParser.REMOVE]:
                self.state = 1074
                self.built_in_procedure()
                pass
            elif token in [expressParser.SIMPLE_ID]:
                self.state = 1075
                self.procedure_ref()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1079 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1078
                self.actual_parameter_list()
                self.state = 1081 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==expressParser.T__1):
                    break

            self.state = 1083
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def procedure_head(self):
            return self.getTypedRuleContext(expressParser.Procedure_headContext,0)


        def algorithm_head(self):
            return self.getTypedRuleContext(expressParser.Algorithm_headContext,0)


        def END_PROCEDURE(self):
            return self.getToken(expressParser.END_PROCEDURE, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.StmtContext)
            else:
                return self.getTypedRuleContext(expressParser.StmtContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_procedure_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_decl" ):
                listener.enterProcedure_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_decl" ):
                listener.exitProcedure_decl(self)




    def procedure_decl(self):

        localctx = expressParser.Procedure_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_procedure_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.procedure_head()
            self.state = 1086
            self.algorithm_head()
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__0) | (1 << expressParser.ALIAS) | (1 << expressParser.BEGIN) | (1 << expressParser.CASE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (expressParser.ESCAPE - 71)) | (1 << (expressParser.IF - 71)) | (1 << (expressParser.INSERT - 71)) | (1 << (expressParser.REMOVE - 71)) | (1 << (expressParser.REPEAT - 71)) | (1 << (expressParser.RETURN - 71)) | (1 << (expressParser.SKIP_ - 71)))) != 0) or _la==expressParser.SIMPLE_ID:
                self.state = 1087
                self.stmt()
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1093
            self.match(expressParser.END_PROCEDURE)
            self.state = 1094
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(expressParser.PROCEDURE, 0)

        def procedure_id(self):
            return self.getTypedRuleContext(expressParser.Procedure_idContext,0)


        def formal_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Formal_parameterContext)
            else:
                return self.getTypedRuleContext(expressParser.Formal_parameterContext,i)


        def VAR(self, i:int=None):
            if i is None:
                return self.getTokens(expressParser.VAR)
            else:
                return self.getToken(expressParser.VAR, i)

        def getRuleIndex(self):
            return expressParser.RULE_procedure_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_head" ):
                listener.enterProcedure_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_head" ):
                listener.exitProcedure_head(self)




    def procedure_head(self):

        localctx = expressParser.Procedure_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_procedure_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(expressParser.PROCEDURE)
            self.state = 1097
            self.procedure_id()
            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__1:
                self.state = 1098
                self.match(expressParser.T__1)
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==expressParser.VAR:
                    self.state = 1099
                    self.match(expressParser.VAR)


                self.state = 1102
                self.formal_parameter()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==expressParser.T__0:
                    self.state = 1103
                    self.match(expressParser.T__0)
                    self.state = 1105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==expressParser.VAR:
                        self.state = 1104
                        self.match(expressParser.VAR)


                    self.state = 1107
                    self.formal_parameter()
                    self.state = 1112
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1113
                self.match(expressParser.T__3)


            self.state = 1117
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Procedure_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_procedure_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedure_id" ):
                listener.enterProcedure_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedure_id" ):
                listener.exitProcedure_id(self)




    def procedure_id(self):

        localctx = expressParser.Procedure_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_procedure_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualifiable_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_ref(self):
            return self.getTypedRuleContext(expressParser.Attribute_refContext,0)


        def constant_factor(self):
            return self.getTypedRuleContext(expressParser.Constant_factorContext,0)


        def function_call(self):
            return self.getTypedRuleContext(expressParser.Function_callContext,0)


        def general_ref(self):
            return self.getTypedRuleContext(expressParser.General_refContext,0)


        def population(self):
            return self.getTypedRuleContext(expressParser.PopulationContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_qualifiable_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiable_factor" ):
                listener.enterQualifiable_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiable_factor" ):
                listener.exitQualifiable_factor(self)




    def qualifiable_factor(self):

        localctx = expressParser.Qualifiable_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_qualifiable_factor)
        try:
            self.state = 1126
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1121
                self.attribute_ref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1122
                self.constant_factor()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1123
                self.function_call()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1124
                self.general_ref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1125
                self.population()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELF(self):
            return self.getToken(expressParser.SELF, 0)

        def group_qualifier(self):
            return self.getTypedRuleContext(expressParser.Group_qualifierContext,0)


        def attribute_qualifier(self):
            return self.getTypedRuleContext(expressParser.Attribute_qualifierContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_qualified_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_attribute" ):
                listener.enterQualified_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_attribute" ):
                listener.exitQualified_attribute(self)




    def qualified_attribute(self):

        localctx = expressParser.Qualified_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_qualified_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.match(expressParser.SELF)
            self.state = 1129
            self.group_qualifier()
            self.state = 1130
            self.attribute_qualifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_qualifier(self):
            return self.getTypedRuleContext(expressParser.Attribute_qualifierContext,0)


        def group_qualifier(self):
            return self.getTypedRuleContext(expressParser.Group_qualifierContext,0)


        def index_qualifier(self):
            return self.getTypedRuleContext(expressParser.Index_qualifierContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifier" ):
                listener.enterQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifier" ):
                listener.exitQualifier(self)




    def qualifier(self):

        localctx = expressParser.QualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_qualifier)
        try:
            self.state = 1135
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1132
                self.attribute_qualifier()
                pass
            elif token in [expressParser.T__13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1133
                self.group_qualifier()
                pass
            elif token in [expressParser.T__6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1134
                self.index_qualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Query_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUERY(self):
            return self.getToken(expressParser.QUERY, 0)

        def variable_id(self):
            return self.getTypedRuleContext(expressParser.Variable_idContext,0)


        def aggregate_source(self):
            return self.getTypedRuleContext(expressParser.Aggregate_sourceContext,0)


        def logical_expression(self):
            return self.getTypedRuleContext(expressParser.Logical_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_query_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery_expression" ):
                listener.enterQuery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery_expression" ):
                listener.exitQuery_expression(self)




    def query_expression(self):

        localctx = expressParser.Query_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_query_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(expressParser.QUERY)
            self.state = 1138
            self.match(expressParser.T__1)
            self.state = 1139
            self.variable_id()
            self.state = 1140
            self.match(expressParser.T__21)
            self.state = 1141
            self.aggregate_source()
            self.state = 1142
            self.match(expressParser.T__22)
            self.state = 1143
            self.logical_expression()
            self.state = 1144
            self.match(expressParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REAL(self):
            return self.getToken(expressParser.REAL, 0)

        def precision_spec(self):
            return self.getTypedRuleContext(expressParser.Precision_specContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_real_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_type" ):
                listener.enterReal_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_type" ):
                listener.exitReal_type(self)




    def real_type(self):

        localctx = expressParser.Real_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_real_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.match(expressParser.REAL)
            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__1:
                self.state = 1147
                self.match(expressParser.T__1)
                self.state = 1148
                self.precision_spec()
                self.state = 1149
                self.match(expressParser.T__3)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Redeclared_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_attribute(self):
            return self.getTypedRuleContext(expressParser.Qualified_attributeContext,0)


        def RENAMED(self):
            return self.getToken(expressParser.RENAMED, 0)

        def attribute_id(self):
            return self.getTypedRuleContext(expressParser.Attribute_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_redeclared_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRedeclared_attribute" ):
                listener.enterRedeclared_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRedeclared_attribute" ):
                listener.exitRedeclared_attribute(self)




    def redeclared_attribute(self):

        localctx = expressParser.Redeclared_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_redeclared_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.qualified_attribute()
            self.state = 1156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.RENAMED:
                self.state = 1154
                self.match(expressParser.RENAMED)
                self.state = 1155
                self.attribute_id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Referenced_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute_ref(self):
            return self.getTypedRuleContext(expressParser.Attribute_refContext,0)


        def qualified_attribute(self):
            return self.getTypedRuleContext(expressParser.Qualified_attributeContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_referenced_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenced_attribute" ):
                listener.enterReferenced_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenced_attribute" ):
                listener.exitReferenced_attribute(self)




    def referenced_attribute(self):

        localctx = expressParser.Referenced_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_referenced_attribute)
        try:
            self.state = 1160
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.SIMPLE_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.attribute_ref()
                pass
            elif token in [expressParser.SELF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1159
                self.qualified_attribute()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(expressParser.REFERENCE, 0)

        def FROM(self):
            return self.getToken(expressParser.FROM, 0)

        def schema_ref(self):
            return self.getTypedRuleContext(expressParser.Schema_refContext,0)


        def resource_or_rename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Resource_or_renameContext)
            else:
                return self.getTypedRuleContext(expressParser.Resource_or_renameContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_reference_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_clause" ):
                listener.enterReference_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_clause" ):
                listener.exitReference_clause(self)




    def reference_clause(self):

        localctx = expressParser.Reference_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_reference_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(expressParser.REFERENCE)
            self.state = 1163
            self.match(expressParser.FROM)
            self.state = 1164
            self.schema_ref()
            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__1:
                self.state = 1165
                self.match(expressParser.T__1)
                self.state = 1166
                self.resource_or_rename()
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==expressParser.T__2:
                    self.state = 1167
                    self.match(expressParser.T__2)
                    self.state = 1168
                    self.resource_or_rename()
                    self.state = 1173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1174
                self.match(expressParser.T__3)


            self.state = 1178
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rel_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return expressParser.RULE_rel_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel_op" ):
                listener.enterRel_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel_op" ):
                listener.exitRel_op(self)




    def rel_op(self):

        localctx = expressParser.Rel_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_rel_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1180
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__16) | (1 << expressParser.T__17) | (1 << expressParser.T__23) | (1 << expressParser.T__24) | (1 << expressParser.T__25) | (1 << expressParser.T__26) | (1 << expressParser.T__27) | (1 << expressParser.T__28))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rel_op_extendedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rel_op(self):
            return self.getTypedRuleContext(expressParser.Rel_opContext,0)


        def IN(self):
            return self.getToken(expressParser.IN, 0)

        def LIKE(self):
            return self.getToken(expressParser.LIKE, 0)

        def getRuleIndex(self):
            return expressParser.RULE_rel_op_extended

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRel_op_extended" ):
                listener.enterRel_op_extended(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRel_op_extended" ):
                listener.exitRel_op_extended(self)




    def rel_op_extended(self):

        localctx = expressParser.Rel_op_extendedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_rel_op_extended)
        try:
            self.state = 1185
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.T__16, expressParser.T__17, expressParser.T__23, expressParser.T__24, expressParser.T__25, expressParser.T__26, expressParser.T__27, expressParser.T__28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1182
                self.rel_op()
                pass
            elif token in [expressParser.IN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1183
                self.match(expressParser.IN)
                pass
            elif token in [expressParser.LIKE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1184
                self.match(expressParser.LIKE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rename_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_id(self):
            return self.getTypedRuleContext(expressParser.Constant_idContext,0)


        def entity_id(self):
            return self.getTypedRuleContext(expressParser.Entity_idContext,0)


        def function_id(self):
            return self.getTypedRuleContext(expressParser.Function_idContext,0)


        def procedure_id(self):
            return self.getTypedRuleContext(expressParser.Procedure_idContext,0)


        def type_id(self):
            return self.getTypedRuleContext(expressParser.Type_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_rename_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRename_id" ):
                listener.enterRename_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRename_id" ):
                listener.exitRename_id(self)




    def rename_id(self):

        localctx = expressParser.Rename_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_rename_id)
        try:
            self.state = 1192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1187
                self.constant_id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1188
                self.entity_id()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1189
                self.function_id()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1190
                self.procedure_id()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1191
                self.type_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeat_controlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def increment_control(self):
            return self.getTypedRuleContext(expressParser.Increment_controlContext,0)


        def while_control(self):
            return self.getTypedRuleContext(expressParser.While_controlContext,0)


        def until_control(self):
            return self.getTypedRuleContext(expressParser.Until_controlContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_repeat_control

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeat_control" ):
                listener.enterRepeat_control(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeat_control" ):
                listener.exitRepeat_control(self)




    def repeat_control(self):

        localctx = expressParser.Repeat_controlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_repeat_control)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.SIMPLE_ID:
                self.state = 1194
                self.increment_control()


            self.state = 1198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.WHILE:
                self.state = 1197
                self.while_control()


            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.UNTIL:
                self.state = 1200
                self.until_control()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repeat_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self):
            return self.getToken(expressParser.REPEAT, 0)

        def repeat_control(self):
            return self.getTypedRuleContext(expressParser.Repeat_controlContext,0)


        def END_REPEAT(self):
            return self.getToken(expressParser.END_REPEAT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.StmtContext)
            else:
                return self.getTypedRuleContext(expressParser.StmtContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_repeat_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeat_stmt" ):
                listener.enterRepeat_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeat_stmt" ):
                listener.exitRepeat_stmt(self)




    def repeat_stmt(self):

        localctx = expressParser.Repeat_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_repeat_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(expressParser.REPEAT)
            self.state = 1204
            self.repeat_control()
            self.state = 1205
            self.match(expressParser.T__0)
            self.state = 1207 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1206
                self.stmt()
                self.state = 1209 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__0) | (1 << expressParser.ALIAS) | (1 << expressParser.BEGIN) | (1 << expressParser.CASE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (expressParser.ESCAPE - 71)) | (1 << (expressParser.IF - 71)) | (1 << (expressParser.INSERT - 71)) | (1 << (expressParser.REMOVE - 71)) | (1 << (expressParser.REPEAT - 71)) | (1 << (expressParser.RETURN - 71)) | (1 << (expressParser.SKIP_ - 71)))) != 0) or _la==expressParser.SIMPLE_ID):
                    break

            self.state = 1211
            self.match(expressParser.END_REPEAT)
            self.state = 1212
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepetitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_expression(self):
            return self.getTypedRuleContext(expressParser.Numeric_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_repetition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepetition" ):
                listener.enterRepetition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepetition" ):
                listener.exitRepetition(self)




    def repetition(self):

        localctx = expressParser.RepetitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_repetition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1214
            self.numeric_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resource_or_renameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource_ref(self):
            return self.getTypedRuleContext(expressParser.Resource_refContext,0)


        def AS(self):
            return self.getToken(expressParser.AS, 0)

        def rename_id(self):
            return self.getTypedRuleContext(expressParser.Rename_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_resource_or_rename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_or_rename" ):
                listener.enterResource_or_rename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_or_rename" ):
                listener.exitResource_or_rename(self)




    def resource_or_rename(self):

        localctx = expressParser.Resource_or_renameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_resource_or_rename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1216
            self.resource_ref()
            self.state = 1219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.AS:
                self.state = 1217
                self.match(expressParser.AS)
                self.state = 1218
                self.rename_id()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Resource_refContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant_ref(self):
            return self.getTypedRuleContext(expressParser.Constant_refContext,0)


        def entity_ref(self):
            return self.getTypedRuleContext(expressParser.Entity_refContext,0)


        def function_ref(self):
            return self.getTypedRuleContext(expressParser.Function_refContext,0)


        def procedure_ref(self):
            return self.getTypedRuleContext(expressParser.Procedure_refContext,0)


        def type_ref(self):
            return self.getTypedRuleContext(expressParser.Type_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_resource_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource_ref" ):
                listener.enterResource_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource_ref" ):
                listener.exitResource_ref(self)




    def resource_ref(self):

        localctx = expressParser.Resource_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_resource_ref)
        try:
            self.state = 1226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1221
                self.constant_ref()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1222
                self.entity_ref()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1223
                self.function_ref()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1224
                self.procedure_ref()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1225
                self.type_ref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(expressParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)




    def return_stmt(self):

        localctx = expressParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(expressParser.RETURN)
            self.state = 1233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__1:
                self.state = 1229
                self.match(expressParser.T__1)
                self.state = 1230
                self.expression()
                self.state = 1231
                self.match(expressParser.T__3)


            self.state = 1235
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rule_head(self):
            return self.getTypedRuleContext(expressParser.Rule_headContext,0)


        def algorithm_head(self):
            return self.getTypedRuleContext(expressParser.Algorithm_headContext,0)


        def where_clause(self):
            return self.getTypedRuleContext(expressParser.Where_clauseContext,0)


        def END_RULE(self):
            return self.getToken(expressParser.END_RULE, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.StmtContext)
            else:
                return self.getTypedRuleContext(expressParser.StmtContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_rule_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_decl" ):
                listener.enterRule_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_decl" ):
                listener.exitRule_decl(self)




    def rule_decl(self):

        localctx = expressParser.Rule_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_rule_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1237
            self.rule_head()
            self.state = 1238
            self.algorithm_head()
            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__0) | (1 << expressParser.ALIAS) | (1 << expressParser.BEGIN) | (1 << expressParser.CASE))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (expressParser.ESCAPE - 71)) | (1 << (expressParser.IF - 71)) | (1 << (expressParser.INSERT - 71)) | (1 << (expressParser.REMOVE - 71)) | (1 << (expressParser.REPEAT - 71)) | (1 << (expressParser.RETURN - 71)) | (1 << (expressParser.SKIP_ - 71)))) != 0) or _la==expressParser.SIMPLE_ID:
                self.state = 1239
                self.stmt()
                self.state = 1244
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1245
            self.where_clause()
            self.state = 1246
            self.match(expressParser.END_RULE)
            self.state = 1247
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RULE(self):
            return self.getToken(expressParser.RULE, 0)

        def rule_id(self):
            return self.getTypedRuleContext(expressParser.Rule_idContext,0)


        def FOR(self):
            return self.getToken(expressParser.FOR, 0)

        def entity_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Entity_refContext)
            else:
                return self.getTypedRuleContext(expressParser.Entity_refContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_rule_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_head" ):
                listener.enterRule_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_head" ):
                listener.exitRule_head(self)




    def rule_head(self):

        localctx = expressParser.Rule_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_rule_head)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1249
            self.match(expressParser.RULE)
            self.state = 1250
            self.rule_id()
            self.state = 1251
            self.match(expressParser.FOR)
            self.state = 1252
            self.match(expressParser.T__1)
            self.state = 1253
            self.entity_ref()
            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__2:
                self.state = 1254
                self.match(expressParser.T__2)
                self.state = 1255
                self.entity_ref()
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1261
            self.match(expressParser.T__3)
            self.state = 1262
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_rule_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_id" ):
                listener.enterRule_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_id" ):
                listener.exitRule_id(self)




    def rule_id(self):

        localctx = expressParser.Rule_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_rule_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rule_label_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_rule_label_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRule_label_id" ):
                listener.enterRule_label_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRule_label_id" ):
                listener.exitRule_label_id(self)




    def rule_label_id(self):

        localctx = expressParser.Rule_label_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_rule_label_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interface_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Interface_specificationContext)
            else:
                return self.getTypedRuleContext(expressParser.Interface_specificationContext,i)


        def constant_decl(self):
            return self.getTypedRuleContext(expressParser.Constant_declContext,0)


        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(expressParser.DeclarationContext,i)


        def rule_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Rule_declContext)
            else:
                return self.getTypedRuleContext(expressParser.Rule_declContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_schema_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_body" ):
                listener.enterSchema_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_body" ):
                listener.exitSchema_body(self)




    def schema_body(self):

        localctx = expressParser.Schema_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_schema_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.REFERENCE or _la==expressParser.USE:
                self.state = 1268
                self.interface_specification()
                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.CONSTANT:
                self.state = 1274
                self.constant_decl()


            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (expressParser.ENTITY - 69)) | (1 << (expressParser.FUNCTION - 69)) | (1 << (expressParser.PROCEDURE - 69)) | (1 << (expressParser.RULE - 69)) | (1 << (expressParser.SUBTYPE_CONSTRAINT - 69)))) != 0) or _la==expressParser.TYPE:
                self.state = 1279
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [expressParser.ENTITY, expressParser.FUNCTION, expressParser.PROCEDURE, expressParser.SUBTYPE_CONSTRAINT, expressParser.TYPE]:
                    self.state = 1277
                    self.declaration()
                    pass
                elif token in [expressParser.RULE]:
                    self.state = 1278
                    self.rule_decl()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCHEMA(self):
            return self.getToken(expressParser.SCHEMA, 0)

        def schema_id(self):
            return self.getTypedRuleContext(expressParser.Schema_idContext,0)


        def schema_body(self):
            return self.getTypedRuleContext(expressParser.Schema_bodyContext,0)


        def END_SCHEMA(self):
            return self.getToken(expressParser.END_SCHEMA, 0)

        def schema_version_id(self):
            return self.getTypedRuleContext(expressParser.Schema_version_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_schema_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_decl" ):
                listener.enterSchema_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_decl" ):
                listener.exitSchema_decl(self)




    def schema_decl(self):

        localctx = expressParser.Schema_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_schema_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1284
            self.match(expressParser.SCHEMA)
            self.state = 1285
            self.schema_id()
            self.state = 1287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.ENCODED_STRING_LITERAL or _la==expressParser.SIMPLE_STRING_LITERAL:
                self.state = 1286
                self.schema_version_id()


            self.state = 1289
            self.match(expressParser.T__0)
            self.state = 1290
            self.schema_body()
            self.state = 1291
            self.match(expressParser.END_SCHEMA)
            self.state = 1292
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_schema_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_id" ):
                listener.enterSchema_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_id" ):
                listener.exitSchema_id(self)




    def schema_id(self):

        localctx = expressParser.Schema_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_schema_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_version_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(expressParser.String_literalContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_schema_version_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_version_id" ):
                listener.enterSchema_version_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_version_id" ):
                listener.exitSchema_version_id(self)




    def schema_version_id(self):

        localctx = expressParser.Schema_version_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_schema_version_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.string_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_selector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelector" ):
                listener.enterSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelector" ):
                listener.exitSelector(self)




    def selector(self):

        localctx = expressParser.SelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_selector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_extensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BASED_ON(self):
            return self.getToken(expressParser.BASED_ON, 0)

        def type_ref(self):
            return self.getTypedRuleContext(expressParser.Type_refContext,0)


        def WITH(self):
            return self.getToken(expressParser.WITH, 0)

        def select_list(self):
            return self.getTypedRuleContext(expressParser.Select_listContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_select_extension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_extension" ):
                listener.enterSelect_extension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_extension" ):
                listener.exitSelect_extension(self)




    def select_extension(self):

        localctx = expressParser.Select_extensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_select_extension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            self.match(expressParser.BASED_ON)
            self.state = 1301
            self.type_ref()
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.WITH:
                self.state = 1302
                self.match(expressParser.WITH)
                self.state = 1303
                self.select_list()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_types(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Named_typesContext)
            else:
                return self.getTypedRuleContext(expressParser.Named_typesContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_select_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_list" ):
                listener.enterSelect_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_list" ):
                listener.exitSelect_list(self)




    def select_list(self):

        localctx = expressParser.Select_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_select_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1306
            self.match(expressParser.T__1)
            self.state = 1307
            self.named_types()
            self.state = 1312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__2:
                self.state = 1308
                self.match(expressParser.T__2)
                self.state = 1309
                self.named_types()
                self.state = 1314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1315
            self.match(expressParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(expressParser.SELECT, 0)

        def EXTENSIBLE(self):
            return self.getToken(expressParser.EXTENSIBLE, 0)

        def select_list(self):
            return self.getTypedRuleContext(expressParser.Select_listContext,0)


        def select_extension(self):
            return self.getTypedRuleContext(expressParser.Select_extensionContext,0)


        def GENERIC_ENTITY(self):
            return self.getToken(expressParser.GENERIC_ENTITY, 0)

        def getRuleIndex(self):
            return expressParser.RULE_select_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_type" ):
                listener.enterSelect_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_type" ):
                listener.exitSelect_type(self)




    def select_type(self):

        localctx = expressParser.Select_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_select_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.EXTENSIBLE:
                self.state = 1317
                self.match(expressParser.EXTENSIBLE)
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==expressParser.GENERIC_ENTITY:
                    self.state = 1318
                    self.match(expressParser.GENERIC_ENTITY)




            self.state = 1323
            self.match(expressParser.SELECT)
            self.state = 1326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.T__1]:
                self.state = 1324
                self.select_list()
                pass
            elif token in [expressParser.BASED_ON]:
                self.state = 1325
                self.select_extension()
                pass
            elif token in [expressParser.T__0]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Set_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(expressParser.SET, 0)

        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def instantiable_type(self):
            return self.getTypedRuleContext(expressParser.Instantiable_typeContext,0)


        def bound_spec(self):
            return self.getTypedRuleContext(expressParser.Bound_specContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_set_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet_type" ):
                listener.enterSet_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet_type" ):
                listener.exitSet_type(self)




    def set_type(self):

        localctx = expressParser.Set_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_set_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(expressParser.SET)
            self.state = 1330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__6:
                self.state = 1329
                self.bound_spec()


            self.state = 1332
            self.match(expressParser.OF)
            self.state = 1333
            self.instantiable_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.TermContext)
            else:
                return self.getTypedRuleContext(expressParser.TermContext,i)


        def add_like_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Add_like_opContext)
            else:
                return self.getTypedRuleContext(expressParser.Add_like_opContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_simple_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_expression" ):
                listener.enterSimple_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_expression" ):
                listener.exitSimple_expression(self)




    def simple_expression(self):

        localctx = expressParser.Simple_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_simple_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.term()
            self.state = 1341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__4 or _la==expressParser.T__5 or _la==expressParser.OR or _la==expressParser.XOR:
                self.state = 1336
                self.add_like_op()
                self.state = 1337
                self.term()
                self.state = 1343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_initializer(self):
            return self.getTypedRuleContext(expressParser.Aggregate_initializerContext,0)


        def entity_constructor(self):
            return self.getTypedRuleContext(expressParser.Entity_constructorContext,0)


        def enumeration_reference(self):
            return self.getTypedRuleContext(expressParser.Enumeration_referenceContext,0)


        def interval(self):
            return self.getTypedRuleContext(expressParser.IntervalContext,0)


        def query_expression(self):
            return self.getTypedRuleContext(expressParser.Query_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(expressParser.ExpressionContext,0)


        def primary(self):
            return self.getTypedRuleContext(expressParser.PrimaryContext,0)


        def unary_op(self):
            return self.getTypedRuleContext(expressParser.Unary_opContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_simple_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_factor" ):
                listener.enterSimple_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_factor" ):
                listener.exitSimple_factor(self)




    def simple_factor(self):

        localctx = expressParser.Simple_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_simple_factor)
        self._la = 0 # Token type
        try:
            self.state = 1359
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1344
                self.aggregate_initializer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1345
                self.entity_constructor()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1346
                self.enumeration_reference()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1347
                self.interval()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1348
                self.query_expression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==expressParser.T__4 or _la==expressParser.T__5 or _la==expressParser.NOT:
                    self.state = 1349
                    self.unary_op()


                self.state = 1357
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [expressParser.T__1]:
                    self.state = 1352
                    self.match(expressParser.T__1)
                    self.state = 1353
                    self.expression()
                    self.state = 1354
                    self.match(expressParser.T__3)
                    pass
                elif token in [expressParser.T__11, expressParser.ABS, expressParser.ACOS, expressParser.ASIN, expressParser.ATAN, expressParser.BLENGTH, expressParser.CONST_E, expressParser.COS, expressParser.EXISTS, expressParser.EXP, expressParser.FALSE, expressParser.FORMAT, expressParser.HIBOUND, expressParser.HIINDEX, expressParser.LENGTH, expressParser.LOBOUND, expressParser.LOG, expressParser.LOG10, expressParser.LOG2, expressParser.LOINDEX, expressParser.NVL, expressParser.ODD, expressParser.PI, expressParser.ROLESOF, expressParser.SELF, expressParser.SIN, expressParser.SIZEOF, expressParser.SQRT, expressParser.TAN, expressParser.TRUE, expressParser.TYPEOF, expressParser.UNKNOWN, expressParser.USEDIN, expressParser.VALUE, expressParser.VALUE_IN, expressParser.VALUE_UNIQUE, expressParser.BINARY_LITERAL, expressParser.ENCODED_STRING_LITERAL, expressParser.INTEGER_LITERAL, expressParser.REAL_LITERAL, expressParser.SIMPLE_ID, expressParser.SIMPLE_STRING_LITERAL]:
                    self.state = 1356
                    self.primary()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_typesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_type(self):
            return self.getTypedRuleContext(expressParser.Binary_typeContext,0)


        def boolean_type(self):
            return self.getTypedRuleContext(expressParser.Boolean_typeContext,0)


        def integer_type(self):
            return self.getTypedRuleContext(expressParser.Integer_typeContext,0)


        def logical_type(self):
            return self.getTypedRuleContext(expressParser.Logical_typeContext,0)


        def number_type(self):
            return self.getTypedRuleContext(expressParser.Number_typeContext,0)


        def real_type(self):
            return self.getTypedRuleContext(expressParser.Real_typeContext,0)


        def string_type(self):
            return self.getTypedRuleContext(expressParser.String_typeContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_simple_types

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_types" ):
                listener.enterSimple_types(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_types" ):
                listener.exitSimple_types(self)




    def simple_types(self):

        localctx = expressParser.Simple_typesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_simple_types)
        try:
            self.state = 1368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1361
                self.binary_type()
                pass
            elif token in [expressParser.BOOLEAN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1362
                self.boolean_type()
                pass
            elif token in [expressParser.INTEGER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1363
                self.integer_type()
                pass
            elif token in [expressParser.LOGICAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1364
                self.logical_type()
                pass
            elif token in [expressParser.NUMBER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1365
                self.number_type()
                pass
            elif token in [expressParser.REAL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1366
                self.real_type()
                pass
            elif token in [expressParser.STRING]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1367
                self.string_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Skip_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKIP_(self):
            return self.getToken(expressParser.SKIP_, 0)

        def getRuleIndex(self):
            return expressParser.RULE_skip_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSkip_stmt" ):
                listener.enterSkip_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSkip_stmt" ):
                listener.exitSkip_stmt(self)




    def skip_stmt(self):

        localctx = expressParser.Skip_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_skip_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self.match(expressParser.SKIP_)
            self.state = 1371
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alias_stmt(self):
            return self.getTypedRuleContext(expressParser.Alias_stmtContext,0)


        def assignment_stmt(self):
            return self.getTypedRuleContext(expressParser.Assignment_stmtContext,0)


        def case_stmt(self):
            return self.getTypedRuleContext(expressParser.Case_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(expressParser.Compound_stmtContext,0)


        def escape_stmt(self):
            return self.getTypedRuleContext(expressParser.Escape_stmtContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(expressParser.If_stmtContext,0)


        def null_stmt(self):
            return self.getTypedRuleContext(expressParser.Null_stmtContext,0)


        def procedure_call_stmt(self):
            return self.getTypedRuleContext(expressParser.Procedure_call_stmtContext,0)


        def repeat_stmt(self):
            return self.getTypedRuleContext(expressParser.Repeat_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(expressParser.Return_stmtContext,0)


        def skip_stmt(self):
            return self.getTypedRuleContext(expressParser.Skip_stmtContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)




    def stmt(self):

        localctx = expressParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_stmt)
        try:
            self.state = 1384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1373
                self.alias_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1374
                self.assignment_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1375
                self.case_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1376
                self.compound_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1377
                self.escape_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1378
                self.if_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1379
                self.null_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1380
                self.procedure_call_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1381
                self.repeat_stmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1382
                self.return_stmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1383
                self.skip_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_STRING_LITERAL(self):
            return self.getToken(expressParser.SIMPLE_STRING_LITERAL, 0)

        def ENCODED_STRING_LITERAL(self):
            return self.getToken(expressParser.ENCODED_STRING_LITERAL, 0)

        def getRuleIndex(self):
            return expressParser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)




    def string_literal(self):

        localctx = expressParser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_string_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1386
            _la = self._input.LA(1)
            if not(_la==expressParser.ENCODED_STRING_LITERAL or _la==expressParser.SIMPLE_STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class String_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(expressParser.STRING, 0)

        def width_spec(self):
            return self.getTypedRuleContext(expressParser.Width_specContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_string_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_type" ):
                listener.enterString_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_type" ):
                listener.exitString_type(self)




    def string_type(self):

        localctx = expressParser.String_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_string_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1388
            self.match(expressParser.STRING)
            self.state = 1390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__1:
                self.state = 1389
                self.width_spec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubsuperContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def supertype_constraint(self):
            return self.getTypedRuleContext(expressParser.Supertype_constraintContext,0)


        def subtype_declaration(self):
            return self.getTypedRuleContext(expressParser.Subtype_declarationContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_subsuper

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubsuper" ):
                listener.enterSubsuper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubsuper" ):
                listener.exitSubsuper(self)




    def subsuper(self):

        localctx = expressParser.SubsuperContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_subsuper)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.ABSTRACT or _la==expressParser.SUPERTYPE:
                self.state = 1392
                self.supertype_constraint()


            self.state = 1396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.SUBTYPE:
                self.state = 1395
                self.subtype_declaration()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subtype_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def supertype_expression(self):
            return self.getTypedRuleContext(expressParser.Supertype_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_subtype_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_constraint" ):
                listener.enterSubtype_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_constraint" ):
                listener.exitSubtype_constraint(self)




    def subtype_constraint(self):

        localctx = expressParser.Subtype_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_subtype_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self.match(expressParser.OF)
            self.state = 1399
            self.match(expressParser.T__1)
            self.state = 1400
            self.supertype_expression()
            self.state = 1401
            self.match(expressParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subtype_constraint_bodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abstract_supertype(self):
            return self.getTypedRuleContext(expressParser.Abstract_supertypeContext,0)


        def total_over(self):
            return self.getTypedRuleContext(expressParser.Total_overContext,0)


        def supertype_expression(self):
            return self.getTypedRuleContext(expressParser.Supertype_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_subtype_constraint_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_constraint_body" ):
                listener.enterSubtype_constraint_body(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_constraint_body" ):
                listener.exitSubtype_constraint_body(self)




    def subtype_constraint_body(self):

        localctx = expressParser.Subtype_constraint_bodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_subtype_constraint_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.ABSTRACT:
                self.state = 1403
                self.abstract_supertype()


            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.TOTAL_OVER:
                self.state = 1406
                self.total_over()


            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__1 or _la==expressParser.ONEOF or _la==expressParser.SIMPLE_ID:
                self.state = 1409
                self.supertype_expression()
                self.state = 1410
                self.match(expressParser.T__0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subtype_constraint_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subtype_constraint_head(self):
            return self.getTypedRuleContext(expressParser.Subtype_constraint_headContext,0)


        def subtype_constraint_body(self):
            return self.getTypedRuleContext(expressParser.Subtype_constraint_bodyContext,0)


        def END_SUBTYPE_CONSTRAINT(self):
            return self.getToken(expressParser.END_SUBTYPE_CONSTRAINT, 0)

        def getRuleIndex(self):
            return expressParser.RULE_subtype_constraint_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_constraint_decl" ):
                listener.enterSubtype_constraint_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_constraint_decl" ):
                listener.exitSubtype_constraint_decl(self)




    def subtype_constraint_decl(self):

        localctx = expressParser.Subtype_constraint_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_subtype_constraint_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.subtype_constraint_head()
            self.state = 1415
            self.subtype_constraint_body()
            self.state = 1416
            self.match(expressParser.END_SUBTYPE_CONSTRAINT)
            self.state = 1417
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subtype_constraint_headContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBTYPE_CONSTRAINT(self):
            return self.getToken(expressParser.SUBTYPE_CONSTRAINT, 0)

        def subtype_constraint_id(self):
            return self.getTypedRuleContext(expressParser.Subtype_constraint_idContext,0)


        def FOR(self):
            return self.getToken(expressParser.FOR, 0)

        def entity_ref(self):
            return self.getTypedRuleContext(expressParser.Entity_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_subtype_constraint_head

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_constraint_head" ):
                listener.enterSubtype_constraint_head(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_constraint_head" ):
                listener.exitSubtype_constraint_head(self)




    def subtype_constraint_head(self):

        localctx = expressParser.Subtype_constraint_headContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_subtype_constraint_head)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            self.match(expressParser.SUBTYPE_CONSTRAINT)
            self.state = 1420
            self.subtype_constraint_id()
            self.state = 1421
            self.match(expressParser.FOR)
            self.state = 1422
            self.entity_ref()
            self.state = 1423
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subtype_constraint_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_subtype_constraint_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_constraint_id" ):
                listener.enterSubtype_constraint_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_constraint_id" ):
                listener.exitSubtype_constraint_id(self)




    def subtype_constraint_id(self):

        localctx = expressParser.Subtype_constraint_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_subtype_constraint_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subtype_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBTYPE(self):
            return self.getToken(expressParser.SUBTYPE, 0)

        def OF(self):
            return self.getToken(expressParser.OF, 0)

        def entity_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Entity_refContext)
            else:
                return self.getTypedRuleContext(expressParser.Entity_refContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_subtype_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubtype_declaration" ):
                listener.enterSubtype_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubtype_declaration" ):
                listener.exitSubtype_declaration(self)




    def subtype_declaration(self):

        localctx = expressParser.Subtype_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_subtype_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1427
            self.match(expressParser.SUBTYPE)
            self.state = 1428
            self.match(expressParser.OF)
            self.state = 1429
            self.match(expressParser.T__1)
            self.state = 1430
            self.entity_ref()
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__2:
                self.state = 1431
                self.match(expressParser.T__2)
                self.state = 1432
                self.entity_ref()
                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1438
            self.match(expressParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supertype_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def abstract_entity_declaration(self):
            return self.getTypedRuleContext(expressParser.Abstract_entity_declarationContext,0)


        def abstract_supertype_declaration(self):
            return self.getTypedRuleContext(expressParser.Abstract_supertype_declarationContext,0)


        def supertype_rule(self):
            return self.getTypedRuleContext(expressParser.Supertype_ruleContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_supertype_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupertype_constraint" ):
                listener.enterSupertype_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupertype_constraint" ):
                listener.exitSupertype_constraint(self)




    def supertype_constraint(self):

        localctx = expressParser.Supertype_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_supertype_constraint)
        try:
            self.state = 1443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1440
                self.abstract_entity_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1441
                self.abstract_supertype_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1442
                self.supertype_rule()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supertype_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def supertype_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Supertype_factorContext)
            else:
                return self.getTypedRuleContext(expressParser.Supertype_factorContext,i)


        def ANDOR(self, i:int=None):
            if i is None:
                return self.getTokens(expressParser.ANDOR)
            else:
                return self.getToken(expressParser.ANDOR, i)

        def getRuleIndex(self):
            return expressParser.RULE_supertype_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupertype_expression" ):
                listener.enterSupertype_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupertype_expression" ):
                listener.exitSupertype_expression(self)




    def supertype_expression(self):

        localctx = expressParser.Supertype_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_supertype_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.supertype_factor()
            self.state = 1450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.ANDOR:
                self.state = 1446
                self.match(expressParser.ANDOR)
                self.state = 1447
                self.supertype_factor()
                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supertype_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def supertype_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Supertype_termContext)
            else:
                return self.getTypedRuleContext(expressParser.Supertype_termContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(expressParser.AND)
            else:
                return self.getToken(expressParser.AND, i)

        def getRuleIndex(self):
            return expressParser.RULE_supertype_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupertype_factor" ):
                listener.enterSupertype_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupertype_factor" ):
                listener.exitSupertype_factor(self)




    def supertype_factor(self):

        localctx = expressParser.Supertype_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_supertype_factor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.supertype_term()
            self.state = 1458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.AND:
                self.state = 1454
                self.match(expressParser.AND)
                self.state = 1455
                self.supertype_term()
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supertype_ruleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPERTYPE(self):
            return self.getToken(expressParser.SUPERTYPE, 0)

        def subtype_constraint(self):
            return self.getTypedRuleContext(expressParser.Subtype_constraintContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_supertype_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupertype_rule" ):
                listener.enterSupertype_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupertype_rule" ):
                listener.exitSupertype_rule(self)




    def supertype_rule(self):

        localctx = expressParser.Supertype_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_supertype_rule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.match(expressParser.SUPERTYPE)
            self.state = 1462
            self.subtype_constraint()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Supertype_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def entity_ref(self):
            return self.getTypedRuleContext(expressParser.Entity_refContext,0)


        def one_of(self):
            return self.getTypedRuleContext(expressParser.One_ofContext,0)


        def supertype_expression(self):
            return self.getTypedRuleContext(expressParser.Supertype_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_supertype_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSupertype_term" ):
                listener.enterSupertype_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSupertype_term" ):
                listener.exitSupertype_term(self)




    def supertype_term(self):

        localctx = expressParser.Supertype_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_supertype_term)
        try:
            self.state = 1470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.SIMPLE_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1464
                self.entity_ref()
                pass
            elif token in [expressParser.ONEOF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1465
                self.one_of()
                pass
            elif token in [expressParser.T__1]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1466
                self.match(expressParser.T__1)
                self.state = 1467
                self.supertype_expression()
                self.state = 1468
                self.match(expressParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyntaxContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def schema_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Schema_declContext)
            else:
                return self.getTypedRuleContext(expressParser.Schema_declContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_syntax

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyntax" ):
                listener.enterSyntax(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyntax" ):
                listener.exitSyntax(self)




    def syntax(self):

        localctx = expressParser.SyntaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_syntax)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1473 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1472
                self.schema_decl()
                self.state = 1475 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==expressParser.SCHEMA):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.FactorContext)
            else:
                return self.getTypedRuleContext(expressParser.FactorContext,i)


        def multiplication_like_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Multiplication_like_opContext)
            else:
                return self.getTypedRuleContext(expressParser.Multiplication_like_opContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = expressParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.factor()
            self.state = 1483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__18) | (1 << expressParser.T__19) | (1 << expressParser.T__20) | (1 << expressParser.AND) | (1 << expressParser.DIV))) != 0) or _la==expressParser.MOD:
                self.state = 1478
                self.multiplication_like_op()
                self.state = 1479
                self.factor()
                self.state = 1485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Total_overContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TOTAL_OVER(self):
            return self.getToken(expressParser.TOTAL_OVER, 0)

        def entity_ref(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Entity_refContext)
            else:
                return self.getTypedRuleContext(expressParser.Entity_refContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_total_over

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTotal_over" ):
                listener.enterTotal_over(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTotal_over" ):
                listener.exitTotal_over(self)




    def total_over(self):

        localctx = expressParser.Total_overContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_total_over)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.match(expressParser.TOTAL_OVER)
            self.state = 1487
            self.match(expressParser.T__1)
            self.state = 1488
            self.entity_ref()
            self.state = 1493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__2:
                self.state = 1489
                self.match(expressParser.T__2)
                self.state = 1490
                self.entity_ref()
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1496
            self.match(expressParser.T__3)
            self.state = 1497
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(expressParser.TYPE, 0)

        def type_id(self):
            return self.getTypedRuleContext(expressParser.Type_idContext,0)


        def underlying_type(self):
            return self.getTypedRuleContext(expressParser.Underlying_typeContext,0)


        def END_TYPE(self):
            return self.getToken(expressParser.END_TYPE, 0)

        def where_clause(self):
            return self.getTypedRuleContext(expressParser.Where_clauseContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_type_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_decl" ):
                listener.enterType_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_decl" ):
                listener.exitType_decl(self)




    def type_decl(self):

        localctx = expressParser.Type_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_type_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self.match(expressParser.TYPE)
            self.state = 1500
            self.type_id()
            self.state = 1501
            self.match(expressParser.T__26)
            self.state = 1502
            self.underlying_type()
            self.state = 1503
            self.match(expressParser.T__0)
            self.state = 1505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.WHERE:
                self.state = 1504
                self.where_clause()


            self.state = 1507
            self.match(expressParser.END_TYPE)
            self.state = 1508
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_type_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_id" ):
                listener.enterType_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_id" ):
                listener.exitType_id(self)




    def type_id(self):

        localctx = expressParser.Type_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_type_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_labelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_label_id(self):
            return self.getTypedRuleContext(expressParser.Type_label_idContext,0)


        def type_label_ref(self):
            return self.getTypedRuleContext(expressParser.Type_label_refContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_type_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_label" ):
                listener.enterType_label(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_label" ):
                listener.exitType_label(self)




    def type_label(self):

        localctx = expressParser.Type_labelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_type_label)
        try:
            self.state = 1514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1512
                self.type_label_id()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1513
                self.type_label_ref()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_label_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_type_label_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_label_id" ):
                listener.enterType_label_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_label_id" ):
                listener.exitType_label_id(self)




    def type_label_id(self):

        localctx = expressParser.Type_label_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_type_label_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(expressParser.NOT, 0)

        def getRuleIndex(self):
            return expressParser.RULE_unary_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_op" ):
                listener.enterUnary_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_op" ):
                listener.exitUnary_op(self)




    def unary_op(self):

        localctx = expressParser.Unary_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_unary_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            _la = self._input.LA(1)
            if not(_la==expressParser.T__4 or _la==expressParser.T__5 or _la==expressParser.NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Underlying_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def concrete_types(self):
            return self.getTypedRuleContext(expressParser.Concrete_typesContext,0)


        def constructed_types(self):
            return self.getTypedRuleContext(expressParser.Constructed_typesContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_underlying_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnderlying_type" ):
                listener.enterUnderlying_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnderlying_type" ):
                listener.exitUnderlying_type(self)




    def underlying_type(self):

        localctx = expressParser.Underlying_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_underlying_type)
        try:
            self.state = 1522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [expressParser.ARRAY, expressParser.BAG, expressParser.BINARY, expressParser.BOOLEAN, expressParser.INTEGER, expressParser.LIST, expressParser.LOGICAL, expressParser.NUMBER, expressParser.REAL, expressParser.SET, expressParser.STRING, expressParser.SIMPLE_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1520
                self.concrete_types()
                pass
            elif token in [expressParser.ENUMERATION, expressParser.EXTENSIBLE, expressParser.SELECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1521
                self.constructed_types()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unique_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNIQUE(self):
            return self.getToken(expressParser.UNIQUE, 0)

        def unique_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Unique_ruleContext)
            else:
                return self.getTypedRuleContext(expressParser.Unique_ruleContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_unique_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnique_clause" ):
                listener.enterUnique_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnique_clause" ):
                listener.exitUnique_clause(self)




    def unique_clause(self):

        localctx = expressParser.Unique_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_unique_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.match(expressParser.UNIQUE)
            self.state = 1528 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1525
                self.unique_rule()
                self.state = 1526
                self.match(expressParser.T__0)
                self.state = 1530 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==expressParser.SELF or _la==expressParser.SIMPLE_ID):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unique_ruleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referenced_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Referenced_attributeContext)
            else:
                return self.getTypedRuleContext(expressParser.Referenced_attributeContext,i)


        def rule_label_id(self):
            return self.getTypedRuleContext(expressParser.Rule_label_idContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_unique_rule

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnique_rule" ):
                listener.enterUnique_rule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnique_rule" ):
                listener.exitUnique_rule(self)




    def unique_rule(self):

        localctx = expressParser.Unique_ruleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_unique_rule)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1532
                self.rule_label_id()
                self.state = 1533
                self.match(expressParser.T__8)


            self.state = 1537
            self.referenced_attribute()
            self.state = 1542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==expressParser.T__2:
                self.state = 1538
                self.match(expressParser.T__2)
                self.state = 1539
                self.referenced_attribute()
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Until_controlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(expressParser.UNTIL, 0)

        def logical_expression(self):
            return self.getTypedRuleContext(expressParser.Logical_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_until_control

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntil_control" ):
                listener.enterUntil_control(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntil_control" ):
                listener.exitUntil_control(self)




    def until_control(self):

        localctx = expressParser.Until_controlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_until_control)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1545
            self.match(expressParser.UNTIL)
            self.state = 1546
            self.logical_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Use_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(expressParser.USE, 0)

        def FROM(self):
            return self.getToken(expressParser.FROM, 0)

        def schema_ref(self):
            return self.getTypedRuleContext(expressParser.Schema_refContext,0)


        def named_type_or_rename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Named_type_or_renameContext)
            else:
                return self.getTypedRuleContext(expressParser.Named_type_or_renameContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_use_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_clause" ):
                listener.enterUse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_clause" ):
                listener.exitUse_clause(self)




    def use_clause(self):

        localctx = expressParser.Use_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_use_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.match(expressParser.USE)
            self.state = 1549
            self.match(expressParser.FROM)
            self.state = 1550
            self.schema_ref()
            self.state = 1562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.T__1:
                self.state = 1551
                self.match(expressParser.T__1)
                self.state = 1552
                self.named_type_or_rename()
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==expressParser.T__2:
                    self.state = 1553
                    self.match(expressParser.T__2)
                    self.state = 1554
                    self.named_type_or_rename()
                    self.state = 1559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1560
                self.match(expressParser.T__3)


            self.state = 1564
            self.match(expressParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Variable_idContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIMPLE_ID(self):
            return self.getToken(expressParser.SIMPLE_ID, 0)

        def getRuleIndex(self):
            return expressParser.RULE_variable_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_id" ):
                listener.enterVariable_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_id" ):
                listener.exitVariable_id(self)




    def variable_id(self):

        localctx = expressParser.Variable_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_variable_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(expressParser.SIMPLE_ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Where_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(expressParser.WHERE, 0)

        def domain_rule(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(expressParser.Domain_ruleContext)
            else:
                return self.getTypedRuleContext(expressParser.Domain_ruleContext,i)


        def getRuleIndex(self):
            return expressParser.RULE_where_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhere_clause" ):
                listener.enterWhere_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhere_clause" ):
                listener.exitWhere_clause(self)




    def where_clause(self):

        localctx = expressParser.Where_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_where_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1568
            self.match(expressParser.WHERE)
            self.state = 1572 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1569
                self.domain_rule()
                self.state = 1570
                self.match(expressParser.T__0)
                self.state = 1574 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << expressParser.T__1) | (1 << expressParser.T__4) | (1 << expressParser.T__5) | (1 << expressParser.T__6) | (1 << expressParser.T__11) | (1 << expressParser.T__14) | (1 << expressParser.ABS) | (1 << expressParser.ACOS) | (1 << expressParser.ASIN) | (1 << expressParser.ATAN) | (1 << expressParser.BLENGTH) | (1 << expressParser.CONST_E) | (1 << expressParser.COS))) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (expressParser.EXISTS - 72)) | (1 << (expressParser.EXP - 72)) | (1 << (expressParser.FALSE - 72)) | (1 << (expressParser.FORMAT - 72)) | (1 << (expressParser.HIBOUND - 72)) | (1 << (expressParser.HIINDEX - 72)) | (1 << (expressParser.LENGTH - 72)) | (1 << (expressParser.LOBOUND - 72)) | (1 << (expressParser.LOG - 72)) | (1 << (expressParser.LOG10 - 72)) | (1 << (expressParser.LOG2 - 72)) | (1 << (expressParser.LOINDEX - 72)) | (1 << (expressParser.NOT - 72)) | (1 << (expressParser.NVL - 72)) | (1 << (expressParser.ODD - 72)) | (1 << (expressParser.PI - 72)) | (1 << (expressParser.QUERY - 72)) | (1 << (expressParser.ROLESOF - 72)) | (1 << (expressParser.SELF - 72)) | (1 << (expressParser.SIN - 72)) | (1 << (expressParser.SIZEOF - 72)) | (1 << (expressParser.SQRT - 72)) | (1 << (expressParser.TAN - 72)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (expressParser.TRUE - 137)) | (1 << (expressParser.TYPEOF - 137)) | (1 << (expressParser.UNKNOWN - 137)) | (1 << (expressParser.USEDIN - 137)) | (1 << (expressParser.VALUE - 137)) | (1 << (expressParser.VALUE_IN - 137)) | (1 << (expressParser.VALUE_UNIQUE - 137)) | (1 << (expressParser.BINARY_LITERAL - 137)) | (1 << (expressParser.ENCODED_STRING_LITERAL - 137)) | (1 << (expressParser.INTEGER_LITERAL - 137)) | (1 << (expressParser.REAL_LITERAL - 137)) | (1 << (expressParser.SIMPLE_ID - 137)) | (1 << (expressParser.SIMPLE_STRING_LITERAL - 137)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_controlContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(expressParser.WHILE, 0)

        def logical_expression(self):
            return self.getTypedRuleContext(expressParser.Logical_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_while_control

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_control" ):
                listener.enterWhile_control(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_control" ):
                listener.exitWhile_control(self)




    def while_control(self):

        localctx = expressParser.While_controlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_while_control)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.match(expressParser.WHILE)
            self.state = 1577
            self.logical_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WidthContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numeric_expression(self):
            return self.getTypedRuleContext(expressParser.Numeric_expressionContext,0)


        def getRuleIndex(self):
            return expressParser.RULE_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidth" ):
                listener.enterWidth(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidth" ):
                listener.exitWidth(self)




    def width(self):

        localctx = expressParser.WidthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1579
            self.numeric_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Width_specContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def width(self):
            return self.getTypedRuleContext(expressParser.WidthContext,0)


        def FIXED(self):
            return self.getToken(expressParser.FIXED, 0)

        def getRuleIndex(self):
            return expressParser.RULE_width_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidth_spec" ):
                listener.enterWidth_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidth_spec" ):
                listener.exitWidth_spec(self)




    def width_spec(self):

        localctx = expressParser.Width_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_width_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1581
            self.match(expressParser.T__1)
            self.state = 1582
            self.width()
            self.state = 1583
            self.match(expressParser.T__3)
            self.state = 1585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==expressParser.FIXED:
                self.state = 1584
                self.match(expressParser.FIXED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





